(function ($) { "use strict";
/*!
 * jQuery formRender: https://formbuilder.online/
 * Version: 3.19.7
 * Author: Kevin Chappell <kevin.b.chappell@gmail.com>
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../src/js/config.js":
/*!***************************!*\
  !*** ../src/js/config.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultFieldSelector: function() { return /* binding */ defaultFieldSelector; },
/* harmony export */   defaultI18n: function() { return /* binding */ defaultI18n; },
/* harmony export */   defaultOptions: function() { return /* binding */ defaultOptions; },
/* harmony export */   defaultTimeout: function() { return /* binding */ defaultTimeout; },
/* harmony export */   gridClassNames: function() { return /* binding */ gridClassNames; },
/* harmony export */   instanceConfig: function() { return /* binding */ instanceConfig; },
/* harmony export */   styles: function() { return /* binding */ styles; }
/* harmony export */ });
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mi18n */ "../node_modules/mi18n/dist/mi18n.min.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mi18n__WEBPACK_IMPORTED_MODULE_0__);

const noop = () => null;
mi18n__WEBPACK_IMPORTED_MODULE_0___default().addLanguage('en-US', {"NATIVE_NAME":"English (US)","ENGLISH_NAME":"English","addOption":"Add Option +","allFieldsRemoved":"All fields were removed.","allowMultipleFiles":"Allow users to upload multiple files","autocomplete":"Autocomplete","button":"Button","cannotBeEmpty":"This field cannot be empty","checkboxGroup":"Checkbox Group","checkbox":"Checkbox","checkboxes":"Checkboxes","className":"Class","clearAllMessage":"Are you sure you want to clear all fields?","clear":"Clear","close":"Close","content":"Content","copy":"Copy To Clipboard","copyButton":"&#43;","copyButtonTooltip":"Copy","dateField":"Date Field","description":"Help Text","descriptionField":"Description","devMode":"Developer Mode","editNames":"Edit Names","editorTitle":"Form Elements","editXML":"Edit XML","enableOther":"Enable &quot;Other&quot;","enableOtherMsg":"Let users enter an unlisted option","fieldDeleteWarning":"false","fieldVars":"Field Variables","fieldNonEditable":"This field cannot be edited.","fieldRemoveWarning":"Are you sure you want to remove this field?","fileUpload":"File Upload","formUpdated":"Form Updated","getStarted":"Drag a field from the right to this area","header":"Header","hide":"Edit","hidden":"Hidden Input","inline":"Inline","inlineDesc":"Display {type} inline","label":"Label","labelEmpty":"Field Label cannot be empty","limitRole":"Limit access to one or more of the following roles:","mandatory":"Mandatory","maxlength":"Max Length","minOptionMessage":"This field requires a minimum of 2 options","minSelectionRequired":"Minimum {min} selections required","multipleFiles":"Multiple Files","name":"Name","no":"No","noFieldsToClear":"There are no fields to clear","number":"Number","off":"Off","on":"On","option":"Option","optionCount":"Option {count}","options":"Options","optional":"optional","optionLabelPlaceholder":"Label","optionValuePlaceholder":"Value","optionEmpty":"Option value required","other":"Other","paragraph":"Paragraph","placeholder":"Placeholder","placeholders.value":"Value","placeholders.label":"Label","placeholders.email":"Enter your email","placeholders.className":"space separated classes","placeholders.password":"Enter your password","preview":"Preview","radioGroup":"Radio Group","radio":"Radio","removeMessage":"Remove Element","removeOption":"Remove Option","remove":"&#215;","required":"Required","requireValidOption":"Only accept a pre-defined Option","richText":"Rich Text Editor","roles":"Access","rows":"Rows","save":"Save","selectOptions":"Options","select":"Select","selectColor":"Select Color","selectionsMessage":"Allow Multiple Selections","size":"Size","size.xs":"Extra Small","size.sm":"Small","size.m":"Default","size.lg":"Large","style":"Style","styles.btn.default":"Default","styles.btn.danger":"Danger","styles.btn.info":"Info","styles.btn.primary":"Primary","styles.btn.success":"Success","styles.btn.warning":"Warning","subtype":"Type","text":"Text Field","textArea":"Text Area","toggle":"Toggle","warning":"Warning!","value":"Value","viewJSON":"[{&hellip;}]","viewXML":"&lt;/&gt;","yes":"Yes"});
const defaultOptions = {
  actionButtons: [],
  allowStageSort: true,
  append: false,
  controlOrder: ['autocomplete', 'button', 'checkbox-group', 'checkbox', 'date', 'file', 'header', 'hidden', 'number', 'paragraph', 'radio-group', 'select', 'text', 'textarea'],
  controlPosition: 'right',
  dataType: 'json',
  defaultFields: [],
  disabledActionButtons: [],
  disabledAttrs: [],
  disabledFieldButtons: {},
  disabledSubtypes: {},
  disableFields: [],
  disableHTMLLabels: false,
  disableInjectedStyle: false,
  editOnAdd: false,
  fields: [],
  fieldRemoveWarn: false,
  fieldEditContainer: null,
  inputSets: [],
  notify: {
    error: error => {
      console.log(error);
    },
    success: success => {
      console.log(success);
    },
    warning: warning => {
      console.warn(warning);
    }
  },
  onAddField: (fieldId, fieldData) => fieldData,
  onAddFieldAfter: (fieldId, fieldData) => fieldData,
  onAddOption: obj => obj,
  onClearAll: noop,
  onCloseFieldEdit: noop,
  onOpenFieldEdit: noop,
  onSave: noop,
  persistDefaultFields: false,
  prepend: false,
  replaceFields: [],
  roles: {
    'adm': 'Administrator',
    'man': 'Manager'
  },
  sanitizerOptions: {
    clobberingProtection: {
      document: false,
      form: false
    },
    backendOrder: []
  },
  scrollToFieldOnAdd: true,
  showActionButtons: true,
  sortableControls: false,
  stickyControls: {
    enable: true,
    offset: {
      top: 5,
      bottom: 'auto',
      right: 'auto'
    }
  },
  subtypes: {},
  templates: {},
  typeUserAttrs: {},
  typeUserDisabledAttrs: {},
  typeUserEvents: {},
  defaultGridColumnClass: 'col-md-12',
  cancelGridModeDistance: 100,
  enableColumnInsertMenu: false,
  enableEnhancedBootstrapGrid: false
};
const styles = {
  btn: ['default', 'danger', 'info', 'primary', 'success', 'warning']
};
const defaultI18n = {
  location: 'assets/lang/'
};
const instanceConfig = {};
const gridClassNames = {
  rowWrapperClass: 'rowWrapper',
  colWrapperClass: 'colWrapper',
  tmpRowPlaceholderClass: 'tempRowWrapper',
  invisibleRowPlaceholderClass: 'invisibleRowPlaceholder'
};
const defaultTimeout = 333;
const defaultFieldSelector = 'li.form-field';

/***/ }),

/***/ "../src/js/control.js":
/*!****************************!*\
  !*** ../src/js/control.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ control; }
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "../src/js/utils.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mi18n */ "../node_modules/mi18n/dist/mi18n.min.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mi18n__WEBPACK_IMPORTED_MODULE_1__);
const _excluded = ["label", "type"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }


class control {
  constructor(config, preview) {
    this.rawConfig = jQuery.extend({}, config);
    config = jQuery.extend({}, config);
    this.preview = preview;
    delete config.isPreview;
    if (this.preview) {
      delete config.required;
    }
    const properties = ['label', 'description', 'subtype', 'required', 'disabled'];
    for (const prop of properties) {
      this[prop] = config[prop];
      delete config[prop];
    }
    if (!config.id) {
      if (config.name) {
        config.id = config.name;
      } else {
        config.id = 'control-' + Math.floor(Math.random() * 10000000 + 1);
      }
    }
    this.id = config.id;
    this.type = config.type;
    if (this.description) {
      config.title = this.description;
    }
    if (!control.controlConfig) {
      control.controlConfig = {};
    }
    const classId = this.subtype ? this.type + '.' + this.subtype : this.type;
    this.classConfig = jQuery.extend({}, control.controlConfig[this.type] || {}, control.controlConfig[classId] || {});
    if (this.subtype) {
      config.type = this.subtype;
    }
    if (this.required) {
      config['required'] = 'required';
      config['aria-required'] = 'true';
    }
    if (this.disabled) {
      config['disabled'] = 'disabled';
    }
    this.config = config;
    this.configure();
  }
  static get definition() {
    return {};
  }
  static register(types, controlClass, parentType) {
    const prefix = parentType ? parentType + '.' : '';
    if (!control.classRegister) {
      control.classRegister = {};
    }
    if (!Array.isArray(types)) {
      types = [types];
    }
    for (const type of types) {
      if (type.indexOf('.') !== -1) {
        control.error(`Ignoring type ${type}. Cannot use the character '.' in a type name.`);
        continue;
      }
      control.classRegister[prefix + type] = controlClass;
    }
  }
  static getRegistered(type) {
    if (type === void 0) {
      type = false;
    }
    const types = Object.keys(control.classRegister);
    if (!types.length) {
      return types;
    }
    return types.filter(key => {
      if (type) {
        return key.indexOf(type + '.') > -1;
      }
      return key.indexOf('.') === -1;
    });
  }
  static getRegisteredSubtypes() {
    const types = {};
    for (const key in control.classRegister) {
      if (control.classRegister.hasOwnProperty(key)) {
        const [type, subtype] = key.split('.');
        if (!subtype) {
          continue;
        }
        if (!types[type]) {
          types[type] = [];
        }
        types[type].push(subtype);
      }
    }
    return types;
  }
  static getClass(type, subtype) {
    const lookup = subtype ? type + '.' + subtype : type;
    const controlClass = control.classRegister[lookup] || control.classRegister[type];
    if (!controlClass) {
      return control.error('Invalid control type. (Type: ' + type + ', Subtype: ' + subtype + '). Please ensure you have registered it, and imported it correctly.');
    }
    return controlClass;
  }
  static loadCustom(controls) {
    let controlClasses = [];
    if (controls) {
      controlClasses = controlClasses.concat(controls);
    }
    if (window.fbControls) {
      controlClasses = controlClasses.concat(window.fbControls);
    }
    if (!this.fbControlsLoaded) {
      for (const loadControl of controlClasses) {
        loadControl(control, control.classRegister);
      }
      this.fbControlsLoaded = true;
    }
  }
  static mi18n(lookup, args) {
    const def = this.definition;
    let i18n = def.i18n || {};
    const locale = (mi18n__WEBPACK_IMPORTED_MODULE_1___default().locale);
    i18n = i18n[locale] || i18n.default || i18n;
    const lookupCamel = this.camelCase(lookup);
    const value = typeof i18n == 'object' ? i18n[lookupCamel] || i18n[lookup] : i18n;
    if (value) {
      return value;
    }
    let mapped = def.mi18n;
    if (typeof mapped === 'object') {
      mapped = mapped[lookupCamel] || mapped[lookup];
    }
    if (!mapped) {
      mapped = lookupCamel;
    }
    return mi18n__WEBPACK_IMPORTED_MODULE_1___default().get(mapped, args);
  }
  static active(type) {
    return !Array.isArray(this.definition.inactive) || this.definition.inactive.indexOf(type) === -1;
  }
  static label(type) {
    return this.mi18n(type);
  }
  static icon(type) {
    const def = this.definition;
    if (def && typeof def.icon === 'object') {
      return def.icon[type];
    }
    return def.icon;
  }
  configure() {}
  build() {
    const _this$config = this.config,
      {
        label,
        type
      } = _this$config,
      data = _objectWithoutProperties(_this$config, _excluded);
    return this.markup(type, (0,_utils__WEBPACK_IMPORTED_MODULE_0__.parsedHtml)(label), data);
  }
  on(eventType) {
    const events = {
      prerender: element => element,
      render: evt => {
        const onRender = () => {
          if (this.onRender) {
            this.onRender(evt);
          }
        };
        if (this.css) {
          (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getStyles)(this.css);
        }
        if (this.js && !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isCached)(this.js)) {
          (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getScripts)(this.js).done(onRender);
        } else {
          onRender(evt);
        }
      }
    };
    return eventType ? events[eventType] : events;
  }
  static error(message) {
    throw new Error(message);
  }
  markup(tag, content, attributes) {
    if (content === void 0) {
      content = '';
    }
    if (attributes === void 0) {
      attributes = {};
    }
    this.element = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.markup)(tag, content, attributes);
    return this.element;
  }
  parsedHtml(html) {
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.parsedHtml)(html);
  }
  static camelCase(str) {
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.camelCase)(str);
  }
}

/***/ }),

/***/ "../src/js/control/autocomplete.js":
/*!*****************************************!*\
  !*** ../src/js/control/autocomplete.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlAutocomplete; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom */ "../src/js/dom.js");
const _excluded = ["values", "type"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }


class controlAutocomplete extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get definition() {
    return {
      mi18n: {
        requireValidOption: 'requireValidOption'
      }
    };
  }
  build() {
    const _this$config = this.config,
      {
        values,
        type
      } = _this$config,
      data = _objectWithoutProperties(_this$config, _excluded);
    const keyboardNav = e => {
      const list = e.target.nextSibling.nextSibling;
      const hiddenField = e.target.nextSibling;
      const activeOption = this.getActiveOption(list);
      const keyCodeMapVals = [[38, () => {
        const previous = this.getPreviousOption(activeOption);
        if (previous) {
          this.selectOption(list, previous);
        }
      }], [40, () => {
        const next = this.getNextOption(activeOption);
        if (next) {
          this.selectOption(list, next);
        }
      }], [13, () => {
        if (activeOption) {
          e.target.value = activeOption.innerHTML;
          hiddenField.value = activeOption.getAttribute('value');
          if (list.style.display === 'none') {
            this.showList(list, activeOption);
          } else {
            this.hideList(list);
          }
        } else {
          if (this.config.requireValidOption) {
            if (!this.isOptionValid(list, e.target.value)) {
              e.target.value = '';
              e.target.nextSibling.value = '';
            }
          }
        }
        e.preventDefault();
      }], [27, () => {
        this.hideList(list);
      }]];
      const keyCodeMap = new Map(keyCodeMapVals);
      let direction = keyCodeMap.get(e.keyCode);
      if (!direction) {
        direction = () => false;
      }
      return direction();
    };
    const fauxEvents = {
      focus: evt => {
        const list = evt.target.nextSibling.nextSibling;
        const filteredOptions = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.filter)(list.querySelectorAll('li'), evt.target.value);
        evt.target.addEventListener('keydown', keyboardNav);
        if (evt.target.value.length > 0) {
          const selectedOption = filteredOptions.length > 0 ? filteredOptions[filteredOptions.length - 1] : null;
          this.showList(list, selectedOption);
        }
      },
      blur: evt => {
        evt.target.removeEventListener('keydown', keyboardNav);
        const blurTimeout = setTimeout(() => {
          evt.target.nextSibling.nextSibling.style.display = 'none';
          clearTimeout(blurTimeout);
        }, 200);
        if (this.config.requireValidOption) {
          const list = evt.target.nextSibling.nextSibling;
          if (!this.isOptionValid(list, evt.target.value)) {
            evt.target.value = '';
            evt.target.nextSibling.value = '';
          }
        }
      },
      input: evt => {
        const list = evt.target.nextSibling.nextSibling;
        const hiddenField = evt.target.nextSibling;
        hiddenField.value = evt.target.value;
        const filteredOptions = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.filter)(list.querySelectorAll('li'), evt.target.value);
        if (filteredOptions.length == 0) {
          this.hideList(list);
        } else {
          let activeOption = this.getActiveOption(list);
          if (!activeOption) {
            activeOption = filteredOptions[filteredOptions.length - 1];
          }
          this.showList(list, activeOption);
        }
      }
    };
    const fauxAttrs = Object.assign({}, data, {
      id: `${data.id}-input`,
      autocomplete: 'off',
      events: fauxEvents
    });
    const hiddenAttrs = Object.assign({}, data, {
      type: 'hidden'
    });
    delete fauxAttrs.name;
    const field = [this.markup('input', null, fauxAttrs), this.markup('input', null, hiddenAttrs)];
    const options = values.map(optionData => {
      const label = optionData.label;
      const config = {
        events: {
          click: evt => {
            const list = evt.target.parentElement;
            const field = list.previousSibling.previousSibling;
            field.value = optionData.label;
            field.nextSibling.value = optionData.value;
            this.hideList(list);
          }
        },
        value: optionData.value
      };
      return this.markup('li', label, config);
    });
    field.push(this.markup('ul', options, {
      id: `${data.id}-list`,
      className: `formbuilder-${type}-list`
    }));
    return field;
  }
  hideList(list) {
    this.selectOption(list, null);
    list.style.display = 'none';
  }
  showList(list, selectedOption) {
    this.selectOption(list, selectedOption);
    list.style.display = 'block';
    list.style.width = list.parentElement.offsetWidth + 'px';
  }
  getActiveOption(list) {
    const activeOption = list.getElementsByClassName('active-option')[0];
    if (activeOption && activeOption.style.display !== 'none') {
      return activeOption;
    }
    return null;
  }
  getPreviousOption(current) {
    let previous = current;
    do {
      previous = previous ? previous.previousSibling : null;
    } while (previous != null && previous.style.display === 'none');
    return previous;
  }
  getNextOption(current) {
    let next = current;
    do {
      next = next ? next.nextSibling : null;
    } while (next != null && next.style.display === 'none');
    return next;
  }
  selectOption(list, selectedOption) {
    const options = list.querySelectorAll('li');
    for (let i = 0; i < options.length; i++) {
      options[i].classList.remove('active-option');
    }
    if (selectedOption) {
      selectedOption.classList.add('active-option');
    }
  }
  isOptionValid(list, value) {
    const options = list.querySelectorAll('li');
    let validValue = false;
    for (let i = 0; i < options.length; i++) {
      if (options[i].innerHTML === value) {
        validValue = true;
        break;
      }
    }
    return validValue;
  }
  onRender(evt) {
    if (this.config.userData) {
      const $el = $('#' + this.config.name);
      const $options = $el.next();
      const preSelectedOption = this.config.userData[0];
      let selectedOption = null;
      $options.find('li').each(function () {
        if ($(this).attr('value') === preSelectedOption) {
          selectedOption = $(this).get(0);
          return;
        }
      });
      if (selectedOption === null) {
        if (this.config.requireValidOption) {
          return;
        } else {
          $el.prev().val(this.config.userData[0]);
          return;
        }
      }
      $el.prev().val(selectedOption.innerHTML);
      $el.val(selectedOption.getAttribute('value'));
      const list = $el.next().get(0);
      if (list.style.display === 'none') {
        this.showList(list, selectedOption);
      } else {
        this.hideList(list);
      }
    }
    return evt;
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('autocomplete', controlAutocomplete);

/***/ }),

/***/ "../src/js/control/button.js":
/*!***********************************!*\
  !*** ../src/js/control/button.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlButton; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");

class controlButton extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  build() {
    return {
      field: this.markup('button', this.label, this.config),
      layout: 'noLabel'
    };
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('button', controlButton);
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['button', 'submit', 'reset'], controlButton, 'button');

/***/ }),

/***/ "../src/js/control/custom.js":
/*!***********************************!*\
  !*** ../src/js/control/custom.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlCustom; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");

class controlCustom extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(config, preview, template) {
    super(config, preview);
    this.template = template;
  }
  build() {
    let custom = this.template;
    if (!custom) {
      return _control__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Invalid custom control type '${this.type}'. Please ensure you have registered it correctly as a template option.`);
    }
    const fieldData = Object.assign(this.config);
    const properties = ['label', 'description', 'subtype', 'id', 'preview', 'required', 'title', 'aria-required', 'type'];
    for (const prop of properties) {
      fieldData[prop] = this.config[prop] || this[prop];
    }
    custom = custom.bind(this);
    custom = custom(fieldData);
    if (custom.js) {
      this.js = custom.js;
    }
    if (custom.css) {
      this.css = custom.css;
    }
    this.onRender = custom.onRender;
    return {
      field: custom.field,
      layout: custom.layout
    };
  }
}

/***/ }),

/***/ "../src/js/control/hidden.js":
/*!***********************************!*\
  !*** ../src/js/control/hidden.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlHidden; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");

class controlHidden extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  build() {
    this.field = this.markup('input', null, this.config);
    return {
      field: this.field,
      layout: 'hidden'
    };
  }
  onRender() {
    if (this.config.userData) {
      $(this.field).val(this.config.userData[0]);
    }
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('hidden', controlHidden);

/***/ }),

/***/ "../src/js/control/index.js":
/*!**********************************!*\
  !*** ../src/js/control/index.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _autocomplete__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autocomplete */ "../src/js/control/autocomplete.js");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./button */ "../src/js/control/button.js");
/* harmony import */ var _custom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom */ "../src/js/control/custom.js");
/* harmony import */ var _hidden__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hidden */ "../src/js/control/hidden.js");
/* harmony import */ var _paragraph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./paragraph */ "../src/js/control/paragraph.js");
/* harmony import */ var _select__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./select */ "../src/js/control/select.js");
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./text */ "../src/js/control/text.js");
/* harmony import */ var _textarea__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./textarea */ "../src/js/control/textarea.js");
/* harmony import */ var _textarea_tinymce__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./textarea.tinymce */ "../src/js/control/textarea.tinymce.js");
/* harmony import */ var _textarea_quill__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./textarea.quill */ "../src/js/control/textarea.quill.js");










/* harmony default export */ __webpack_exports__["default"] = ({
  controlAutocomplete: _autocomplete__WEBPACK_IMPORTED_MODULE_0__["default"],
  controlButton: _button__WEBPACK_IMPORTED_MODULE_1__["default"],
  controlCustom: _custom__WEBPACK_IMPORTED_MODULE_2__["default"],
  controlHidden: _hidden__WEBPACK_IMPORTED_MODULE_3__["default"],
  controlParagraph: _paragraph__WEBPACK_IMPORTED_MODULE_4__["default"],
  controlSelect: _select__WEBPACK_IMPORTED_MODULE_5__["default"],
  controlText: _text__WEBPACK_IMPORTED_MODULE_6__["default"],
  controlTextarea: _textarea__WEBPACK_IMPORTED_MODULE_7__["default"],
  controlTinymce: _textarea_tinymce__WEBPACK_IMPORTED_MODULE_8__["default"],
  controlQuill: _textarea_quill__WEBPACK_IMPORTED_MODULE_9__["default"]
});

/***/ }),

/***/ "../src/js/control/paragraph.js":
/*!**************************************!*\
  !*** ../src/js/control/paragraph.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlParagraph; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "../src/js/utils.js");
const _excluded = ["type"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }


class controlParagraph extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  build() {
    const _this$config = this.config,
      {
        type
      } = _this$config,
      attrs = _objectWithoutProperties(_this$config, _excluded);
    let tag = type;
    const typeMap = {
      paragraph: 'p',
      header: this.subtype
    };
    if (typeMap[type]) {
      tag = typeMap[type];
    }
    return {
      field: this.markup(tag, _utils__WEBPACK_IMPORTED_MODULE_1__["default"].parsedHtml(this.label), attrs),
      layout: 'noLabel'
    };
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['paragraph', 'header'], controlParagraph);
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['p', 'address', 'blockquote', 'canvas', 'output'], controlParagraph, 'paragraph');
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'], controlParagraph, 'header');

/***/ }),

/***/ "../src/js/control/select.js":
/*!***********************************!*\
  !*** ../src/js/control/select.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlSelect; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "../src/js/utils.js");
const _excluded = ["values", "value", "placeholder", "type", "inline", "other", "toggle"],
  _excluded2 = ["label"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }


class controlSelect extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get definition() {
    return {
      inactive: ['checkbox'],
      mi18n: {
        minSelectionRequired: 'minSelectionRequired'
      }
    };
  }
  build() {
    const options = [];
    const _this$config = this.config,
      {
        values,
        value,
        placeholder,
        type,
        inline,
        other,
        toggle
      } = _this$config,
      data = _objectWithoutProperties(_this$config, _excluded);
    const optionType = type.replace('-group', '');
    const isSelect = type === 'select';
    if (data.multiple || type === 'checkbox-group') {
      data.name = data.name + '[]';
    }
    if (type === 'checkbox-group' && data.required) {
      const self = this;
      const defaultOnRender = this.onRender.bind(this);
      this.onRender = function () {
        defaultOnRender();
        self.groupRequired();
      };
    }
    delete data.title;
    if (values) {
      if (placeholder && isSelect) {
        options.push(this.markup('option', placeholder, {
          disabled: true,
          selected: true,
          value: ''
        }));
      }
      for (let i = 0; i < values.length; i++) {
        let option = values[i];
        if (typeof option === 'string') {
          option = {
            label: option,
            value: option
          };
        }
        const {
            label = ''
          } = option,
          optionAttrs = _objectWithoutProperties(option, _excluded2);
        optionAttrs.id = `${data.id}-${i}`;
        if (!optionAttrs.selected || placeholder) {
          delete optionAttrs.selected;
        }
        if (typeof value !== 'undefined' && optionAttrs.value === value) {
          optionAttrs.selected = true;
        }
        if (isSelect) {
          const o = this.markup('option', document.createTextNode(label), optionAttrs);
          options.push(o);
        } else {
          const labelContents = [label];
          let wrapperClass = `formbuilder-${optionType}`;
          if (inline) {
            wrapperClass += '-inline';
          }
          optionAttrs.type = optionType;
          if (optionAttrs.selected) {
            optionAttrs.checked = 'checked';
            delete optionAttrs.selected;
          }
          const input = this.markup('input', null, Object.assign({}, data, optionAttrs));
          const labelAttrs = {
            for: optionAttrs.id
          };
          let output = [input, this.markup('label', labelContents, labelAttrs)];
          if (toggle) {
            labelAttrs.className = 'kc-toggle';
            labelContents.unshift(input, this.markup('span'));
            output = this.markup('label', labelContents, labelAttrs);
          }
          const wrapper = this.markup('div', output, {
            className: wrapperClass
          });
          options.push(wrapper);
        }
      }
      if (!isSelect && other) {
        var _data$className;
        const otherOptionAttrs = {
          id: `${data.id}-other`,
          className: `${(_data$className = data.className) !== null && _data$className !== void 0 ? _data$className : ''} other-option`,
          value: ''
        };
        let wrapperClass = `formbuilder-${optionType}`;
        if (inline) {
          wrapperClass += '-inline';
        }
        const optionAttrs = Object.assign({}, data, otherOptionAttrs);
        optionAttrs.type = optionType;
        const otherValAttrs = {
          type: 'text',
          events: {
            input: evt => {
              const otherInput = evt.target;
              const other = otherInput.parentElement.previousElementSibling;
              other.value = otherInput.value;
            }
          },
          id: `${otherOptionAttrs.id}-value`,
          className: 'other-val'
        };
        const primaryInput = this.markup('input', null, optionAttrs);
        const otherInputs = [document.createTextNode(_control__WEBPACK_IMPORTED_MODULE_0__["default"].mi18n('other')), this.markup('input', null, otherValAttrs)];
        const inputLabel = this.markup('label', otherInputs, {
          for: optionAttrs.id
        });
        const wrapper = this.markup('div', [primaryInput, inputLabel], {
          className: wrapperClass
        });
        options.push(wrapper);
      }
    }
    if (type == 'select') {
      this.dom = this.markup(optionType, options, (0,_utils__WEBPACK_IMPORTED_MODULE_1__.trimObj)(data, true));
    } else {
      this.dom = this.markup('div', options, {
        className: type
      });
    }
    return this.dom;
  }
  groupRequired() {
    const checkboxes = this.element.getElementsByTagName('input');
    const setValidity = (checkbox, isValid) => {
      const minReq = _control__WEBPACK_IMPORTED_MODULE_0__["default"].mi18n('minSelectionRequired', 1);
      if (!isValid) {
        checkbox.setCustomValidity(minReq);
      } else {
        checkbox.setCustomValidity('');
      }
    };
    const toggleRequired = (checkboxes, isValid) => {
      [].forEach.call(checkboxes, cb => {
        if (isValid) {
          cb.removeAttribute('required');
        } else {
          cb.setAttribute('required', 'required');
        }
        setValidity(cb, isValid);
      });
    };
    const toggleValid = () => {
      const isValid = [].some.call(checkboxes, cb => cb.checked);
      toggleRequired(checkboxes, isValid);
    };
    for (let i = checkboxes.length - 1; i >= 0; i--) {
      checkboxes[i].addEventListener('change', toggleValid);
    }
    toggleValid();
  }
  onRender() {
    if (this.config.userData) {
      const selectedOptions = this.config.userData.slice();
      if (this.config.type === 'select') {
        $(this.dom).val(selectedOptions).prop('selected', true);
      } else if (this.config.type.endsWith('-group')) {
        if (this.config.type === 'checkbox-group') {
          this.dom.querySelectorAll('input[type=checkbox]').forEach(input => {
            input.removeAttribute('checked');
          });
        }
        this.dom.querySelectorAll('input').forEach(input => {
          if (input.classList.contains('other-val')) {
            return;
          }
          for (let i = 0; i < selectedOptions.length; i++) {
            if (input.value === selectedOptions[i]) {
              input.setAttribute('checked', 'checked');
              selectedOptions.splice(i, 1);
              break;
            }
          }
          if (input.id.endsWith('-other') && selectedOptions.length > 0) {
            const otherVal = this.dom.querySelector(`#${input.id}-value`);
            input.setAttribute('checked', 'checked');
            otherVal.value = input.value = selectedOptions[0];
            otherVal.style.display = 'inline-block';
          }
        });
      }
    }
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['select', 'checkbox-group', 'radio-group', 'checkbox'], controlSelect);

/***/ }),

/***/ "../src/js/control/text.js":
/*!*********************************!*\
  !*** ../src/js/control/text.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlText; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");

class controlText extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get definition() {
    return {
      mi18n: {
        date: 'dateField',
        file: 'fileUpload'
      }
    };
  }
  build() {
    let {
      name
    } = this.config;
    name = this.config.multiple ? `${name}[]` : name;
    const inputConfig = Object.assign({}, this.config, {
      name
    });
    this.dom = this.markup('input', null, inputConfig);
    return this.dom;
  }
  onRender() {
    if (this.config.userData) {
      $(this.dom).val(this.config.userData[0]);
    }
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['text', 'file', 'date', 'number'], controlText);
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['text', 'password', 'email', 'color', 'tel'], controlText, 'text');
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['date', 'time', 'datetime-local'], controlText, 'date');
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['number', 'range'], controlText, 'number');

/***/ }),

/***/ "../src/js/control/textarea.js":
/*!*************************************!*\
  !*** ../src/js/control/textarea.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlTextarea; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");
const _excluded = ["value"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

class controlTextarea extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get definition() {
    return {
      mi18n: {
        textarea: 'textArea'
      }
    };
  }
  build() {
    const _this$config = this.config,
      {
        value = ''
      } = _this$config,
      attrs = _objectWithoutProperties(_this$config, _excluded);
    delete attrs['type'];
    this.field = this.markup('textarea', this.parsedHtml(value), attrs);
    return this.field;
  }
  onRender() {
    if (this.config.userData) {
      $(this.field).val(this.config.userData[0]);
    }
  }
  on(eventType) {
    if (eventType == 'prerender' && this.preview) {
      return element => {
        if (this.field) {
          element = this.field;
        }
        $(element).on('mousedown', e => {
          e.stopPropagation();
        });
      };
    }
    return super.on(eventType);
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('textarea', controlTextarea);
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('textarea', controlTextarea, 'textarea');

/***/ }),

/***/ "../src/js/control/textarea.quill.js":
/*!*******************************************!*\
  !*** ../src/js/control/textarea.quill.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlQuill; }
/* harmony export */ });
/* harmony import */ var _textarea__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textarea */ "../src/js/control/textarea.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "../src/js/utils.js");
const _excluded = ["value"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


class controlQuill extends _textarea__WEBPACK_IMPORTED_MODULE_0__["default"] {
  configure() {
    const defaultClassConfig = {
      js: 'https://cdn.quilljs.com/1.2.4/quill.js',
      css: 'https://cdn.quilljs.com/1.2.4/quill.snow.css'
    };
    const defaultEditorConfig = {
      modules: {
        toolbar: [[{
          header: [1, 2, false]
        }], ['bold', 'italic', 'underline'], ['code-block']]
      },
      placeholder: this.config.placeholder || '',
      theme: 'snow'
    };
    const [customClassConfig, customEditorConfig] = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].splitObject(this.classConfig, ['css', 'js']);
    Object.assign(this, _objectSpread(_objectSpread({}, defaultClassConfig), customClassConfig));
    this.editorConfig = _objectSpread(_objectSpread({}, defaultEditorConfig), customEditorConfig);
  }
  build() {
    const _this$config = this.config,
      {
        value = ''
      } = _this$config,
      attrs = _objectWithoutProperties(_this$config, _excluded);
    delete attrs['type'];
    this.field = this.markup('div', null, attrs);
    if (this.field.classList.contains('form-control')) {
      this.field.classList.remove('form-control');
    }
    return this.field;
  }
  onRender(evt) {
    const value = this.config.value || '';
    const Delta = window.Quill.import('delta');
    window.fbEditors.quill[this.id] = {};
    const editor = window.fbEditors.quill[this.id];
    editor.instance = new window.Quill(this.field, this.editorConfig);
    editor.data = new Delta();
    if (value) {
      editor.instance.setContents(window.JSON.parse(this.parsedHtml(value)));
    }
    editor.instance.on('text-change', function (delta) {
      editor.data = editor.data.compose(delta);
    });
    return evt;
  }
}
_textarea__WEBPACK_IMPORTED_MODULE_0__["default"].register('quill', controlQuill, 'textarea');

/***/ }),

/***/ "../src/js/control/textarea.tinymce.js":
/*!*********************************************!*\
  !*** ../src/js/control/textarea.tinymce.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlTinymce; }
/* harmony export */ });
/* harmony import */ var _textarea__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textarea */ "../src/js/control/textarea.js");
const _excluded = ["value"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

class controlTinymce extends _textarea__WEBPACK_IMPORTED_MODULE_0__["default"] {
  configure() {
    this.js = [];
    if (!window.tinymce) {
      this.js.push('https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.9.11/tinymce.min.js');
    }
    if (this.classConfig.js) {
      let js = this.classConfig.js;
      if (!Array.isArray(js)) {
        js = new Array(js);
      }
      this.js = this.js.concat(js);
      delete this.classConfig.js;
    }
    if (this.classConfig.css) {
      this.css = this.classConfig.css;
    }
    this.editorOptions = {
      height: 250,
      paste_data_images: true,
      plugins: ['advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'print', 'preview', 'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen', 'insertdatetime', 'media', 'table', 'contextmenu', 'paste', 'code'],
      toolbar: 'undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | table'
    };
  }
  build() {
    const _this$config = this.config,
      {
        value = ''
      } = _this$config,
      attrs = _objectWithoutProperties(_this$config, _excluded);
    delete attrs['type'];
    this.field = this.markup('textarea', this.parsedHtml(value), attrs);
    if (attrs.disabled) {
      this.editorOptions.readonly = true;
    }
    return this.field;
  }
  onRender() {
    const oldInst = window.tinymce.get(this.id);
    if (oldInst) {
      window.tinymce.remove(oldInst);
    }
    const options = jQuery.extend(this.editorOptions, this.classConfig);
    options.target = this.field;
    const removedPlugins = [];
    if (Number(window.tinymce.majorVersion) >= 5) {
      removedPlugins.push('contextmenu');
    }
    if (Number(window.tinymce.majorVersion) >= 6) {
      removedPlugins.push('paste', 'print');
    }
    options.plugins = options.plugins.filter(plugin => {
      return removedPlugins.indexOf(plugin) === -1;
    });
    const userData = this.config.userData ? this.parsedHtml(this.config.userData[0]) : undefined;
    const copiedData = window.lastFormBuilderCopiedTinyMCE ? this.parsedHtml(window.lastFormBuilderCopiedTinyMCE) : undefined;
    window.lastFormBuilderCopiedTinyMCE = null;
    const afterInit = function (inst) {
      if (copiedData) {
        inst[0].setContent(copiedData);
      } else if (userData) {
        inst[0].setContent(userData);
      }
    };
    setTimeout(() => {
      window.tinymce.init(options).then(afterInit);
    }, 0);
  }
}
_textarea__WEBPACK_IMPORTED_MODULE_0__["default"].register('tinymce', controlTinymce, 'textarea');

/***/ }),

/***/ "../src/js/customControls.js":
/*!***********************************!*\
  !*** ../src/js/customControls.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ customControls; }
/* harmony export */ });
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mi18n */ "../node_modules/mi18n/dist/mi18n.min.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mi18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../src/js/control.js");
/* harmony import */ var _control_custom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./control/custom */ "../src/js/control/custom.js");



class customControls {
  constructor(templates, fields) {
    if (templates === void 0) {
      templates = {};
    }
    if (fields === void 0) {
      fields = [];
    }
    this.customRegister = {};
    this.templateControlRegister = {};
    this.def = {
      icon: {},
      i18n: {}
    };
    this.register(templates, fields);
  }
  register(templates, fields) {
    if (templates === void 0) {
      templates = {};
    }
    if (fields === void 0) {
      fields = [];
    }
    const locale = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().locale);
    if (!this.def.i18n[locale]) {
      this.def.i18n[locale] = {};
    }
    const _this = this;
    Object.keys(templates).forEach(templateName => {
      const templateControl = function (config, preview) {
        this.customControl = new _control_custom__WEBPACK_IMPORTED_MODULE_2__["default"](config, preview, templates[templateName]);
        this.build = function () {
          return this.customControl.build();
        };
        this.on = function (eventType) {
          return this.customControl.on(eventType);
        };
      };
      templateControl.definition = {};
      templateControl.label = type => _this.label(type);
      templateControl.icon = type => _this.icon(type);
      this.templateControlRegister[templateName] = templateControl;
    });
    for (const field of fields) {
      let type = field.type;
      field.attrs = field.attrs || {};
      if (!type) {
        if (!field.attrs.type) {
          _control__WEBPACK_IMPORTED_MODULE_1__["default"].error('Ignoring invalid custom field definition. Please specify a type property.');
          continue;
        }
        type = field.attrs.type;
      }
      let lookup = field.subtype || type;
      if (!templates[type]) {
        const controlClass = _control__WEBPACK_IMPORTED_MODULE_1__["default"].getClass(type, field.subtype);
        if (!controlClass) {
          super.error('Error while registering custom field: ' + type + (field.subtype ? ':' + field.subtype : '') + '. Unable to find any existing defined control or template for rendering.');
          continue;
        }
        lookup = field.datatype ? field.datatype : `${type}-${Math.floor(Math.random() * 9000 + 1000)}`;
        this.customRegister[lookup] = jQuery.extend(field, {
          type: type,
          class: controlClass
        });
      } else {
        const controlClass = this.templateControlRegister[type];
        controlClass.definition = field;
        this.customRegister[lookup] = jQuery.extend(field, {
          type: type,
          class: controlClass
        });
      }
      this.def.i18n[locale][lookup] = field.label;
      this.def.icon[lookup] = field.icon;
    }
  }
  label(type) {
    const def = this.definition;
    let i18n = def.i18n || {};
    const locale = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().locale);
    i18n = i18n[locale] || i18n.default || i18n;
    const lookupCamel = _control__WEBPACK_IMPORTED_MODULE_1__["default"].camelCase(type);
    const value = typeof i18n == 'object' ? i18n[lookupCamel] || i18n[type] : i18n;
    if (value) {
      return value;
    } else {
      let mapped = def.mi18n;
      if (typeof mapped === 'object') {
        mapped = mapped[lookupCamel] || mapped[type];
      }
      if (!mapped) {
        mapped = lookupCamel;
      }
      return mi18n__WEBPACK_IMPORTED_MODULE_0___default().get(mapped);
    }
  }
  get definition() {
    return {};
  }
  icon(type) {
    const def = this.definition;
    if (def && typeof def.icon === 'object') {
      return def.icon[type];
    }
    return def.icon;
  }
  getRegistered(type) {
    if (type === void 0) {
      type = false;
    }
    if (type) {
      var _this$templateControl;
      return (_this$templateControl = this.templateControlRegister[type]) !== null && _this$templateControl !== void 0 ? _this$templateControl : undefined;
    }
    return Object.keys(this.customRegister);
  }
  getClass(type) {
    var _this$templateControl2;
    return (_this$templateControl2 = this.templateControlRegister[type]) !== null && _this$templateControl2 !== void 0 ? _this$templateControl2 : undefined;
  }
  lookup(lookup) {
    return this.customRegister[lookup];
  }
}

/***/ }),

/***/ "../src/js/dom.js":
/*!************************!*\
  !*** ../src/js/dom.js ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ Dom; },
/* harmony export */   defaultSubtypes: function() { return /* binding */ defaultSubtypes; },
/* harmony export */   empty: function() { return /* binding */ empty; },
/* harmony export */   filter: function() { return /* binding */ filter; },
/* harmony export */   instanceDom: function() { return /* binding */ instanceDom; },
/* harmony export */   optionFields: function() { return /* binding */ optionFields; },
/* harmony export */   optionFieldsRegEx: function() { return /* binding */ optionFieldsRegEx; },
/* harmony export */   remove: function() { return /* binding */ remove; }
/* harmony export */ });
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const instanceDom = {};
const defaultSubtypes = {
  text: ['text', 'password', 'email', 'color', 'tel'],
  header: ['h1', 'h2', 'h3'],
  button: ['button', 'submit', 'reset'],
  paragraph: ['p', 'address', 'blockquote', 'canvas', 'output'],
  textarea: ['textarea', 'quill']
};
const remove = element => {
  if (element.parentNode) {
    element.parentNode.removeChild(element);
  }
};
const empty = element => {
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
  return element;
};
const filter = function (elems, term, show) {
  if (show === void 0) {
    show = true;
  }
  const filteredElems = [];
  let toggle = ['none', 'block'];
  if (show) {
    toggle = toggle.reverse();
  }
  for (let i = elems.length - 1; i >= 0; i--) {
    const txt = elems[i].textContent.toLowerCase();
    if (txt.indexOf(term.toLowerCase()) !== -1) {
      elems[i].style.display = toggle[0];
      filteredElems.push(elems[i]);
    } else {
      elems[i].style.display = toggle[1];
    }
  }
  return filteredElems;
};
const optionFields = ['select', 'checkbox-group', 'checkbox', 'radio-group', 'autocomplete'];
const optionFieldsRegEx = new RegExp(`(${optionFields.join('|')})`);
class Dom {
  constructor(formID) {
    _defineProperty(this, "stage", void 0);
    _defineProperty(this, "controls", void 0);
    _defineProperty(this, "formActions", void 0);
    _defineProperty(this, "editorWrap", void 0);
    this.optionFields = optionFields;
    this.optionFieldsRegEx = optionFieldsRegEx;
    this.subtypes = defaultSubtypes;
    this.empty = empty;
    this.filter = filter;
    instanceDom[formID] = this;
    return instanceDom[formID];
  }
  onRender(node, cb) {
    if (!node.parentElement) {
      window.requestAnimationFrame(() => this.onRender(node, cb));
    } else {
      cb(node);
    }
  }
}

/***/ }),

/***/ "../src/js/events.js":
/*!***************************!*\
  !*** ../src/js/events.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function createNewEvent(eventName) {
  let event;
  if (typeof Event === 'function') {
    event = new Event(eventName);
  } else {
    event = document.createEvent('Event');
    event.initEvent(eventName, true, true);
  }
  return event;
}
const events = {
  loaded: createNewEvent('loaded'),
  viewData: createNewEvent('viewData'),
  userDeclined: createNewEvent('userDeclined'),
  modalClosed: createNewEvent('modalClosed'),
  modalOpened: createNewEvent('modalOpened'),
  formSaved: createNewEvent('formSaved'),
  fieldAdded: createNewEvent('fieldAdded'),
  fieldRemoved: createNewEvent('fieldRemoved'),
  fieldRendered: createNewEvent('fieldRendered'),
  fieldEditOpened: createNewEvent('fieldEditOpened'),
  fieldEditClosed: createNewEvent('fieldEditClosed'),
  stageEmptied: createNewEvent('stageEmptied')
};
/* harmony default export */ __webpack_exports__["default"] = (events);

/***/ }),

/***/ "../src/js/layout.js":
/*!***************************!*\
  !*** ../src/js/layout.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ layout; }
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "../src/js/utils.js");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../src/js/control.js");



const processClassName = (data, field) => {
  let className = data.id ? `formbuilder-${data.type} form-group field-${data.id}` : '';
  if (data.className) {
    const classes = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getAllGridRelatedClasses)(data.className);
    if (classes && classes.length > 0) {
      className += ` ${classes.join(' ')}`;
      if (!Array.isArray(field)) {
        field = [field];
      }
      field.forEach(item => {
        if (item.classList) {
          item.classList.remove(...classes);
        }
        item.querySelectorAll('[class*=row-],[class*=col-]').forEach(element => {
          if (element.classList) {
            element.classList.remove(...classes);
          }
        });
      });
    }
  }
  return className;
};
class layout {
  constructor(templates, preview, disableHTMLLabels, controlConfig) {
    var _preview, _disableHTMLLabels, _controlConfig;
    if (preview === void 0) {
      preview = false;
    }
    if (disableHTMLLabels === void 0) {
      disableHTMLLabels = false;
    }
    if (controlConfig === void 0) {
      controlConfig = {};
    }
    this.preview = (_preview = preview) !== null && _preview !== void 0 ? _preview : false;
    this.disableHTMLLabels = (_disableHTMLLabels = disableHTMLLabels) !== null && _disableHTMLLabels !== void 0 ? _disableHTMLLabels : false;
    this.controlConfig = (_controlConfig = controlConfig) !== null && _controlConfig !== void 0 ? _controlConfig : {};
    this.templates = {
      label: null,
      help: null,
      default: (field, label, help, data) => {
        if (help) {
          label.appendChild(help);
        }
        return this.markup('div', [label, field], {
          className: processClassName(data, field)
        });
      },
      noLabel: (field, label, help, data) => {
        return this.markup('div', field, {
          className: processClassName(data, field)
        });
      },
      hidden: field => {
        return field;
      }
    };
    if (templates) {
      this.templates = jQuery.extend(this.templates, templates);
    }
    this.configure();
  }
  configure() {}
  build(renderControl, data, forceTemplate) {
    if (this.preview) {
      if (data.name) {
        data.name = data.name + '-preview';
      } else {
        data.name = _utils__WEBPACK_IMPORTED_MODULE_0__["default"].nameAttr(data) + '-preview';
      }
    }
    data.id = data.name;
    this.data = jQuery.extend({}, data);
    _control__WEBPACK_IMPORTED_MODULE_1__["default"].controlConfig = this.controlConfig;
    const controlInstance = new renderControl(data, this.preview);
    let field = controlInstance.build();
    if (typeof field !== 'object' || !field.field) {
      field = {
        field: field
      };
    }
    if (typeof field.field === 'string') {
      const tmpField = this.markup('div', field.field, {});
      if (tmpField.childElementCount === 1) {
        field.field = tmpField.children.item(0);
      } else {
        field.field = Array.from(tmpField.children);
      }
    }
    const label = this.label();
    const help = this.help();
    let elementTemplate;
    if (forceTemplate && this.isTemplate(forceTemplate)) {
      elementTemplate = forceTemplate;
    } else {
      elementTemplate = this.isTemplate(field.layout) ? field.layout : 'default';
    }
    const element = this.processTemplate(elementTemplate, field.field, label, help);
    controlInstance.on('prerender')(element);
    element.addEventListener('fieldRendered', controlInstance.on('render'));
    return element;
  }
  label() {
    const label = this.data.label || '';
    const labelText = this.disableHTMLLabels ? document.createTextNode(label) : _utils__WEBPACK_IMPORTED_MODULE_0__["default"].parsedHtml(label);
    const labelContents = [labelText];
    if (this.data.required) {
      labelContents.push(this.markup('span', '*', {
        className: 'formbuilder-required'
      }));
    }
    if (this.isTemplate('label')) {
      return this.processTemplate('label', labelContents);
    }
    return this.markup('label', labelContents, {
      for: this.data.id,
      className: `formbuilder-${this.data.type}-label`
    });
  }
  help() {
    if (!this.data.description) {
      return null;
    }
    if (this.isTemplate('help')) {
      return this.processTemplate('help', this.data.description);
    }
    return this.markup('span', '?', {
      className: 'tooltip-element',
      tooltip: this.data.description
    });
  }
  isTemplate(template) {
    return typeof this.templates[template] === 'function';
  }
  processTemplate(template) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    let processed = this.templates[template](...args, this.data);
    if (processed.jquery) {
      processed = processed[0];
    }
    return processed;
  }
  markup(tag, content, attributes) {
    if (content === void 0) {
      content = '';
    }
    if (attributes === void 0) {
      attributes = {};
    }
    return _utils__WEBPACK_IMPORTED_MODULE_0__["default"].markup(tag, content, attributes);
  }
}

/***/ }),

/***/ "../src/js/sanitizer.js":
/*!******************************!*\
  !*** ../src/js/sanitizer.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attributeWillClobber: function() { return /* binding */ attributeWillClobber; },
/* harmony export */   isPotentiallyDangerousAttribute: function() { return /* binding */ isPotentiallyDangerousAttribute; },
/* harmony export */   sanitizeNamedAttribute: function() { return /* binding */ sanitizeNamedAttribute; },
/* harmony export */   setElementContent: function() { return /* binding */ setElementContent; },
/* harmony export */   setSanitizerConfig: function() { return /* binding */ setSanitizerConfig; }
/* harmony export */ });
const sanitizerConfig = {
  clobberingProtection: {
    document: true,
    form: true,
    namespaceAttributes: false
  },
  backendOrder: ['dompurify', 'sanitizer', 'fallback'],
  backends: {
    sanitizer: typeof window['Sanitizer'] === 'function' ? new window.Sanitizer() : false,
    dompurify: window.DOMPurify ? (purify => {
      purify.setConfig({
        SANITIZE_DOM: false,
        ADD_ATTR: ['contenteditable']
      });
      return purify;
    })(window.DOMPurify) : false,
    fallback: content => content
  }
};
const setSanitizerConfig = config => {
  if (typeof config !== 'object') {
    throw 'Invalid value given to setSanitizerConfig, expected config object';
  }
  if (config.hasOwnProperty('clobberingProtection')) {
    ['document', 'form', 'namespaceAttributes'].forEach(type => {
      if (config.clobberingProtection.hasOwnProperty(type) && typeof config.clobberingProtection[type] === 'boolean') {
        sanitizerConfig.clobberingProtection[type] = config.clobberingProtection[type];
      }
    });
  }
  if (config.hasOwnProperty('backends')) {
    if (typeof config.backends === 'object') {
      Object.keys(config.backends).forEach(implementation => sanitizerConfig.backends[implementation] = config.backends[implementation]);
    } else {
      throw 'backends config expected to be an Object';
    }
  }
  if (config.hasOwnProperty('backendOrder')) {
    sanitizerConfig.backendOrder = [];
    if (Array.isArray(config.backendOrder)) {
      config.backendOrder.forEach(backend => {
        if (sanitizerConfig.backends.hasOwnProperty(backend)) {
          sanitizerConfig.backendOrder.push(backend);
        } else {
          throw 'unknown sanitizer backend ' + backend;
        }
      });
    } else {
      throw 'backendOrder config expected to be an Array of backend keys as strings';
    }
  }
};
const isPotentiallyDangerousAttribute = (attrName, attrValue) => {
  if (sanitizerConfig.backendOrder.length === 0) {
    return false;
  }
  const attrNameLc = attrName.toLowerCase();
  attrValue = attrValue ? attrValue + '' : '';
  return attrNameLc.startsWith('on') || ['form', 'formaction'].includes(attrNameLc) || attrValue.trim().toLowerCase().startsWith('javascript:');
};
function fallbackSanitizer(content) {
  const context = document.implementation.createHTMLDocument('');
  const base = context.createElement('base');
  base.href = document.location.href;
  context.head.appendChild(base);
  const exclude_tags = ['applet', 'comment', 'embed', 'iframe', 'link', 'listing', 'meta', 'noscript', 'object', 'plaintext', 'script', 'style', 'xmp'];
  const output = $.parseHTML(content, context, false);
  $(output).find('*').addBack().each((nindex, node) => {
    if (node.nodeName === '#text') {
      return;
    }
    if (node.tagName && exclude_tags.includes(node.tagName.toLowerCase())) {
      if (node.parentElement) {
        node.parentElement.removeChild(node);
      } else if (output.includes(node)) {
        output.splice(output.indexOf(node), 1);
      }
      return;
    }
    if (node.attributes) {
      Array.from(node.attributes).forEach(attribute => {
        if (isPotentiallyDangerousAttribute(attribute.name, attribute.value)) {
          $(node).removeAttr(attribute.name);
        }
      });
    }
  });
  const tmp = context.createElement('div');
  $(tmp).html(output);
  return tmp.innerHTML;
}
sanitizerConfig.backends.fallback = fallbackSanitizer;
const attributeWillClobber = value => {
  const check_doc = document;
  const check_form = document.createElement('form');
  return value in check_doc || value in check_form;
};
const sanitizeNamedAttribute = value => {
  const check_doc = sanitizerConfig.clobberingProtection.document ? document : false;
  const check_form = sanitizerConfig.clobberingProtection.form ? document.createElement('form') : false;
  if (check_doc && value in check_doc || check_form && value in check_form) {
    return sanitizerConfig.clobberingProtection.namespaceAttributes ? 'user-content-' + value : undefined;
  }
  return value;
};
const sanitizeDomClobbering = element => {
  $(element).find('*').each((nindex, node) => {
    const protectedTypes = ['id', 'name'];
    if (['embed', 'form', 'iframe', 'image', 'img', 'object'].includes(node.tagName.toLowerCase())) {
      node.removeAttribute('name');
    }
    protectedTypes.forEach(attrName => {
      if (node.hasAttribute(attrName)) {
        const value = sanitizeNamedAttribute(node.getAttribute(attrName));
        if (value === undefined) {
          node.removeAttribute(attrName);
        } else {
          node.setAttribute(attrName, value);
        }
      }
    });
  });
  return element;
};
const sanitizersCallbacks = {
  fallback: (element, content) => {
    const purifier = sanitizerConfig.backends.fallback;
    const supported = typeof purifier === 'function';
    if (supported) {
      content = purifier(content);
    }
    element.innerHTML = content;
    return supported;
  },
  dompurify: (element, content) => {
    const purifier = sanitizerConfig.backends.dompurify;
    if (purifier === false || !purifier.isSupported) {
      return false;
    }
    element.innerHTML = purifier.sanitize(content);
    return true;
  },
  sanitizer: (element, content) => {
    const sanitizer = sanitizerConfig.backends.sanitizer;
    if (sanitizer) {
      element.setHTML(content, {
        sanitizer: sanitizer
      });
      return true;
    }
    return false;
  }
};
const setElementContent = function (element, content, asText) {
  if (asText === void 0) {
    asText = false;
  }
  if (asText) {
    element.textContent = content;
  } else {
    const proxyElem = document.createElement(element.tagName);
    const performedBy = sanitizerConfig.backendOrder.find(type => sanitizersCallbacks[type](proxyElem, content));
    if (performedBy !== undefined) {
      sanitizeDomClobbering(proxyElem);
      element.innerHTML = proxyElem.innerHTML;
      return element;
    }
    element.innerHTML = content;
    return element;
  }
};
const sanitizer = {
  setElementContent,
  setSanitizerConfig,
  sanitizeNamedAttribute,
  isPotentiallyDangerousAttribute,
  attributeWillClobber
};
/* harmony default export */ __webpack_exports__["default"] = (sanitizer);

/***/ }),

/***/ "../src/js/utils.js":
/*!**************************!*\
  !*** ../src/js/utils.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addEventListeners: function() { return /* binding */ addEventListeners; },
/* harmony export */   attrString: function() { return /* binding */ attrString; },
/* harmony export */   bindEvents: function() { return /* binding */ bindEvents; },
/* harmony export */   bootstrapColumnRegex: function() { return /* binding */ bootstrapColumnRegex; },
/* harmony export */   camelCase: function() { return /* binding */ camelCase; },
/* harmony export */   capitalize: function() { return /* binding */ capitalize; },
/* harmony export */   closest: function() { return /* binding */ closest; },
/* harmony export */   escapeAttr: function() { return /* binding */ escapeAttr; },
/* harmony export */   escapeAttrs: function() { return /* binding */ escapeAttrs; },
/* harmony export */   escapeHtml: function() { return /* binding */ escapeHtml; },
/* harmony export */   firstNumberOrUndefined: function() { return /* binding */ firstNumberOrUndefined; },
/* harmony export */   flattenArray: function() { return /* binding */ flattenArray; },
/* harmony export */   forEach: function() { return /* binding */ forEach; },
/* harmony export */   forceNumber: function() { return /* binding */ forceNumber; },
/* harmony export */   generateSelectorClassNames: function() { return /* binding */ generateSelectorClassNames; },
/* harmony export */   getAllGridRelatedClasses: function() { return /* binding */ getAllGridRelatedClasses; },
/* harmony export */   getContentType: function() { return /* binding */ getContentType; },
/* harmony export */   getScripts: function() { return /* binding */ getScripts; },
/* harmony export */   getStyles: function() { return /* binding */ getStyles; },
/* harmony export */   hyphenCase: function() { return /* binding */ hyphenCase; },
/* harmony export */   insertStyle: function() { return /* binding */ insertStyle; },
/* harmony export */   isCached: function() { return /* binding */ isCached; },
/* harmony export */   markup: function() { return /* binding */ markup; },
/* harmony export */   merge: function() { return /* binding */ merge; },
/* harmony export */   mobileClass: function() { return /* binding */ mobileClass; },
/* harmony export */   nameAttr: function() { return /* binding */ nameAttr; },
/* harmony export */   parseXML: function() { return /* binding */ parseXML; },
/* harmony export */   parsedHtml: function() { return /* binding */ parsedHtml; },
/* harmony export */   removeFromArray: function() { return /* binding */ removeFromArray; },
/* harmony export */   removeStyle: function() { return /* binding */ removeStyle; },
/* harmony export */   safeAttr: function() { return /* binding */ safeAttr; },
/* harmony export */   safeAttrName: function() { return /* binding */ safeAttrName; },
/* harmony export */   safename: function() { return /* binding */ safename; },
/* harmony export */   subtract: function() { return /* binding */ subtract; },
/* harmony export */   titleCase: function() { return /* binding */ titleCase; },
/* harmony export */   trimObj: function() { return /* binding */ trimObj; },
/* harmony export */   unique: function() { return /* binding */ unique; },
/* harmony export */   validAttr: function() { return /* binding */ validAttr; },
/* harmony export */   xmlAttrString: function() { return /* binding */ xmlAttrString; },
/* harmony export */   xmlParseAttrs: function() { return /* binding */ xmlParseAttrs; },
/* harmony export */   xmlParseOptions: function() { return /* binding */ xmlParseOptions; },
/* harmony export */   xmlParseUserData: function() { return /* binding */ xmlParseUserData; }
/* harmony export */ });
/* harmony import */ var _sanitizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sanitizer */ "../src/js/sanitizer.js");
const _excluded = ["events"],
  _excluded2 = ["tag", "content"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

window.fbLoaded = {
  js: [],
  css: []
};
window.fbEditors = {
  quill: {},
  tinymce: {}
};
const trimObj = function (obj, removeFalse) {
  if (removeFalse === void 0) {
    removeFalse = false;
  }
  if (null == obj || typeof obj !== 'object') return obj;
  const attrs = typeof window.structuredClone === 'function' ? window.structuredClone(obj) : Object.assign({}, obj);
  const xmlRemove = [null, undefined, ''];
  if (removeFalse) {
    xmlRemove.push(false);
  }
  for (const attr in attrs) {
    if (xmlRemove.includes(attrs[attr])) {
      delete attrs[attr];
    } else if (Array.isArray(attrs[attr])) {
      if (!attrs[attr].length) {
        delete attrs[attr];
      }
    }
  }
  return attrs;
};
const validAttr = function (attr) {
  const invalid = ['values', 'enableOther', 'other', 'label', 'subtype'];
  return !invalid.includes(attr);
};
const xmlAttrString = attrs => Object.entries(attrs).map(_ref => {
  let [key, val] = _ref;
  return `${hyphenCase(key)}="${val}"`;
}).join(' ');
const attrString = attrs => Object.entries(attrs).map(_ref2 => {
  let [key, val] = _ref2;
  return validAttr(key) && Object.values(safeAttr(key, val)).join('');
}).filter(Boolean).join(' ');
const safeAttr = (name, value) => {
  name = safeAttrName(name);
  let valString;
  if (value) {
    if (Array.isArray(value)) {
      valString = escapeAttr(value.join(' '));
    } else {
      if (typeof value === 'boolean') {
        value = value.toString();
      }
      valString = escapeAttr(value.trim());
    }
  }
  value = value ? `="${valString}"` : '';
  return {
    name,
    value
  };
};
const flattenArray = arr => arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flattenArray(val) : val), []);
const safeAttrName = name => {
  const safeAttr = {
    className: 'class'
  };
  return safeAttr[name] || hyphenCase(name);
};
const hyphenCase = str => {
  str = str.replace(/[^\w\s\-]/gi, '');
  str = str.replace(/([A-Z])/g, function ($1) {
    return '-' + $1.toLowerCase();
  });
  return str.replace(/\s/g, '-').replace(/^-+/g, '');
};
const camelCase = str => str.replace(/-([a-z])/g, (m, w) => w.toUpperCase());
const bindEvents = (element, events) => {
  if (events) {
    for (const event in events) {
      if (events.hasOwnProperty(event)) {
        element.addEventListener(event, evt => events[event](evt));
      }
    }
  }
};
const nameAttr = function () {
  let lepoch;
  let counter = 0;
  return function (field) {
    const epoch = Date.now();
    if (epoch === lepoch) {
      ++counter;
    } else {
      counter = 0;
      lepoch = epoch;
    }
    const prefix = field.type || hyphenCase(field.label);
    return prefix + '-' + epoch + '-' + counter;
  };
}();
const getContentType = content => {
  if (content === undefined) {
    return content;
  }
  return [['array', content => Array.isArray(content)], ['node', content => content instanceof window.Node || content instanceof window.HTMLElement], ['component', () => content && content.dom], [typeof content, () => true]].find(typeCondition => typeCondition[1](content))[0];
};
const markup = function (tag, content, attributes) {
  if (content === void 0) {
    content = '';
  }
  if (attributes === void 0) {
    attributes = {};
  }
  let contentType = getContentType(content);
  const {
      events
    } = attributes,
    attrs = _objectWithoutProperties(attributes, _excluded);
  const field = document.createElement(tag);
  const appendContent = {
    string: content => {
      (0,_sanitizer__WEBPACK_IMPORTED_MODULE_0__.setElementContent)(field, field.innerHTML + content);
    },
    object: config => {
      const {
          tag,
          content
        } = config,
        data = _objectWithoutProperties(config, _excluded2);
      return field.appendChild(markup(tag, content, data));
    },
    node: content => {
      return field.appendChild(content);
    },
    array: content => {
      for (let i = 0; i < content.length; i++) {
        contentType = getContentType(content[i]);
        appendContent[contentType](content[i]);
      }
    },
    function: content => {
      content = content();
      contentType = getContentType(content);
      appendContent[contentType](content);
    },
    undefined: () => {}
  };
  for (const attr in attrs) {
    if (attrs.hasOwnProperty(attr)) {
      const name = safeAttrName(attr);
      let attrVal = Array.isArray(attrs[attr]) ? unique(attrs[attr].join(' ').split(' ')).join(' ') : attrs[attr];
      if ((0,_sanitizer__WEBPACK_IMPORTED_MODULE_0__.isPotentiallyDangerousAttribute)(name, attrVal)) {
        continue;
      }
      if (typeof attrVal === 'boolean') {
        if (attrVal === true) {
          const val = name === 'contenteditable' ? true : name;
          field.setAttribute(name, val);
        }
      } else {
        if (name === 'id' || name === 'name') {
          attrVal = (0,_sanitizer__WEBPACK_IMPORTED_MODULE_0__.sanitizeNamedAttribute)(attrVal);
        }
        if (attrVal !== undefined) {
          field.setAttribute(name, attrVal);
        }
      }
    }
  }
  if (content) {
    appendContent[contentType](content);
  }
  bindEvents(field, events);
  return field;
};
const xmlParseAttrs = elem => {
  const attrs = elem.attributes;
  const data = {};
  forEach(attrs, attr => {
    let attrVal = attrs[attr].value || '';
    if (attrVal.match(/false|true/g)) {
      attrVal = attrVal === 'true';
    } else if (attrVal.match(/undefined/g)) {
      attrVal = undefined;
    }
    if (attrVal) {
      data[camelCase(attrs[attr].name)] = attrVal;
    }
  });
  return data;
};
const xmlParseOptions = options => {
  const data = [];
  for (let i = 0; i < options.length; i++) {
    const optionData = _objectSpread(_objectSpread({}, xmlParseAttrs(options[i])), {}, {
      label: options[i].textContent
    });
    data.push(optionData);
  }
  return data;
};
const xmlParseUserData = userData => {
  const data = [];
  if (userData.length) {
    const values = userData[0].getElementsByTagName('value');
    for (let i = 0; i < values.length; i++) {
      data.push(values[i].textContent);
    }
  }
  return data;
};
const parseXML = xmlString => {
  const parser = new window.DOMParser();
  const xml = parser.parseFromString(xmlString, 'text/xml');
  const formData = [];
  if (xml) {
    const fields = xml.getElementsByTagName('field');
    for (let i = 0; i < fields.length; i++) {
      const fieldData = xmlParseAttrs(fields[i]);
      const options = fields[i].getElementsByTagName('option');
      const userData = fields[i].getElementsByTagName('userData');
      if (options && options.length) {
        fieldData.values = xmlParseOptions(options);
      }
      if (userData && userData.length) {
        fieldData.userData = xmlParseUserData(userData);
      }
      formData.push(fieldData);
    }
  }
  return formData;
};
const parsedHtml = html => {
  const escapeElement = document.createElement('textarea');
  escapeElement.innerHTML = html;
  return escapeElement.textContent;
};
const escapeHtml = html => {
  const escapeElement = document.createElement('textarea');
  escapeElement.textContent = html;
  return escapeElement.innerHTML;
};
const escapeAttr = str => {
  const match = {
    '"': '&quot;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
  };
  const replaceTag = tag => match[tag] || tag;
  return typeof str === 'string' ? str.replace(/["&<>]/g, replaceTag) : str;
};
const escapeAttrs = attrs => {
  for (const attr in attrs) {
    if (attrs.hasOwnProperty(attr)) {
      attrs[attr] = escapeAttr(attrs[attr]);
    }
  }
  return attrs;
};
const forEach = function (array, callback, scope) {
  for (let i = 0; i < array.length; i++) {
    callback.call(scope, i, array[i]);
  }
};
const unique = array => {
  return array.filter((elem, pos, arr) => arr.indexOf(elem) === pos);
};
const removeFromArray = (val, arr) => {
  const index = arr.indexOf(val);
  if (index > -1) {
    arr.splice(index, 1);
  }
};
const getScripts = function (scriptScr, path) {
  if (path === void 0) {
    path = '';
  }
  const $ = jQuery;
  let _arr = [];
  if (!Array.isArray(scriptScr)) {
    scriptScr = [scriptScr];
  }
  if (!isCached(scriptScr)) {
    _arr = jQuery.map(scriptScr, src => {
      const options = {
        dataType: 'script',
        cache: true,
        url: (path || '') + src
      };
      return jQuery.ajax(options).done(() => window.fbLoaded.js.push(src));
    });
  }
  _arr.push(jQuery.Deferred(deferred => $(deferred.resolve)));
  return jQuery.when(..._arr);
};
const isCached = function (src, type) {
  if (type === void 0) {
    type = 'js';
  }
  const cache = window.fbLoaded[type];
  return Array.isArray(src) ? src.every(s => cache.includes(s)) : cache.includes(src);
};
const getStyles = function (scriptScr, path) {
  if (path === void 0) {
    path = '';
  }
  if (!Array.isArray(scriptScr)) {
    scriptScr = [scriptScr];
  }
  scriptScr.forEach(src => {
    let type = 'href';
    let key = src;
    let id = '';
    if (typeof src == 'object') {
      type = src.type || (src.style ? 'inline' : 'href');
      id = src.id;
      key = id || src.href || src.style;
      src = type === 'inline' ? src.style : src.href;
    }
    if (isCached(key, 'css')) {
      return;
    }
    if (type === 'href') {
      const link = document.createElement('link');
      link.type = 'text/css';
      link.rel = 'stylesheet';
      link.href = (path || '') + src;
      document.head.appendChild(link);
    } else {
      $(`<style type="text/css">${src}</style>`).attr('id', id).appendTo($(document.head));
    }
    window.fbLoaded.css.push(key);
  });
};
const capitalize = str => {
  return str.replace(/\b\w/g, function (m) {
    return m.toUpperCase();
  });
};
const merge = (obj1, obj2) => {
  const mergedObj = Object.assign({}, obj1, obj2);
  for (const prop in obj2) {
    if (mergedObj.hasOwnProperty(prop)) {
      if (Array.isArray(obj2[prop])) {
        mergedObj[prop] = Array.isArray(obj1[prop]) ? unique(obj1[prop].concat(obj2[prop])) : obj2[prop];
      } else if (typeof obj2[prop] === 'object') {
        mergedObj[prop] = merge(obj1[prop], obj2[prop]);
      } else {
        mergedObj[prop] = obj2[prop];
      }
    }
  }
  return mergedObj;
};
const addEventListeners = (el, evts, cb) => evts.split(' ').forEach(e => el.addEventListener(e, cb, false));
const closest = (el, cls) => {
  const className = cls.replace('.', '');
  while ((el = el.parentElement) && !el.classList.contains(className));
  return el;
};
const mobileClass = () => {
  let mobileClass = '';
  (a => {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)) {
      mobileClass = 'formbuilder-mobile';
    }
  })(navigator.userAgent || navigator.vendor || window.opera);
  return mobileClass;
};
const safename = str => {
  return str.replace(/\s/g, '-').replace(/[^a-zA-Z0-9[\]_-]/g, '');
};
const forceNumber = str => str.replace(/[^0-9]/g, '');
const subtract = (arr, from) => {
  return from.filter(function (a) {
    return !~this.indexOf(a);
  }, arr);
};
const insertStyle = srcs => {
  srcs = Array.isArray(srcs) ? srcs : [srcs];
  const promises = srcs.map(_ref3 => {
    let {
      src,
      id
    } = _ref3;
    return new Promise(resolve => {
      if (window.fbLoaded.css.includes(src)) {
        return resolve(src);
      }
      const formeoStyle = markup('link', null, {
        href: src,
        rel: 'stylesheet',
        id
      });
      document.head.insertBefore(formeoStyle, document.head.firstChild);
    });
  });
  return Promise.all(promises);
};
const removeStyle = id => {
  const elem = document.getElementById(id);
  return elem.parentElement.removeChild(elem);
};
const bootstrapColumnRegex = /^col-(xs|sm|md|lg)-([^\s]+)/;
const getAllGridRelatedClasses = className => {
  return typeof className === 'string' ? className.split(' ').filter(x => bootstrapColumnRegex.test(x) || x.startsWith('row-')) : [];
};
function titleCase(str) {
  const lowers = ['a', 'an', 'and', 'as', 'at', 'but', 'by', 'for', 'for', 'from', 'in', 'into', 'near', 'nor', 'of', 'on', 'onto', 'or', 'the', 'to', 'with'].map(lower => `\\s${lower}\\s`);
  const regex = new RegExp(`(?!${lowers.join('|')})\\w\\S*`, 'g');
  return `${str}`.replace(regex, txt => txt.charAt(0).toUpperCase() + txt.slice(1).replace(/[A-Z]/g, word => ` ${word}`));
}
function firstNumberOrUndefined() {
  for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
    options[_key] = arguments[_key];
  }
  return options.find(x => typeof x === 'number');
}
const utils = {
  addEventListeners,
  attrString,
  camelCase,
  capitalize,
  closest,
  getContentType,
  escapeAttr,
  escapeAttrs,
  escapeHtml,
  forceNumber,
  forEach,
  getScripts,
  getStyles,
  hyphenCase,
  isCached,
  markup,
  merge,
  mobileClass,
  nameAttr,
  parsedHtml,
  parseXML,
  removeFromArray,
  safeAttr,
  safeAttrName,
  safename,
  subtract,
  trimObj,
  unique,
  validAttr,
  titleCase,
  firstNumberOrUndefined
};
utils.splitObject = (obj, keys) => {
  const reconstructObj = initialObj => (result, key) => {
    result[key] = initialObj[key];
    return result;
  };
  const kept = Object.keys(obj).filter(key => keys.includes(key)).reduce(reconstructObj(obj), {});
  const rest = Object.keys(obj).filter(key => !keys.includes(key)).reduce(reconstructObj(obj), {});
  return [kept, rest];
};
$.fn.swapWith = function (that) {
  const $this = this;
  const $that = $(that);
  const $temp = $('<div>');
  $this.before($temp);
  $that.before($this);
  $temp.before($that).remove();
  return $this;
};
const generateSelectorClassNames = classNamesObj => Object.entries(classNamesObj).reduce((acc, _ref4) => {
  let [key, val] = _ref4;
  return _objectSpread(_objectSpread({}, acc), {}, {
    [`${key}Selector`]: `.${val}`
  });
}, {});
/* harmony default export */ __webpack_exports__["default"] = (utils);

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[3]!../src/sass/form-render.scss":
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[3]!../src/sass/form-render.scss ***!
  \**************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".rendered-form * {\n  box-sizing: border-box;\n}\n.rendered-form.formbuilder-embedded-bootstrap button,\n.rendered-form.formbuilder-embedded-bootstrap input,\n.rendered-form.formbuilder-embedded-bootstrap select,\n.rendered-form.formbuilder-embedded-bootstrap textarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n.rendered-form.formbuilder-embedded-bootstrap input {\n  line-height: normal;\n}\n.rendered-form.formbuilder-embedded-bootstrap textarea {\n  overflow: auto;\n}\n.rendered-form.formbuilder-embedded-bootstrap button,\n.rendered-form.formbuilder-embedded-bootstrap input,\n.rendered-form.formbuilder-embedded-bootstrap select,\n.rendered-form.formbuilder-embedded-bootstrap textarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn-group {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn-group > .btn {\n  position: relative;\n  float: left;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n  border-radius: 0;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .btn + .btn,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .btn + .btn-group,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .btn-group + .btn,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .btn-group + .btn-group {\n  margin-left: -1px;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn-group > .btn:last-child:not(:first-child),\n.rendered-form.formbuilder-embedded-bootstrap .btn-group > .dropdown-toggle:not(:first-child),\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .input-group .form-control:last-child,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .input-group-addon:last-child,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .input-group-btn:first-child > .btn-group:not(:first-child) > .btn,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .input-group-btn:first-child > .btn:not(:first-child),\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .input-group-btn:last-child > .btn,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .input-group-btn:last-child > .btn-group > .btn,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group .input-group-btn:last-child > .dropdown-toggle {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn-group > .btn.active,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group > .btn:active,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group > .btn:focus,\n.rendered-form.formbuilder-embedded-bootstrap .btn-group > .btn:hover {\n  z-index: 2;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn {\n  display: inline-block;\n  padding: 6px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 1.42857143;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  touch-action: manipulation;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  background-image: none;\n  border-radius: 4px;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn.btn-lg {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn.btn-sm {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn.btn-xs {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn.active, .rendered-form.formbuilder-embedded-bootstrap .btn.btn-active, .rendered-form.formbuilder-embedded-bootstrap .btn:active {\n  background-image: none;\n}\n.rendered-form.formbuilder-embedded-bootstrap .input-group .form-control:last-child,\n.rendered-form.formbuilder-embedded-bootstrap .input-group-addon:last-child,\n.rendered-form.formbuilder-embedded-bootstrap .input-group-btn:first-child > .btn-group:not(:first-child) > .btn,\n.rendered-form.formbuilder-embedded-bootstrap .input-group-btn:first-child > .btn:not(:first-child),\n.rendered-form.formbuilder-embedded-bootstrap .input-group-btn:last-child > .btn,\n.rendered-form.formbuilder-embedded-bootstrap .input-group-btn:last-child > .btn-group > .btn,\n.rendered-form.formbuilder-embedded-bootstrap .input-group-btn:last-child > .dropdown-toggle {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.rendered-form.formbuilder-embedded-bootstrap .input-group .form-control,\n.rendered-form.formbuilder-embedded-bootstrap .input-group-addon,\n.rendered-form.formbuilder-embedded-bootstrap .input-group-btn {\n  display: table-cell;\n}\n.rendered-form.formbuilder-embedded-bootstrap .input-group-lg > .form-control,\n.rendered-form.formbuilder-embedded-bootstrap .input-group-lg > .input-group-addon,\n.rendered-form.formbuilder-embedded-bootstrap .input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.rendered-form.formbuilder-embedded-bootstrap .input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n.rendered-form.formbuilder-embedded-bootstrap .input-group .form-control {\n  position: relative;\n  z-index: 2;\n  float: left;\n  width: 100%;\n  margin-bottom: 0;\n}\n.rendered-form.formbuilder-embedded-bootstrap .form-control,\n.rendered-form.formbuilder-embedded-bootstrap output {\n  font-size: 14px;\n  line-height: 1.42857143;\n  display: block;\n}\n.rendered-form.formbuilder-embedded-bootstrap textarea.form-control {\n  height: auto;\n}\n.rendered-form.formbuilder-embedded-bootstrap .form-control {\n  height: 34px;\n  display: block;\n  width: 100%;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  border-radius: 4px;\n}\n.rendered-form.formbuilder-embedded-bootstrap .form-control:focus {\n  outline: 0;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n}\n.rendered-form.formbuilder-embedded-bootstrap .form-group {\n  margin-left: 0px;\n  margin-bottom: 15px;\n}\n.rendered-form.formbuilder-embedded-bootstrap .btn,\n.rendered-form.formbuilder-embedded-bootstrap .form-control {\n  background-image: none;\n}\n.rendered-form.formbuilder-embedded-bootstrap .pull-right {\n  float: right;\n}\n.rendered-form.formbuilder-embedded-bootstrap .pull-left {\n  float: left;\n}\n.rendered-form .formbuilder-required,\n.rendered-form .required-asterisk {\n  color: #c10000;\n}\n.rendered-form .formbuilder-checkbox-group input[type=checkbox],\n.rendered-form .formbuilder-checkbox-group input[type=radio],\n.rendered-form .formbuilder-radio-group input[type=checkbox],\n.rendered-form .formbuilder-radio-group input[type=radio] {\n  margin: 0 4px 0 0;\n}\n.rendered-form .formbuilder-checkbox-inline,\n.rendered-form .formbuilder-radio-inline {\n  margin-right: 8px;\n  display: inline-block;\n  vertical-align: middle;\n  padding-left: 0;\n}\n.rendered-form .formbuilder-checkbox-inline label input[type=text],\n.rendered-form .formbuilder-radio-inline label input[type=text] {\n  margin-top: 0;\n}\n.rendered-form .formbuilder-checkbox-inline:first-child,\n.rendered-form .formbuilder-radio-inline:first-child {\n  padding-left: 0;\n}\n.rendered-form .formbuilder-autocomplete-list {\n  background-color: #fff;\n  display: none;\n  list-style: none;\n  padding: 0;\n  border: 1px solid #ccc;\n  border-width: 0 1px 1px;\n  position: absolute;\n  z-index: 20;\n  max-height: 200px;\n  overflow-y: auto;\n}\n.rendered-form .formbuilder-autocomplete-list li {\n  display: none;\n  cursor: default;\n  padding: 5px;\n  margin: 0;\n  transition: background-color 200ms ease-in-out;\n}\n.rendered-form .formbuilder-autocomplete-list li:hover, .rendered-form .formbuilder-autocomplete-list li.active-option {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n.rendered-form *[tooltip] {\n  position: relative;\n}\n.rendered-form *[tooltip]:hover::after {\n  background: rgba(0, 0, 0, 0.9);\n  border-radius: 5px 5px 5px 0;\n  bottom: 23px;\n  color: #fff;\n  content: attr(tooltip);\n  padding: 10px 5px;\n  position: absolute;\n  z-index: 98;\n  left: 2px;\n  width: 230px;\n  text-shadow: none;\n  font-size: 12px;\n  line-height: 1.5em;\n  cursor: default;\n}\n.rendered-form *[tooltip]:hover::before {\n  border: solid;\n  border-color: #222 transparent;\n  border-width: 6px 6px 0;\n  bottom: 17px;\n  content: \"\";\n  left: 2px;\n  position: absolute;\n  z-index: 99;\n  cursor: default;\n}\n.rendered-form .tooltip-element {\n  visibility: visible;\n  color: #fff;\n  background: #000;\n  width: 16px;\n  height: 16px;\n  border-radius: 8px;\n  display: inline-block;\n  text-align: center;\n  line-height: 16px;\n  margin: 0 5px;\n  font-size: 12px;\n  cursor: default;\n}\n.rendered-form .kc-toggle {\n  padding-left: 0 !important;\n}\n.rendered-form .kc-toggle span {\n  position: relative;\n  width: 48px;\n  height: 24px;\n  background: #e6e6e6;\n  display: inline-block;\n  border-radius: 4px;\n  border: 1px solid #cccccc;\n  padding: 2px;\n  overflow: hidden;\n  float: left;\n  margin-right: 5px;\n  will-change: transform;\n}\n.rendered-form .kc-toggle span::after, .rendered-form .kc-toggle span::before {\n  position: absolute;\n  display: inline-block;\n  top: 0;\n}\n.rendered-form .kc-toggle span::after {\n  position: relative;\n  content: \"\";\n  width: 50%;\n  height: 100%;\n  left: 0;\n  border-radius: 3px;\n  background: linear-gradient(to bottom, white 0%, #ccc 100%);\n  border: 1px solid #999999;\n  transition: transform 100ms;\n  transform: translateX(0);\n}\n.rendered-form .kc-toggle span::before {\n  border-radius: 4px;\n  top: 2px;\n  left: 2px;\n  content: \"\";\n  width: calc(100% - 4px);\n  height: 18px;\n  box-shadow: 0 0 1px 1px #b3b3b3 inset;\n  background-color: transparent;\n}\n.rendered-form .kc-toggle input {\n  height: 0;\n  overflow: hidden;\n  width: 0;\n  opacity: 0;\n  pointer-events: none;\n  margin: 0;\n}\n.rendered-form .kc-toggle input:checked + span::after {\n  transform: translateX(100%);\n}\n.rendered-form .kc-toggle input:checked + span::before {\n  background-color: #6fc665;\n}\n.rendered-form label {\n  font-weight: normal;\n}\n.rendered-form .form-group .formbuilder-required {\n  color: #c10000;\n}\n.rendered-form .other-option:checked + label input {\n  display: inline-block;\n}\n.rendered-form .other-val {\n  margin-left: 5px;\n  display: none;\n}\n.rendered-form .form-control.number {\n  width: auto;\n}\n.rendered-form .form-control[type=color] {\n  width: 60px;\n  padding: 2px;\n  display: inline-block;\n}\n.rendered-form .form-control[multiple] {\n  height: auto;\n}", "",{"version":3,"sources":["webpack://./../src/sass/form-render.scss","webpack://./../src/sass/base/_bs.scss","webpack://./../src/sass/base/_fields.scss","webpack://./../src/sass/base/_variables.scss","webpack://./../src/sass/_tooltip.scss","webpack://./../src/sass/_kc-toggle.scss"],"names":[],"mappings":"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","sourcesContent":["@import 'base/variables';\n\n.rendered-form {\n  * {\n    box-sizing: border-box;\n  }\n\n  &.formbuilder-embedded-bootstrap {\n    @import 'base/bs';\n  }\n  @import 'base/fields';\n  @import 'tooltip';\n  @import 'kc-toggle';\n\n  label {\n    font-weight: normal;\n  }\n\n  .form-group .formbuilder-required {\n    color: $error;\n  }\n\n  .other-option:checked + label {\n    input {\n      display: inline-block;\n    }\n  }\n\n  .other-val {\n    margin-left: 5px;\n    display: none;\n  }\n\n  .form-control {\n    &.number {\n      width: auto;\n    }\n\n    &[type='color'] {\n      width: 60px;\n      padding: 2px;\n      display: inline-block;\n    }\n\n    &[multiple] {\n      height: auto;\n    }\n  }\n}","// Minimal Bootstrap\nbutton,\ninput,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\ninput {\n  line-height: normal;\n}\n\ntextarea {\n  overflow: auto;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.btn-group {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n\n  & > .btn {\n    position: relative;\n    float: left;\n  }\n\n  > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n\n  > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n    border-radius: 0;\n  }\n\n  .btn + .btn,\n  .btn + .btn-group,\n  .btn-group + .btn,\n  .btn-group + .btn-group {\n    margin-left: -1px;\n  }\n\n  > .btn:last-child:not(:first-child),\n  > .dropdown-toggle:not(:first-child),\n  .input-group .form-control:last-child,\n  .input-group-addon:last-child,\n  .input-group-btn:first-child > .btn-group:not(:first-child) > .btn,\n  .input-group-btn:first-child > .btn:not(:first-child),\n  .input-group-btn:last-child > .btn,\n  .input-group-btn:last-child > .btn-group > .btn,\n  .input-group-btn:last-child > .dropdown-toggle {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n\n  > .btn.active,\n  > .btn:active,\n  > .btn:focus,\n  > .btn:hover {\n    z-index: 2;\n  }\n}\n\n.btn {\n  display: inline-block;\n  padding: 6px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 1.42857143;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  touch-action: manipulation;\n  cursor: pointer;\n  user-select: none;\n  background-image: none;\n  border-radius: 4px;\n\n  &.btn-lg {\n    padding: 10px 16px;\n    font-size: 18px;\n    line-height: 1.3333333;\n    border-radius: 6px;\n  }\n\n  &.btn-sm {\n    padding: 5px 10px;\n    font-size: 12px;\n    line-height: 1.5;\n    border-radius: 3px;\n  }\n\n  &.btn-xs {\n    padding: 1px 5px;\n    font-size: 12px;\n    line-height: 1.5;\n    border-radius: 3px;\n  }\n\n  &.active,\n  &.btn-active,\n  &:active {\n    background-image: none;\n  }\n}\n\n.input-group .form-control:last-child,\n.input-group-addon:last-child,\n.input-group-btn:first-child > .btn-group:not(:first-child) > .btn,\n.input-group-btn:first-child > .btn:not(:first-child),\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group > .btn,\n.input-group-btn:last-child > .dropdown-toggle {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.input-group .form-control,\n.input-group-addon,\n.input-group-btn {\n  display: table-cell;\n}\n\n.input-group-lg > .form-control,\n.input-group-lg > .input-group-addon,\n.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n\n  .form-control {\n    position: relative;\n    z-index: 2;\n    float: left;\n    width: 100%;\n    margin-bottom: 0;\n  }\n}\n\n.form-control,\noutput {\n  font-size: 14px;\n  line-height: 1.42857143;\n  display: block;\n}\n\ntextarea.form-control {\n  height: auto;\n}\n\n.form-control {\n  height: 34px;\n  display: block;\n  width: 100%;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  border-radius: 4px;\n\n  &:focus {\n    outline: 0;\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n  }\n}\n\n.form-group {\n  margin-left: 0px;\n  margin-bottom: 15px;\n}\n\n.btn,\n.form-control {\n  background-image: none;\n}\n\n.pull-right {\n  float: right;\n}\n\n.pull-left {\n  float: left;\n}",".formbuilder-required,\n.required-asterisk {\n  color: $error;\n}\n\n.formbuilder-checkbox-group,\n.formbuilder-radio-group {\n  input[type='checkbox'],\n  input[type='radio'] {\n    margin: 0 4px 0 0;\n  }\n}\n\n.formbuilder-checkbox-inline,\n.formbuilder-radio-inline {\n  margin-right: 8px;\n  display: inline-block;\n  vertical-align: middle;\n  padding-left: 0;\n  label {\n    input[type='text'] {\n      margin-top: 0;\n    }\n  }\n}\n\n.formbuilder-checkbox-inline:first-child,\n.formbuilder-radio-inline:first-child {\n  padding-left: 0;\n}\n\n.formbuilder-autocomplete-list {\n  background-color: $white;\n  display: none;\n  list-style: none;\n  padding: 0;\n  border: 1px solid $grey-light;\n  border-width: 0 1px 1px;\n  position: absolute;\n  z-index: 20;\n  max-height: 200px;\n  overflow-y: auto;\n\n  li {\n    display: none;\n    cursor: default;\n    padding: 5px;\n    margin: 0;\n    transition: background-color 200ms ease-in-out;\n\n    &:hover,\n    &.active-option {\n      background-color: $input-box-shadow-color;\n    }\n  }\n}\n","$black: #000;\n$white: #fff;\n$off-white: #fefefe;\n$grey: #666;\n$grey-dark: #222;\n$grey-light: #ccc;\n$grey-light-30: lighten($grey, 30%);\n$dirt-gray: #23241f;\n\n$success: #08fe00;\n$error: #c10000;\n$remove: #c66865;\n$copy: #6fc665;\n$edit: #65aac6;\n\n$input-border-color: #c5c5c5;\n\n$overlay-color: rgba(0, 0, 0, 0.5);\n$empty-stage-color: rgba(255, 255, 255, 0.25);\n$hidden-field-bgcolor: rgba(255, 255, 255, 0.6);\n$input-box-shadow-color: rgba(0, 0, 0, 0.075);\n\n$primary: #337ab7;\n","// TOOLTIP   ------------\n*[tooltip] {\n  position: relative;\n}\n\n*[tooltip]:hover::after {\n  background: rgba(0, 0, 0, 0.9);\n  border-radius: 5px 5px 5px 0;\n  bottom: 23px;\n  color: $white;\n  content: attr(tooltip);\n  padding: 10px 5px;\n  position: absolute;\n  z-index: 98;\n  left: 2px;\n  width: 230px;\n  text-shadow: none;\n  font-size: 12px;\n  line-height: 1.5em;\n  cursor: default;\n}\n\n*[tooltip]:hover::before {\n  border: solid;\n  border-color: $grey-dark transparent;\n  border-width: 6px 6px 0;\n  bottom: 17px;\n  content: '';\n  left: 2px;\n  position: absolute;\n  z-index: 99;\n  cursor: default;\n}\n\n.tooltip-element {\n  visibility: visible;\n  color: $white;\n  background: $black;\n  width: 16px;\n  height: 16px;\n  border-radius: 8px;\n  display: inline-block;\n  text-align: center;\n  line-height: 16px;\n  margin: 0 5px;\n  font-size: 12px;\n  cursor: default;\n}",".kc-toggle {\n  padding-left: 0 !important;\n\n  span {\n    position: relative;\n    width: 48px;\n    height: 24px;\n    background: lighten($grey, 50%);\n    display: inline-block;\n    border-radius: 4px;\n    border: 1px solid lighten($grey, 40%);\n    padding: 2px;\n    overflow: hidden;\n    float: left;\n    margin-right: 5px;\n    will-change: transform;\n\n    &::after,\n    &::before {\n      position: absolute;\n      display: inline-block;\n      top: 0;\n    }\n\n    &::after {\n      position: relative;\n      content: '';\n      width: 50%;\n      height: 100%;\n      left: 0;\n      border-radius: 3px;\n      background: linear-gradient(to bottom, lighten($grey-light-30, 30%) 0%, $grey-light 100%);\n      border: 1px solid lighten($grey, 20%);\n      transition: transform 100ms;\n      transform: translateX(0);\n    }\n\n    &::before {\n      border-radius: 4px;\n      top: 2px;\n      left: 2px;\n      content: '';\n      width: calc(100% - 4px);\n      height: 18px;\n      box-shadow: 0 0 1px 1px lighten($grey, 30%) inset;\n      background-color: transparent;\n    }\n  }\n\n  input {\n    height: 0;\n    overflow: hidden;\n    width: 0;\n    opacity: 0;\n    pointer-events: none;\n    margin: 0;\n\n    &:checked + span {\n      &::after {\n        transform: translateX(100%);\n      }\n\n      &::before {\n        background-color: $copy;\n      }\n    }\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/***/ (function(module) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!*************************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \*************************************************************/
/***/ (function(module) {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "../node_modules/mi18n/dist/mi18n.min.js":
/*!***********************************************!*\
  !*** ../node_modules/mi18n/dist/mi18n.min.js ***!
  \***********************************************/
/***/ (function(module) {

/*!
 * mi18n - https://github.com/Draggable/mi18n
 * Version: 0.4.7
 * Author: Kevin Chappell <kevin.b.chappell@gmail.com> (http://kevin-chappell.com)
 */
module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(2),i=n(10),s=Object.prototype.toString;function a(e){return"[object Array]"===s.call(e)}function u(e){return null!==e&&"object"===(void 0===e?"undefined":r(e))}function c(e){return"[object Function]"===s.call(e)}function f(e,t){if(null!==e&&void 0!==e)if("object"!==(void 0===e?"undefined":r(e))&&(e=[e]),a(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===(void 0===n?"undefined":r(n))?t[o]=e(t[o],n):t[o]=n}for(var o=0,i=arguments.length;o<i;o++)f(arguments[o],n);return t},extend:function(e,t,n){return f(t,function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(13),i={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a={adapter:function(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(3):void 0!==t&&(e=n(3)),e}(),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],function(e){a.headers[e]={}}),r.forEach(["post","put","patch"],function(e){a.headers[e]=r.merge(i)}),e.exports=a}).call(this,n(12))},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0),o=n(14),i=n(16),s=n(17),a=n(18),u=n(4),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(19);e.exports=function(e){return new Promise(function(t,f){var l=e.data,p=e.headers;r.isFormData(l)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||a(e.url)||(d=new window.XDomainRequest,h="onload",g=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var m=e.auth.username||"",y=e.auth.password||"";p.Authorization="Basic "+c(m+":"+y)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||g)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?s(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};o(t,f,r),d=null}},d.onerror=function(){f(u("Network Error",e,null,d)),d=null},d.ontimeout=function(){f(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=n(20),w=(e.withCredentials||a(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;w&&(p[e.xsrfHeaderName]=w)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),f(e),d=null)}),void 0===l&&(l=null),d.send(l)})}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t,n,o,i){var s=new Error(e);return r(s,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";t.__esModule=!0,t.I18N=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(8),s={extension:".lang",location:"assets/lang/",langs:["en-US"],locale:"en-US",override:{}},a=t.I18N=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.langs=Object.create(null),this.loaded=[],this.processConfig(t)}return e.prototype.processConfig=function(e){var t=this,n=Object.assign({},s,e),r=n.location,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(n,["location"]),i=r.replace(/\/?$/,"/");this.config=Object.assign({},{location:i},o);var a=this.config,u=a.override,c=a.preloaded,f=void 0===c?{}:c,l=Object.entries(this.langs).concat(Object.entries(u||f));this.langs=l.reduce(function(e,n){var r=n[0],o=n[1];return e[r]=t.applyLanguage.call(t,r,o),e},{}),this.locale=this.config.locale||this.config.langs[0]},e.prototype.init=function(e){return this.processConfig.call(this,Object.assign({},this.config,e)),this.setCurrent(this.locale)},e.prototype.addLanguage=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};t="string"==typeof t?this.processFile.call(this,t):t,this.applyLanguage.call(this,e,t),this.config.langs.push("locale")},e.prototype.getValue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.locale;return this.langs[t]&&this.langs[t][e]||this.getFallbackValue(e)},e.prototype.getFallbackValue=function(e){var t=Object.values(this.langs).find(function(t){return t[e]});return t&&t[e]},e.prototype.makeSafe=function(e){var t={"{":"\\{","}":"\\}","|":"\\|"};return e=e.replace(/\{|\}|\|/g,function(e){return t[e]}),new RegExp(e,"g")},e.prototype.put=function(e,t){return this.current[e]=t},e.prototype.get=function(e,t){var n=this.getValue(e);if(n){var o=n.match(/\{[^}]+?\}/g),i=void 0;if(t&&o)if("object"===(void 0===t?"undefined":r(t)))for(var s=0;s<o.length;s++)i=o[s].substring(1,o[s].length-1),n=n.replace(this.makeSafe(o[s]),t[i]||"");else n=n.replace(/\{[^}]+?\}/g,t);return n}},e.prototype.fromFile=function(e){for(var t,n=e.split("\n"),r={},o=0;o<n.length;o++)(t=n[o].match(/^(.+?) *?= *?([^\n]+)/))&&(r[t[1]]=t[2].replace(/^\s+|\s+$/,""));return r},e.prototype.processFile=function(e){return this.fromFile(e.replace(/\n\n/g,"\n"))},e.prototype.loadLang=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this;return new Promise(function(r,o){if(-1!==n.loaded.indexOf(e)&&t)return n.applyLanguage.call(n,n.langs[e]),r(n.langs[e]);var s=[n.config.location,e,n.config.extension].join("");return(0,i.get)(s).then(function(t){var o=t.data,i=n.processFile(o);return n.applyLanguage.call(n,e,i),n.loaded.push(e),r(n.langs[e])}).catch(function(){var t=n.applyLanguage.call(n,e);r(t)})})},e.prototype.applyLanguage=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.config.override[e]||{},r=this.langs[e]||{};return this.langs[e]=Object.assign({},r,t,n),this.langs[e]},e.prototype.setCurrent=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"en-US";return this.loadLang(t).then(function(){return e.locale=t,e.current=e.langs[t],e.current})},o(e,[{key:"getLangs",get:function(){return this.config.langs}}]),e}();t.default=new a},function(e,t,n){"use strict";e.exports=n(9)},function(e,t,n){"use strict";var r=n(0),o=n(2),i=n(11),s=n(1);function a(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=a(s);u.Axios=i,u.create=function(e){return a(r.merge(s,e))},u.Cancel=n(6),u.CancelToken=n(26),u.isCancel=n(5),u.all=function(e){return Promise.all(e)},u.spread=n(27),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(1),o=n(0),i=n(21),s=n(22);function a(e){this.defaults=e,this.interceptors={request:new i,response:new i}}a.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=a},function(e,t,n){"use strict";var r,o,i=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var c,f=[],l=!1,p=-1;function d(){l&&c&&(l=!1,c.length?f=c.concat(f):p=-1,f.length&&h())}function h(){if(!l){var e=u(d);l=!0;for(var t=f.length;t;){for(c=f,f=[];++p<t;)c&&c[p].run();p=-1,t=f.length}c=null,l=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new g(e,t)),1!==f.length||l||u(h)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var s=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))}))}),i=s.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,s={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}}),s):s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";function r(){this.message="String contains an invalid character"}r.prototype=new Error,r.prototype.code=5,r.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,o=String(e),i="",s=0,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";o.charAt(0|s)||(a="=",s%1);i+=a.charAt(63&t>>8-s%1*8)){if((n=o.charCodeAt(s+=.75))>255)throw new r;t=t<<8|n}return i}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(0),o=n(23),i=n(5),s=n(1),a=n(24),u=n(25);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(6);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJtaTE4bi5taW4uanMiLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../src/sass/form-render.scss":
/*!************************************!*\
  !*** ../src/sass/form-render.scss ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[3]!./form-render.scss */ "../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[3]!../src/sass/form-render.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {"attributes":{"class":"formBuilder-injected-style"}};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	!function() {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!********************************!*\
  !*** ../src/js/form-render.js ***!
  \********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mi18n */ "../node_modules/mi18n/dist/mi18n.min.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mi18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "../src/js/utils.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom */ "../src/js/dom.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./events */ "../src/js/events.js");
/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./layout */ "../src/js/layout.js");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./control */ "../src/js/control.js");
/* harmony import */ var _control_index__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./control/index */ "../src/js/control/index.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./config */ "../src/js/config.js");
/* harmony import */ var _sass_form_render_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sass/form-render.scss */ "../src/sass/form-render.scss");
/* harmony import */ var _sass_form_render_scss__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_sass_form_render_scss__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _sanitizer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sanitizer */ "../src/js/sanitizer.js");
/* harmony import */ var _customControls__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./customControls */ "../src/js/customControls.js");











class FormRender {
  constructor(options) {
    if (options === void 0) {
      options = {};
    }
    const defaults = {
      layout: _layout__WEBPACK_IMPORTED_MODULE_4__["default"],
      layoutTemplates: {},
      controls: {},
      controlConfig: {},
      container: false,
      dataType: 'json',
      disableHTMLLabels: false,
      formData: [],
      i18n: Object.assign({}, _config__WEBPACK_IMPORTED_MODULE_7__.defaultI18n),
      messages: {
        formRendered: 'Form Rendered',
        noFormData: 'No form data.',
        other: 'Other',
        selectColor: 'Select Color',
        invalidControl: 'Invalid control'
      },
      onRender: () => {},
      render: true,
      sanitizerOptions: {
        clobberingProtection: {
          document: true,
          form: false,
          namespaceAttributes: true
        },
        backendOrder: ['dompurify', 'sanitizer', 'fallback']
      },
      templates: {},
      notify: {
        error: error => {
          console.log(error);
        },
        success: success => {
          console.log(success);
        },
        warning: warning => {
          console.warn(warning);
        }
      }
    };
    this.options = jQuery.extend(true, defaults, options);
    this.instanceContainers = [];
    (0,_sanitizer__WEBPACK_IMPORTED_MODULE_9__.setSanitizerConfig)(this.options.sanitizerOptions);
    if (!(mi18n__WEBPACK_IMPORTED_MODULE_0___default().current)) {
      mi18n__WEBPACK_IMPORTED_MODULE_0___default().init(this.options.i18n);
    }
    if (this.options.formData) {
      this.options.formData = this.parseFormData(this.options.formData);
    } else {
      this.options.formData = [];
    }
    _control__WEBPACK_IMPORTED_MODULE_5__["default"].controlConfig = options.controlConfig || {};
    _control__WEBPACK_IMPORTED_MODULE_5__["default"].loadCustom(options.controls);
    this.templatedControls = new _customControls__WEBPACK_IMPORTED_MODULE_10__["default"](this.options.templates);
    if (typeof Element.prototype.appendFormFields !== 'function') {
      Element.prototype.appendFormFields = function (fields) {
        if (!Array.isArray(fields)) {
          fields = [fields];
        }
        const renderedFormWrap = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].markup('div', fields, {
          className: 'rendered-form formbuilder-embedded-bootstrap'
        });
        this.appendChild(renderedFormWrap);
        fields.forEach(field => {
          const [rowGroup] = field.className.match(/row-([^\s]+)/) || [];
          if (rowGroup) {
            const rowID = this.id ? `${this.id}-row-${rowGroup}` : `row-${rowGroup}`;
            let rowGroupNode = document.getElementById(rowID);
            if (!rowGroupNode) {
              rowGroupNode = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].markup('div', null, {
                id: rowID,
                className: 'row'
              });
              renderedFormWrap.appendChild(rowGroupNode);
            }
            rowGroupNode.appendChild(field);
          } else {
            renderedFormWrap.appendChild(field);
          }
          field.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_3__["default"].fieldRendered);
        });
      };
    }
    if (typeof Element.prototype.emptyContainer !== 'function') {
      Element.prototype.emptyContainer = function () {
        const element = this;
        while (element.lastChild) {
          element.removeChild(element.lastChild);
        }
      };
    }
  }
  sanitizeField(field, instanceIndex) {
    let sanitizedField = Object.assign({}, field);
    if (instanceIndex) {
      sanitizedField.id = field.id && `${field.id}-${instanceIndex}`;
      sanitizedField.name = field.name && `${field.name}-${instanceIndex}`;
    }
    sanitizedField.className = Array.isArray(field.className) ? _utils__WEBPACK_IMPORTED_MODULE_1__["default"].unique(field.className.join(' ').split(' ')).join(' ') : field.className || field.class || null;
    delete sanitizedField.class;
    if (field.values) {
      sanitizedField.values = field.values.map(option => _utils__WEBPACK_IMPORTED_MODULE_1__["default"].trimObj(option));
    }
    sanitizedField = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].trimObj(sanitizedField);
    if (Array.isArray(field.userData) && field.userData.length === 0) {
      sanitizedField.userData = [];
    }
    return sanitizedField;
  }
  getElement(element) {
    element = this.options.container || element;
    if (element instanceof jQuery) {
      element = element[0];
    } else if (typeof element === 'string') {
      element = document.querySelector(element);
    }
    return element;
  }
  render(element, instanceIndex) {
    if (element === void 0) {
      element = null;
    }
    if (instanceIndex === void 0) {
      instanceIndex = 0;
    }
    const formRender = this;
    const opts = this.options;
    element = this.getElement(element);
    const runCallbacks = function () {
      if (opts.onRender) {
        opts.onRender();
      }
    };
    const rendered = [];
    const engine = new opts.layout(opts.layoutTemplates, false, opts.disableHTMLLabels, opts.controlConfig);
    if (opts.formData.length) {
      for (let i = 0; i < opts.formData.length; i++) {
        const fieldData = opts.formData[i];
        const sanitizedField = this.sanitizeField(fieldData, instanceIndex);
        const controlClass = this.templatedControls.getClass(fieldData.type) || _control__WEBPACK_IMPORTED_MODULE_5__["default"].getClass(fieldData.type, fieldData.subtype);
        const field = engine.build(controlClass, sanitizedField);
        rendered.push(field);
      }
    } else {
      opts.notify.warning(opts.messages.noFormData);
    }
    if (element) {
      this.instanceContainers[instanceIndex] = element;
    }
    if (opts.render && element) {
      element.emptyContainer();
      element.appendFormFields(rendered);
      runCallbacks();
      opts.notify.success(opts.messages.formRendered);
    } else {
      const exportMarkup = fields => fields.map(elem => elem.innerHTML).join('');
      formRender.markup = exportMarkup(rendered);
    }
    if (opts.disableInjectedStyle === true) {
      const styleTags = document.getElementsByClassName('formBuilder-injected-style');
      (0,_utils__WEBPACK_IMPORTED_MODULE_1__.forEach)(styleTags, i => (0,_dom__WEBPACK_IMPORTED_MODULE_2__.remove)(styleTags[i]));
    } else if (opts.disableInjectedStyle === 'bootstrap' && opts.render && element) {
      element.getElementsByClassName('formbuilder-embedded-bootstrap').item(0)?.classList.remove('formbuilder-embedded-bootstrap');
    }
    return formRender;
  }
  renderControl(element) {
    if (element === void 0) {
      element = null;
    }
    const opts = this.options;
    const fieldData = opts.formData;
    if (!fieldData || Array.isArray(fieldData)) {
      throw new Error('To render a single element, please specify a single object of formData for the field in question');
    }
    const sanitizedField = this.sanitizeField(fieldData);
    const engine = new opts.layout();
    const controlClass = this.templatedControls.getClass(fieldData.type) || _control__WEBPACK_IMPORTED_MODULE_5__["default"].getClass(fieldData.type, fieldData.subtype);
    const forceTemplate = opts.forceTemplate || 'hidden';
    const field = engine.build(controlClass, sanitizedField, forceTemplate);
    element.appendFormFields(field);
    opts.notify.success(opts.messages.formRendered);
    return this;
  }
  get userData() {
    const options = this.options;
    const definedFields = options.formData.slice();
    definedFields.filter(fieldData => fieldData.subtype === 'tinymce').forEach(fieldData => window.tinymce.get(fieldData.name).save());
    this.instanceContainers.forEach(container => {
      const userDataMap = $('select, input, textarea', container).serializeArray().reduce((acc, _ref) => {
        let {
          name,
          value
        } = _ref;
        name = name.replace('[]', '');
        if (acc[name]) {
          acc[name].push(value);
        } else {
          acc[name] = [value];
        }
        return acc;
      }, {});
      const definedFieldsLength = definedFields.length;
      for (let i = 0; i < definedFieldsLength; i++) {
        var _userDataMap$definedF;
        const definedField = definedFields[i];
        if (definedField.name === undefined) continue;
        if (definedField.disabled) continue;
        definedField.userData = (_userDataMap$definedF = userDataMap[definedField.name]) !== null && _userDataMap$definedF !== void 0 ? _userDataMap$definedF : [];
      }
    });
    return definedFields;
  }
  clear() {
    this.instanceContainers.forEach(container => {
      this.options.formData.slice().filter(fieldData => fieldData.subtype === 'tinymce').forEach(fieldData => window.tinymce.get(fieldData.name).setContent(''));
      container.querySelectorAll('input, select, textarea').forEach(input => {
        if (['checkbox', 'radio'].includes(input.type)) {
          input.checked = false;
        } else {
          input.value = '';
        }
      });
    });
  }
  parseFormData(formData) {
    const setData = {
      xml: formData => (0,_utils__WEBPACK_IMPORTED_MODULE_1__.parseXML)(formData),
      json: formData => window.JSON.parse(formData)
    };
    if (typeof formData !== 'object') {
      formData = setData[this.options.dataType](formData) || false;
    }
    return formData;
  }
}
;
(function ($) {
  let formRenderForms;
  const methods = {
    init: function (forms, options) {
      if (options === void 0) {
        options = {};
      }
      formRenderForms = forms;
      methods.instance = new FormRender(options);
      forms.each(index => methods.instance.render(forms[index], index));
      return methods.instance;
    },
    userData: () => methods.instance && methods.instance.userData,
    clear: () => methods.instance && methods.instance.clear(),
    setData: formData => {
      if (methods.instance) {
        const instance = methods.instance;
        instance.options.formData = instance.parseFormData(formData);
      }
    },
    render: function (formData, options) {
      if (options === void 0) {
        options = {};
      }
      if (methods.instance) {
        const instance = methods.instance;
        if (!formData) {
          formData = instance.options.formData;
        }
        instance.options = Object.assign({}, instance.options, options, {
          formData: instance.parseFormData(formData)
        });
        formRenderForms.each(index => methods.instance.render(formRenderForms[index], index));
      }
    },
    html: () => formRenderForms.map(index => formRenderForms[index]).html()
  };
  $.fn.formRender = function (methodOrOptions) {
    if (methodOrOptions === void 0) {
      methodOrOptions = {};
    }
    if (methods[methodOrOptions]) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return methods[methodOrOptions].apply(this, args);
    } else {
      const instance = methods.init(this, methodOrOptions);
      Object.assign(methods, instance);
      return instance;
    }
  };
  $.fn.controlRender = function (data, options) {
    if (options === void 0) {
      options = {};
    }
    options.formData = data;
    options.dataType = typeof data === 'string' ? 'json' : 'xml';
    const formRender = new FormRender(options);
    const $elems = this;
    $elems.each(i => formRender.renderControl($elems[i]));
    return $elems;
  };
})(jQuery);
}();
/******/ })()
;
})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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V0FBVyxLQUFLLFFBQVEsV0FBVyxXQUFXLFdBQVcsS0FBSyxLQUFLLFdBQVcsS0FBSyxLQUFLLFVBQVUsS0FBSyxRQUFRLFdBQVcsV0FBVyxXQUFXLEtBQUssS0FBSyxXQUFXLFdBQVcsV0FBVyxLQUFLLEtBQUssV0FBVyxVQUFVLEtBQUssS0FBSyxXQUFXLFdBQVcsS0FBSyxLQUFLLFdBQVcsS0FBSyxRQUFRLFdBQVcsS0FBSyxhQUFhLFdBQVcsV0FBVyxLQUFLLFFBQVEsVUFBVSxLQUFLLEtBQUssV0FBVyxXQUFXLFdBQVcsVUFBVSxXQUFXLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxVQUFVLFdBQVcsV0FBVyxXQUFXLFdBQVcsV0FBVyxLQUFLLEtBQUssV0FBVyxVQUFVLFdBQVcsV0FBVyxLQUFLLEtBQUssV0FBVyxVQUFVLFdBQVcsV0FBVyxLQUFLLEtBQUssV0FBVyxVQUFVLFdBQVcsV0FBVyxLQUFLLEtBQUssV0FBVyxLQUFLLFlBQVksV0FBVyxXQUFXLEtBQUssUUFBUSxXQUFXLE1BQU0sUUFBUSxVQUFVLFdBQVcsVUFBVSxXQUFXLE1BQU0sTUFBTSxXQUFXLFVBQVUsV0FBVyxNQUFNLE1BQU0sV0FBVyxVQUFVLFVBQVUsVUFBVSxXQUFXLE1BQU0sT0FBTyxVQUFVLFdBQVcsVUFBVSxNQUFNLE1BQU0sVUFBVSxNQUFNLE1BQU0sVUFBVSxVQUFVLFVBQVUsV0FBVyxVQUFVLFdBQVcsV0FBVyxNQUFNLE1BQU0sVUFBVSxXQUFXLE1BQU0sTUFBTSxXQUFXLFdBQVcsTUFBTSxPQUFPLFdBQVcsTUFBTSxNQUFNLFVBQVUsTUFBTSxNQUFNLFVBQVUsTUFBTSxPQUFPLFVBQVUsTUFBTSxTQUFTLFdBQVcsTUFBTSxPQUFPLFdBQVcsV0FBVyxXQUFXLFVBQVUsTUFBTSxPQUFPLFVBQVUsTUFBTSxPQUFPLFVBQVUsTUFBTSxNQUFNLFlBQVksV0FBVyxXQUFXLFVBQVUsV0FBVyxXQUFXLFdBQVcsVUFBVSxXQUFXLFdBQVcsTUFBTSxNQUFNLFVBQVUsVUFBVSxVQUFVLFVBQVUsV0FBVyxNQUFNLE1BQU0s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RCxDQUFDLE1BQU07TUFDTCxNQUFNNk0sUUFBUSxHQUFHc1YsT0FBTyxDQUFDL1QsSUFBSSxDQUFDLElBQUksRUFBRWlVLGVBQWUsQ0FBQztNQUNwRHhqQixNQUFNLENBQUNpRyxNQUFNLENBQUNxZCxPQUFPLEVBQUV0VixRQUFRLENBQUM7TUFDaEMsT0FBT0EsUUFBUTtJQUNqQjtFQUNGLENBQUM7RUFRRHpHLENBQUMsQ0FBQ3lZLEVBQUUsQ0FBQzBELGFBQWEsR0FBRyxVQUFVeGhCLElBQUksRUFBRW1FLE9BQU8sRUFBTztJQUFBLElBQWRBLE9BQU87TUFBUEEsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUFBO0lBQy9DQSxPQUFPLENBQUNxVixRQUFRLEdBQUd4WixJQUFJO0lBQ3ZCbUUsT0FBTyxDQUFDck4sUUFBUSxHQUFHLE9BQU9rSixJQUFJLEtBQUssUUFBUSxHQUFHLE1BQU0sR0FBRyxLQUFLO0lBQzVELE1BQU1rZ0IsVUFBVSxHQUFHLElBQUkxQixVQUFVLENBQUNyYSxPQUFPLENBQUM7SUFDMUMsTUFBTXNkLE1BQU0sR0FBRyxJQUFJO0lBQ25CQSxNQUFNLENBQUNoYyxJQUFJLENBQUNYLENBQUMsSUFBSW9iLFVBQVUsQ0FBQzFPLGFBQWEsQ0FBQ2lRLE1BQU0sQ0FBQzNjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsT0FBTzJjLE1BQU07RUFDZixDQUFDO0FBQ0gsQ0FBQyxFQUFFMWxCLE1BQU0sQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi9zcmMvanMvY29uZmlnLmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvY29udHJvbC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2pzL2NvbnRyb2wvYXV0b2NvbXBsZXRlLmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvY29udHJvbC9idXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9qcy9jb250cm9sL2N1c3RvbS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2pzL2NvbnRyb2wvaGlkZGVuLmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvY29udHJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2pzL2NvbnRyb2wvcGFyYWdyYXBoLmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvY29udHJvbC9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9qcy9jb250cm9sL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9qcy9jb250cm9sL3RleHRhcmVhLmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvY29udHJvbC90ZXh0YXJlYS5xdWlsbC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2pzL2NvbnRyb2wvdGV4dGFyZWEudGlueW1jZS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2pzL2N1c3RvbUNvbnRyb2xzLmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvZG9tLmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvbGF5b3V0LmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvc2FuaXRpemVyLmpzIiwid2VicGFjazovLy8uLi9zcmMvanMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zYXNzL2Zvcm0tcmVuZGVyLnNjc3MiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbWkxOG4vZGlzdC9taTE4bi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zYXNzL2Zvcm0tcmVuZGVyLnNjc3M/YmYyNSIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovLy8uLi9zcmMvanMvZm9ybS1yZW5kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1pMThuIGZyb20gJ21pMThuJ1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3Qgbm9vcCA9ICgpID0+IG51bGxcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5taTE4bi5hZGRMYW5ndWFnZSgnZW4tVVMnLCBGQl9FTl9VUylcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBhY3Rpb25CdXR0b25zOiBbXSwgLy8gYWRkaXRpb25hbCBmb3JtIGFjdGlvbiBidXR0b25zLSBzYXZlLCBkYXRhLCBjbGVhclxuICBhbGxvd1N0YWdlU29ydDogdHJ1ZSxcbiAgYXBwZW5kOiBmYWxzZSwgLy8gYXBwZW5kIG5vbi1lZGl0YWJsZSBjb250ZW50IHRvIHRoZSBmb3JtLlxuICBjb250cm9sT3JkZXI6IFtcbiAgICAnYXV0b2NvbXBsZXRlJyxcbiAgICAnYnV0dG9uJyxcbiAgICAnY2hlY2tib3gtZ3JvdXAnLFxuICAgICdjaGVja2JveCcsXG4gICAgJ2RhdGUnLFxuICAgICdmaWxlJyxcbiAgICAnaGVhZGVyJyxcbiAgICAnaGlkZGVuJyxcbiAgICAnbnVtYmVyJyxcbiAgICAncGFyYWdyYXBoJyxcbiAgICAncmFkaW8tZ3JvdXAnLFxuICAgICdzZWxlY3QnLFxuICAgICd0ZXh0JyxcbiAgICAndGV4dGFyZWEnXG4gIF0sXG4gIGNvbnRyb2xQb3NpdGlvbjogJ3JpZ2h0JyxcbiAgZGF0YVR5cGU6ICdqc29uJyxcbiAgZGVmYXVsdEZpZWxkczogW10sXG4gIGRpc2FibGVkQWN0aW9uQnV0dG9uczogW10sIC8vIHNhdmUsIGRhdGEsIGNsZWFyXG4gIGRpc2FibGVkQXR0cnM6IFtdLFxuICBkaXNhYmxlZEZpZWxkQnV0dG9uczoge30sXG4gIGRpc2FibGVkU3VidHlwZXM6IHt9LCAvLyBzdWJ0eXBlcyB5b3Ugd2FudCBkaXNhYmxlZFxuICBkaXNhYmxlRmllbGRzOiBbXSwgLy8gQXJyYXkgb2YgZmllbGRzIHRvIGRpc2FibGVcbiAgZGlzYWJsZUhUTUxMYWJlbHM6IGZhbHNlLCAvLyBkaXNhYmxlcyBodG1sIGluIGZpZWxkIGxhYmVsc1xuICBkaXNhYmxlSW5qZWN0ZWRTdHlsZTogZmFsc2UsIC8vIHJlbW92ZXMgdGhlIGluamVjdGVkIHN0eWxlXG4gIGVkaXRPbkFkZDogZmFsc2UsIC8vIG9wZW5zIHRoZSBlZGl0IHBhbmVsIG9uIGFkZGVkIGZpZWxkXG4gIGZpZWxkczogW10sIC8vIGFkZCBjdXN0b20gY29udHJvbCBjb25maWdzXG4gIGZpZWxkUmVtb3ZlV2FybjogZmFsc2UsXG4gIGZpZWxkRWRpdENvbnRhaW5lcjogbnVsbCwgLy8gRE9NIG5vZGUgb3Igc2VsZWN0b3JcbiAgaW5wdXRTZXRzOiBbXSwgLy8gYWRkIGdyb3VwcyBvZiBmaWVsZHMgYXQgYSB0aW1lXG4gIG5vdGlmeToge1xuICAgIGVycm9yOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICB9LFxuICAgIHN1Y2Nlc3M6ICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBzdWNjZXNzID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHN1Y2Nlc3MpXG4gICAgfSxcbiAgICB3YXJuaW5nOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB3YXJuaW5nID0+IHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKVxuICAgIH0sXG4gIH0sXG4gIG9uQWRkRmllbGQ6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIChmaWVsZElkLCBmaWVsZERhdGEpID0+IGZpZWxkRGF0YSxcbiAgb25BZGRGaWVsZEFmdGVyOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoZmllbGRJZCwgZmllbGREYXRhKSA9PiBmaWVsZERhdGEsXG4gIG9uQWRkT3B0aW9uOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBvYmogPT4gb2JqLFxuICBvbkNsZWFyQWxsOiBub29wLFxuICBvbkNsb3NlRmllbGRFZGl0OiBub29wLFxuICBvbk9wZW5GaWVsZEVkaXQ6IG5vb3AsXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZ0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmb3JtRGF0YVxuICAgKi9cbiAgb25TYXZlOiBub29wLFxuICBwZXJzaXN0RGVmYXVsdEZpZWxkczogZmFsc2UsXG4gIHByZXBlbmQ6IGZhbHNlLFxuICByZXBsYWNlRmllbGRzOiBbXSxcbiAgcm9sZXM6IHtcbiAgICAnYWRtJzogJ0FkbWluaXN0cmF0b3InLFxuICAgICdtYW4nOiAnTWFuYWdlcicsXG5cbiAgfSxcbiAgc2FuaXRpemVyT3B0aW9uczoge1xuICAgIGNsb2JiZXJpbmdQcm90ZWN0aW9uOiB7XG4gICAgICBkb2N1bWVudDogZmFsc2UsXG4gICAgICBmb3JtOiBmYWxzZSxcbiAgICB9LFxuICAgIGJhY2tlbmRPcmRlcjogW10sIC8vJ2RvbXB1cmlmeScsJ3Nhbml0aXplcicsJ2ZhbGxiYWNrJ1xuICB9LFxuICBzY3JvbGxUb0ZpZWxkT25BZGQ6IHRydWUsXG4gIHNob3dBY3Rpb25CdXR0b25zOiB0cnVlLFxuICBzb3J0YWJsZUNvbnRyb2xzOiBmYWxzZSxcbiAgc3RpY2t5Q29udHJvbHM6IHtcbiAgICBlbmFibGU6IHRydWUsXG4gICAgb2Zmc2V0OiB7XG4gICAgICB0b3A6IDUsXG4gICAgICBib3R0b206ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAnYXV0bycsXG4gICAgfSxcbiAgfSxcbiAgc3VidHlwZXM6IHt9LFxuICB0ZW1wbGF0ZXM6IHt9LFxuICB0eXBlVXNlckF0dHJzOiB7fSxcbiAgdHlwZVVzZXJEaXNhYmxlZEF0dHJzOiB7fSxcbiAgdHlwZVVzZXJFdmVudHM6IHt9LFxuICBkZWZhdWx0R3JpZENvbHVtbkNsYXNzOiAnY29sLW1kLTEyJyxcbiAgY2FuY2VsR3JpZE1vZGVEaXN0YW5jZTogMTAwLFxuICBlbmFibGVDb2x1bW5JbnNlcnRNZW51OiBmYWxzZSxcbiAgZW5hYmxlRW5oYW5jZWRCb290c3RyYXBHcmlkOiBmYWxzZSxcbn1cblxuZXhwb3J0IGNvbnN0IHN0eWxlcyA9IHtcbiAgYnRuOiBbJ2RlZmF1bHQnLCAnZGFuZ2VyJywgJ2luZm8nLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSxcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRJMThuID0ge1xuICBsb2NhdGlvbjogJ2Fzc2V0cy9sYW5nLycsXG59XG5cbmV4cG9ydCBjb25zdCBpbnN0YW5jZUNvbmZpZyA9IHt9XG5cbmV4cG9ydCBjb25zdCBncmlkQ2xhc3NOYW1lcyA9IHtcbiAgcm93V3JhcHBlckNsYXNzOiAncm93V3JhcHBlcicsXG4gIGNvbFdyYXBwZXJDbGFzczogJ2NvbFdyYXBwZXInLFxuICB0bXBSb3dQbGFjZWhvbGRlckNsYXNzOiAndGVtcFJvd1dyYXBwZXInLFxuICBpbnZpc2libGVSb3dQbGFjZWhvbGRlckNsYXNzOiAnaW52aXNpYmxlUm93UGxhY2Vob2xkZXInLFxufVxuXG5leHBvcnQgY29uc3QgZGVmYXVsdFRpbWVvdXQgPSAzMzNcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRGaWVsZFNlbGVjdG9yID0gJ2xpLmZvcm0tZmllbGQnXG4iLCIvLyBDT05UUk9MLkpTXG5pbXBvcnQgeyBjYW1lbENhc2UsIHBhcnNlZEh0bWwsIG1hcmt1cCwgZ2V0U3R5bGVzLCBnZXRTY3JpcHRzLCBpc0NhY2hlZCB9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgbWkxOG4gZnJvbSAnbWkxOG4nXG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGNvbnRyb2wgY2xhc3Nlc1xuICogRGVmaW5lcyB0aGUgc3RydWN0dXJlIG9mIGEgY29udHJvbCBjbGFzcyBhbmQgc29tZSBzdGFuZGFyZCBjb250cm9sIG1ldGhvZHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgY29udHJvbCB7XG4gIC8qKlxuICAgKiBpbml0aWFsaXNlIHRoZSBjb250cm9sIG9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIGVhY2ggY29udHJvbCBjbGFzcyByZWNlaXZlcyBhIGNvbnRyb2wgY29uZmlndXJhdGlvblxuICAgKiBvYmplY3QgKHtuYW1lLCBsYWJlbCwgZXRjfSlcbiAgICogQHBhcmFtIHtCb29sZWFufSBwcmV2aWV3IGlzUHJldmlld1xuICAgKi9cbiAgY29uc3RydWN0b3IoY29uZmlnLCBwcmV2aWV3KSB7XG4gICAgdGhpcy5yYXdDb25maWcgPSBqUXVlcnkuZXh0ZW5kKHt9LCBjb25maWcpXG5cbiAgICAvLyBtYWtlIGEgY29weSBvZiBjb25maWcgc28gd2UgZG9uJ3QgY2hhbmdlIHRoZSBvYmplY3QgcmVmZXJlbmNlXG4gICAgY29uZmlnID0galF1ZXJ5LmV4dGVuZCh7fSwgY29uZmlnKVxuICAgIHRoaXMucHJldmlldyA9IHByZXZpZXdcbiAgICBkZWxldGUgY29uZmlnLmlzUHJldmlld1xuICAgIGlmICh0aGlzLnByZXZpZXcpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcucmVxdWlyZWRcbiAgICB9XG5cbiAgICAvLyBwcm9jZXNzIGNvbmZpZyAtIGV4dHJhY3Qgc3RhbmRhcmQgcHJvcGVydGllc1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBbJ2xhYmVsJywgJ2Rlc2NyaXB0aW9uJywgJ3N1YnR5cGUnLCAncmVxdWlyZWQnLCAnZGlzYWJsZWQnXVxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzW3Byb3BdID0gY29uZmlnW3Byb3BdXG4gICAgICBkZWxldGUgY29uZmlnW3Byb3BdXG4gICAgfVxuXG4gICAgLy8gZGVmYXVsdCBmaWVsZHNcbiAgICBpZiAoIWNvbmZpZy5pZCkge1xuICAgICAgaWYgKGNvbmZpZy5uYW1lKSB7XG4gICAgICAgIGNvbmZpZy5pZCA9IGNvbmZpZy5uYW1lXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuaWQgPSAnY29udHJvbC0nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAgKyAxKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmlkID0gY29uZmlnLmlkXG4gICAgdGhpcy50eXBlID0gY29uZmlnLnR5cGVcbiAgICBpZiAodGhpcy5kZXNjcmlwdGlvbikge1xuICAgICAgY29uZmlnLnRpdGxlID0gdGhpcy5kZXNjcmlwdGlvblxuICAgIH1cblxuICAgIC8vIGNoZWNrIGZvciBnbG9iYWwgY2xhc3MgY29uZmlndXJhdGlvblxuICAgIGlmICghY29udHJvbC5jb250cm9sQ29uZmlnKSB7XG4gICAgICBjb250cm9sLmNvbnRyb2xDb25maWcgPSB7fVxuICAgIH1cbiAgICBjb25zdCBjbGFzc0lkID0gdGhpcy5zdWJ0eXBlID8gdGhpcy50eXBlICsgJy4nICsgdGhpcy5zdWJ0eXBlIDogdGhpcy50eXBlXG4gICAgdGhpcy5jbGFzc0NvbmZpZyA9IGpRdWVyeS5leHRlbmQoe30sIGNvbnRyb2wuY29udHJvbENvbmZpZ1t0aGlzLnR5cGVdIHx8IHt9LCBjb250cm9sLmNvbnRyb2xDb25maWdbY2xhc3NJZF0gfHwge30pXG5cbiAgICAvLyBpZiBzdWJ0eXBlLCB1cGRhdGUgdGhlIGNvbmZpZyB0eXBlIGZvciBpbmplY3RpbmcgaW50byBET00gZWxlbWVudHNcbiAgICBpZiAodGhpcy5zdWJ0eXBlKSB7XG4gICAgICBjb25maWcudHlwZSA9IHRoaXMuc3VidHlwZVxuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcXVpcmVkKSB7XG4gICAgICBjb25maWdbJ3JlcXVpcmVkJ10gPSAncmVxdWlyZWQnXG4gICAgICBjb25maWdbJ2FyaWEtcmVxdWlyZWQnXSA9ICd0cnVlJ1xuICAgIH1cblxuICAgIC8vIEFsbG93IHNldHRpbmcgZGlzYWJsZWQgZmxhZ1xuICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICBjb25maWdbJ2Rpc2FibGVkJ10gPSAnZGlzYWJsZWQnXG4gICAgfVxuICAgIHRoaXMuY29uZmlnID0gY29uZmlnXG4gICAgdGhpcy5jb25maWd1cmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciB0byByZXRyaWV2ZSBjbGFzcyBjb25maWd1cmF0aW9uLlxuICAgKiBTdXBwb3J0cyBwcm9wZXJ0aWVzOlxuICAgKiAgLSBtaTE4biAtIGEgbWkxOG4gbG9va3VwLCAob3Igb2JqZWN0IG9mIHR5cGU6IGxvb2t1cCBmb3IgY2xhc3NlcyBzdXBwb3J0aW5nIG11bHRpcGxlIHR5cGVzKVxuICAgKiAgLSBpMThuIC0gZm9yIGN1c3RvbSAvIHBsdWdpbiBjb250cm9scywgdHJhbnNsYXRpb25zIGZvciBsYWJlbHMgY2FuIGJlIHNwZWNpZmllZCBoZXJlIGFzIGFuIG9iamVjdCBvZiBsb2NhbGU6IGxhYmVsIChvciBhbiBvYmplY3Qgb2YgdHlwZTogbGFiZWwgZm9yIGNsYXNzZXMgc3VwcG9ydGluZyBtdWx0aXBsZSB0eXBlcykuXG4gICAqICAtIGljb24gLSBpY29uLCBvciBvYmplY3Qgb2YgdHlwZTogaWNvbiBmb3IgZGVmaW5lZCB0eXBlc1xuICAgKiAgLSBpbmFjdGl2ZSAtIGFycmF5IG9mIGluYWN0aXZlIHR5cGVzIHRoYXQgc2hvdWxkbid0IGFwcGVhciBpbiBmb3JtQnVpbGRlciBpbnRlcmZhY2UgKGJ1dCBzdGlsbCBiZSBzdXBwb3J0ZWQgZm9yIHJlbmRlcmluZyBwdXJwb3NlcylcbiAgICogQHJldHVybiB7T2JqZWN0fSBjb25maWd1cmF0aW9uXG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmluaXRpb24oKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cblxuICAvKipcbiAgICogQ2xhc3MgbWV0aG9kIHRvIHJlZ2lzdGVyIHN1cHBvcnRlZCBjb250cm9scyBhbmQgdGhlaXIgYXNzb2NpYXRlZCBjbGFzc2VzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHR5cGVzIC0gY29udHJvbCB0eXBlIChvciBhcnJheSBvZiBjb250cm9sIHR5cGVzKSB0byByZWdpc3RlclxuICAgKiBhZ2FpbnN0IHRoZSBzcGVjaWZlZCBjbGFzc1xuICAgKiBAcGFyYW0ge0NsYXNzfSBjb250cm9sQ2xhc3MgLSBjbGFzcyB0byBtYXAgYWdhaW5zdCB0aGUgdHlwZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmVudFR5cGUgLSBvcHRpb25hbCAtIGlmIGRlZmluZWQsIGFueSBjbGFzc2VzIHJlZ2lzdGVyZWRcbiAgICogd2lsbCBiZSByZWdpc3RlcmVkIGFzIHN1YnR5cGVzIG9mIHRoaXMgcGFyZW50XG4gICAqL1xuICBzdGF0aWMgcmVnaXN0ZXIodHlwZXMsIGNvbnRyb2xDbGFzcywgcGFyZW50VHlwZSkge1xuXG4gICAgLy8gc3RvcmUgc3VidHlwZXMgYXMgPHR5cGU+LjxzdWJ0eXBlPiBpbiB0aGUgcmVnaXN0ZXJcbiAgICBjb25zdCBwcmVmaXggPSBwYXJlbnRUeXBlID8gcGFyZW50VHlwZSArICcuJyA6ICcnXG5cbiAgICAvLyBpbml0aWFsaXNlIHRoZSByZWdpc3RlclxuICAgIGlmICghY29udHJvbC5jbGFzc1JlZ2lzdGVyKSB7XG4gICAgICBjb250cm9sLmNsYXNzUmVnaXN0ZXIgPSB7fVxuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZXMpKSB7XG4gICAgICB0eXBlcyA9IFt0eXBlc11cbiAgICB9XG5cbiAgICAvLyBhc3NvY2lhdGUgdGhlIGNvbnRyb2xDbGFzcyB3aXRoIGVhY2ggcGFzc2VkIGNvbnRyb2wgdHlwZVxuICAgIGZvciAoY29uc3QgdHlwZSBvZiB0eXBlcykge1xuICAgICAgLy8gJy4nIGlzIGEgcmVzdHJpY3RlZCBjaGFyYWN0ZXIgZm9yIHR5cGUgbmFtZXNcbiAgICAgIGlmICh0eXBlLmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgICAgY29udHJvbC5lcnJvcihgSWdub3JpbmcgdHlwZSAke3R5cGV9LiBDYW5ub3QgdXNlIHRoZSBjaGFyYWN0ZXIgJy4nIGluIGEgdHlwZSBuYW1lLmApXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvbnRyb2wuY2xhc3NSZWdpc3RlcltwcmVmaXggKyB0eXBlXSA9IGNvbnRyb2xDbGFzc1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb29rcyB1cCB0aGUgY2xhc3NSZWdpc3RlciAmIHJldHVybnMgcmVnaXN0ZXJlZCB0eXBlcyBvciBzdWJ0eXBlc1xuICAgKiBAcGFyYW0gIHtzdHJpbmd8ZmFsc2V9IHR5cGUgb3B0aW9uYWwgdHlwZSBvZiBjb250cm9sIHdlIHdhbnQgdG8gbG9vayB1cFxuICAgKiBzdWJ0eXBlcyBvZi4gSWYgbm90IHNwZWNpZmllZCB3aWxsIHJldHVybiBhbGwgdHlwZXNcbiAgICogQHJldHVybiB7QXJyYXl9IHJlZ2lzdGVyZWQgdHlwZXMgKG9yIHN1YnR5cGVzKVxuICAgKi9cbiAgc3RhdGljIGdldFJlZ2lzdGVyZWQodHlwZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgdHlwZXMgPSBPYmplY3Qua2V5cyhjb250cm9sLmNsYXNzUmVnaXN0ZXIpXG4gICAgaWYgKCF0eXBlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0eXBlc1xuICAgIH1cbiAgICByZXR1cm4gdHlwZXMuZmlsdGVyKGtleSA9PiB7XG4gICAgICAvLyBpZiB0eXBlIGlzIHNwZWNpZmllZCwgdGhlbiB3ZSB3YW50IHRvIHJldHVybiBhbGwgc3VidHlwZXNcbiAgICAgIC8vIG9mIHRoYXQgdHlwZSAocmVnaXN0ZXJlZCB3aXRoIHRoZSBrZXkgPHR5cGU+LjxzdWJ0eXBlPilcbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIHJldHVybiBrZXkuaW5kZXhPZih0eXBlICsgJy4nKSA+IC0xXG4gICAgICB9XG4gICAgICByZXR1cm4ga2V5LmluZGV4T2YoJy4nKSA9PT0gLTFcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhbiBvYmplY3Qgb2YgdHlwZXMgbWFwcGVkIHRvIGFuIGFycmF5IG9mIHN1YnR5cGVzLlxuICAgKiBPbmx5IHJldHVybnMgdHlwZXMgdGhhdCBoYXZlIHN1YnR5cGVzXG4gICAqIEByZXR1cm4ge09iamVjdH0gYW4gb2JqZWN0IGNvbnRhaW5pbmcge3R5cGU6IGFycmF5IG9mIHN1YnR5cGVzfS5cbiAgICovXG4gIHN0YXRpYyBnZXRSZWdpc3RlcmVkU3VidHlwZXMoKSB7XG4gICAgY29uc3QgdHlwZXMgPSB7fVxuICAgIGZvciAoY29uc3Qga2V5IGluIGNvbnRyb2wuY2xhc3NSZWdpc3Rlcikge1xuICAgICAgaWYgKGNvbnRyb2wuY2xhc3NSZWdpc3Rlci5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvbnN0IFt0eXBlLCBzdWJ0eXBlXSA9IGtleS5zcGxpdCgnLicpXG4gICAgICAgIGlmICghc3VidHlwZSkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0eXBlc1t0eXBlXSkge1xuICAgICAgICAgIHR5cGVzW3R5cGVdID0gW11cbiAgICAgICAgfVxuICAgICAgICB0eXBlc1t0eXBlXS5wdXNoKHN1YnR5cGUpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0eXBlc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBjbGFzcyBmb3IgYSBzcGVjaWZpZWQgY29udHJvbCB0eXBlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIHR5cGUgb2YgY29udHJvbCB3ZSBhcmUgbG9va2luZyB1cFxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3N1YnR5cGVdIGlmIHNwZWNpZmllZCB3ZSdsbCB0cnkgdG8gZmluZFxuICAgKiBhIGNsYXNzIG1hcHBlZCB0byB0aGlzIHN1YnR5cGUuIElmIG5vbmUgZm91bmQsIGZhbGwgYmFjayB0byB0aGUgdHlwZS5cbiAgICogQHJldHVybiB7Q2xhc3N9IGNvbnRyb2wgc3ViY2xhc3MgYXMgZGVmaW5lZCBpbiB0aGUgY2FsbCB0byByZWdpc3RlclxuICAgKi9cbiAgc3RhdGljIGdldENsYXNzKHR5cGUsIHN1YnR5cGUpIHtcbiAgICBjb25zdCBsb29rdXAgPSBzdWJ0eXBlID8gdHlwZSArICcuJyArIHN1YnR5cGUgOiB0eXBlXG4gICAgY29uc3QgY29udHJvbENsYXNzID0gY29udHJvbC5jbGFzc1JlZ2lzdGVyW2xvb2t1cF0gfHwgY29udHJvbC5jbGFzc1JlZ2lzdGVyW3R5cGVdXG4gICAgaWYgKCFjb250cm9sQ2xhc3MpIHtcbiAgICAgIHJldHVybiBjb250cm9sLmVycm9yKFxuICAgICAgICAnSW52YWxpZCBjb250cm9sIHR5cGUuIChUeXBlOiAnICtcbiAgICAgICAgICB0eXBlICtcbiAgICAgICAgICAnLCBTdWJ0eXBlOiAnICtcbiAgICAgICAgICBzdWJ0eXBlICtcbiAgICAgICAgICAnKS4gUGxlYXNlIGVuc3VyZSB5b3UgaGF2ZSByZWdpc3RlcmVkIGl0LCBhbmQgaW1wb3J0ZWQgaXQgY29ycmVjdGx5LicsXG4gICAgICApXG4gICAgfVxuXG4gICAgLy8gc2V0IHRoZSBfdHlwZSBmaWVsZCBvbiB0aGUgY29udHJvbCBjbGFzcyBzbyB3ZSBuZXZlciBsb3NlIGl0XG4gICAgcmV0dXJuIGNvbnRyb2xDbGFzc1xuICB9XG5cbiAgLyoqXG4gICAqIHN1cHBvcnQgZHluYW1pYyBsb2FkaW5nIG9mIGN1c3RvbSBjb250cm9sIGNsYXNzZXNcbiAgICogQHBhcmFtIHtBcnJheX0gY29udHJvbHNcbiAgICovXG4gIHN0YXRpYyBsb2FkQ3VzdG9tKGNvbnRyb2xzKSB7XG4gICAgbGV0IGNvbnRyb2xDbGFzc2VzID0gW11cbiAgICBpZiAoY29udHJvbHMpIHtcbiAgICAgIGNvbnRyb2xDbGFzc2VzID0gY29udHJvbENsYXNzZXMuY29uY2F0KGNvbnRyb2xzKVxuICAgIH1cblxuICAgIC8vIHN1cHBvcnQgZm9yIHVzZXIgbG9hZGVkIHBsdWdpbiBjb250cm9sc1xuICAgIGlmICh3aW5kb3cuZmJDb250cm9scykge1xuICAgICAgY29udHJvbENsYXNzZXMgPSBjb250cm9sQ2xhc3Nlcy5jb25jYXQod2luZG93LmZiQ29udHJvbHMpXG4gICAgfVxuXG4gICAgLy8gbG9vcCB0aHJvdWdoIGVhY2ggZGVmaW5lZCBjdXN0b20gY29udHJvbC5cbiAgICAvLyBleHBlY3RzIGEgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyB0aGUgbWFzdGVyIGNvbnRyb2wgY2xhc3MgdG8gaW5oZXJpdCBmcm9tIChvciBvcHRpb25hbCBjbGFzc1JlZ2lzdGVyIHRvIGluaGVyaXQgZnJvbSBzdWJjbGFzcylcbiAgICAvLyBzZWUgc3JjL2pzL2NvbnRyb2xfcGx1Z2lucy8gZm9yIGFuIGV4YW1wbGVcbiAgICBpZiAoIXRoaXMuZmJDb250cm9sc0xvYWRlZCkge1xuICAgICAgZm9yIChjb25zdCBsb2FkQ29udHJvbCBvZiBjb250cm9sQ2xhc3Nlcykge1xuICAgICAgICBsb2FkQ29udHJvbChjb250cm9sLCBjb250cm9sLmNsYXNzUmVnaXN0ZXIpXG4gICAgICB9XG4gICAgICB0aGlzLmZiQ29udHJvbHNMb2FkZWQgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGEgdHJhbnNsYXRlZCBzdHJpbmdcbiAgICogQnkgZGVmYXVsdCBsb29rcyBmb3IgdHJhbnNsYXRpb25zIGRlZmluZWQgYWdhaW5zdCB0aGUgY2xhc3MgKGZvciBwbHVnaW4gY29udHJvbHMpXG4gICAqIEV4cGVjdHMge2xvY2FsZTE6IHt0eXBlOiBsYWJlbH0sIGxvY2FsZTI6IHt0eXBlOiBsYWJlbH19LCBvciB7ZGVmYXVsdDogbGFiZWx9LCBvciB7bG9jYWwxOiBsYWJlbCwgbG9jYWwyOiBsYWJlbDJ9XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBsb29rdXAgc3RyaW5nIHRvIHJldHJpZXZlIHRoZSBsYWJlbCAvIHRyYW5zbGF0ZWQgc3RyaW5nIGZvclxuICAgKiBAcGFyYW0ge09iamVjdHxOdW1iZXJ8U3RyaW5nfSBbYXJnc10gLSBzdHJpbmcgb3Iga2V5L3ZhbCBwYWlycyBmb3Igc3RyaW5nIGxvb2t1cHMgd2l0aCB2YXJpYWJsZXNcbiAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgdHJhbnNsYXRlZCBsYWJlbFxuICAgKi9cbiAgc3RhdGljIG1pMThuKGxvb2t1cCwgYXJncykge1xuICAgIGNvbnN0IGRlZiA9IHRoaXMuZGVmaW5pdGlvblxuICAgIGxldCBpMThuID0gZGVmLmkxOG4gfHwge31cbiAgICBjb25zdCBsb2NhbGUgPSBtaTE4bi5sb2NhbGVcbiAgICBpMThuID0gaTE4bltsb2NhbGVdIHx8IGkxOG4uZGVmYXVsdCB8fCBpMThuXG4gICAgY29uc3QgbG9va3VwQ2FtZWwgPSB0aGlzLmNhbWVsQ2FzZShsb29rdXApXG5cbiAgICAvLyBpZiB0cmFuc2xhdGlvbiBpcyBkZWZpbmVkIGluIHRoZSBjb250cm9sLCByZXR1cm4gaXRcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiBpMThuID09ICdvYmplY3QnID8gaTE4bltsb29rdXBDYW1lbF0gfHwgaTE4bltsb29rdXBdIDogaTE4blxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgLy8gb3RoZXJ3aXNlIGNoZWNrIHRoZSBtaTE4biBvYmplY3QgLSBhbGxvdyBmb3IgbWFwcGluZyBhIGxvb2t1cCB0byBhIGN1c3RvbSBtaTE4biBsb29rdXBcbiAgICBsZXQgbWFwcGVkID0gZGVmLm1pMThuXG4gICAgaWYgKHR5cGVvZiBtYXBwZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXBwZWQgPSBtYXBwZWRbbG9va3VwQ2FtZWxdIHx8IG1hcHBlZFtsb29rdXBdXG4gICAgfVxuICAgIGlmICghbWFwcGVkKSB7XG4gICAgICBtYXBwZWQgPSBsb29rdXBDYW1lbFxuICAgIH1cbiAgICByZXR1cm4gbWkxOG4uZ2V0KG1hcHBlZCwgYXJncylcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG91bGQgdGhpcyBjb250cm9sIHR5cGUgYXBwZWFyIGluIHRoZSBsaXN0IG9mIGZvcm0gY29udHJvbHNcbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gaXNBY3RpdmVcbiAgICovXG4gIHN0YXRpYyBhY3RpdmUodHlwZSkge1xuICAgIHJldHVybiAhQXJyYXkuaXNBcnJheSh0aGlzLmRlZmluaXRpb24uaW5hY3RpdmUpIHx8IHRoaXMuZGVmaW5pdGlvbi5pbmFjdGl2ZS5pbmRleE9mKHR5cGUpID09PSAtMVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIGNvbnRyb2wgbGFiZWwgZm9yIGEgY29udHJvbCB0eXBlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gdHJhbnNsYXRlZCBjb250cm9sXG4gICAqL1xuICBzdGF0aWMgbGFiZWwodHlwZSkge1xuICAgIHJldHVybiB0aGlzLm1pMThuKHR5cGUpXG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGljb24gZm9yIGEgY29udHJvbCB0eXBlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gaWNvblxuICAgKi9cbiAgc3RhdGljIGljb24odHlwZSkge1xuICAgIC8vIEB0b2RvIC0gc3VwcG9ydCBmb3IgYCR7Y3NzX3ByZWZpeF90ZXh0fSR7YXR0ci5uYW1lfWAgLSBpcyB0aGlzIGZvciBpbnB1dFNldHM/IERvZXNudCBsb29rIGxpa2UgaXQgYnV0IGNhbid0IHNlZSBhbnl0aGluZyBlbHNlIHRoYXQgc2V0cyBhdHRyLm5hbWU/XG4gICAgLy8gaHR0cHM6Ly9mb3JtYnVpbGRlci5vbmxpbmUvZG9jcy9mb3JtQnVpbGRlci9vcHRpb25zL2lucHV0U2V0cy9cbiAgICBjb25zdCBkZWYgPSB0aGlzLmRlZmluaXRpb25cbiAgICBpZiAoZGVmICYmIHR5cGVvZiBkZWYuaWNvbiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBkZWYuaWNvblt0eXBlXVxuICAgIH1cbiAgICByZXR1cm4gZGVmLmljb25cbiAgfVxuXG4gIC8qKlxuICAgKiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQgYnkgdGhlIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgb3ZlcndyaXR0ZW4gZm9yIGNvbnRyb2xzIHRoYXQgbmVlZCB0b1xuICAgKiBwcm9jZXNzIHRoZSBjb25maWd1cmF0aW9uIGFyZ3VtZW50cyBwcmlvciB0byByZW5kZXJpbmdcbiAgICovXG4gIGNvbmZpZ3VyZSgpIHt9XG5cbiAgLyoqXG4gICAqIHRoaXMgaXMgdGhlIGNvcmUgbWV0aG9kIGZvciBhbGwgY29udHJvbHMgdG8gcHJvZHVjZSB0aGUgZm9ybSBlbGVtZW50cyB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBkb21cbiAgICogdGhlIGltcGxlbWVudGF0aW9uIGluIGNvbnRyb2wuanMgd2lsbCByZXR1cm5cbiAgICogU3VwcG9ydGVkIHJldHVybiBjb25maWd1cmF0aW9uIGVsZW1lbnRzOlxuICAgKiAgIC0gZmllbGQgLSB0aGUgRE9NIGVsZW1lbnRcbiAgICogICAtIG5vTGFiZWwgLSB0aGlzIGNvbnRyb2wgc2hvdWxkbid0IGhhdmUgYSBsYWJlbCAobm9yIGEgc3BhY2UgZm9yIGEgbGFiZWwpXG4gICAqICAgLSBoaWRkZW4gLSB0aGlzIGNvbnRyb2wgc2hvdWxkbid0IHJlbmRlciBhbnl0aGluZyB2aXNpYmxlIHRvIHRoZSBwYWdlXG4gICAqIEByZXR1cm4ge09iamVjdH0gRE9NIEVsZW1lbnQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZm9ybSwgb3IgYW4gb2JqZWN0L2hhc2ggb2YgY29uZmlndXJhdGlvbiBhcyBhYm92ZVxuICAgKi9cbiAgYnVpbGQoKSB7XG4gICAgY29uc3QgeyBsYWJlbCwgdHlwZSwgLi4uZGF0YSB9ID0gdGhpcy5jb25maWdcbiAgICByZXR1cm4gdGhpcy5tYXJrdXAodHlwZSwgcGFyc2VkSHRtbChsYWJlbCksIGRhdGEpXG4gIH1cblxuICAvKipcbiAgICogY29kZSB0byBleGVjdXRlIGZvciBzdXBwb3J0ZWQgZXZlbnRzXG4gICAqIHRvIGltcGxlbWVudCBhbiBvblJlbmRlciBldmVudCBpbiBhIGNoaWxkIGNsYXNzLCBzaW1wbHkgZGVmaW5lIGFuIG9uUmVuZGVyIG1ldGhvZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlIC0gb3B0aW9uYWwgdHlwZSBvZiBldmVudCB0byByZXRyaWV2ZSBhbiBldmVudCBmdW5jdGlvbiBmb3IuIElmIG5vdCBzcGVjaWZpZWQgYWxsIGV2ZW50cyByZXR1cm5lZFxuICAgKiBAcmV0dXJuIHtGdW5jdGlvbi9PYmplY3R9IC0gZnVuY3Rpb24gdG8gZXhlY3V0ZSBmb3Igc3BlY2lmaWVkIGV2ZW50LCBvciBhbGwgZXZlbnRzIG9mIG5vIGV2ZW50VHlwZSBpcyBzcGVjaWZpZWRcbiAgICovXG4gIG9uKGV2ZW50VHlwZSkge1xuICAgIGNvbnN0IGV2ZW50cyA9IHtcbiAgICAgIC8vIGV4ZWN1dGVkIGp1c3QgcHJpb3IgdG8gdGhlIHJvdyBiZWluZyByZXR1cm5lZCBieSB0aGUgbGF5b3V0IGNsYXNzLiBSZWNlaXZlcyB0aGUgRE9NZWxlbWVudCBhYm91dCB0byBiZSBwYXNzZWQgYmFja1xuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge05vZGV9IGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgcHJlcmVuZGVyOiBlbGVtZW50ID0+IGVsZW1lbnQsXG5cbiAgICAgIC8qKlxuICAgICAgICogb25SZW5kZXIgZXZlbnQgdG8gZXhlY3V0ZSBjb2RlIGVhY2ggdGltZSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNvbnRyb2wgaXMgaW5qZWN0ZWQgaW50byB0aGUgRE9NXG4gICAgICAgKiBAcGFyYW0ge05vZGV9IGV2dFxuICAgICAgICovXG4gICAgICByZW5kZXI6IGV2dCA9PiB7XG4gICAgICAgIC8vIGNoZWNrIGZvciBhIGNsYXNzIHJlbmRlciBldmVudCAtIGRlZmF1bHQgdG8gYW4gZW1wdHkgZnVuY3Rpb25cbiAgICAgICAgY29uc3Qgb25SZW5kZXIgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMub25SZW5kZXIpIHtcbiAgICAgICAgICAgIHRoaXMub25SZW5kZXIoZXZ0KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBhbnkgY3NzICYgamF2YXNjcmlwdCB0byBpbmNsdWRlXG4gICAgICAgIGlmICh0aGlzLmNzcykge1xuICAgICAgICAgIGdldFN0eWxlcyh0aGlzLmNzcylcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5qcyAmJiAhaXNDYWNoZWQodGhpcy5qcykpIHtcbiAgICAgICAgICBnZXRTY3JpcHRzKHRoaXMuanMpLmRvbmUob25SZW5kZXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25SZW5kZXIoZXZ0KVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH1cbiAgICByZXR1cm4gZXZlbnRUeXBlID8gZXZlbnRzW2V2ZW50VHlwZV0gOiBldmVudHNcbiAgfVxuXG4gIC8qKlxuICAgKiBjZW50cmFsaXNlZCBlcnJvciBoYW5kbGluZ1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBtZXNzYWdlIHRvIG91dHB1dCB0byB0aGUgY29uc29sZVxuICAgKi9cbiAgc3RhdGljIGVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSlcbiAgfVxuXG4gIC8qKlxuICAgKiB3cmFwIHRoZSB1dGlscy5tYXJrdXAgbWV0aG9kXG4gICAqIGlkZWFsbHkgdGhpcyB3b3VsZCBiZSBpbmhlcml0ZWQgZnJvbSBhIHBhcmVudCAnZG9tJyB0eXBlIGVsZW1lbnQgc3VwcG9ydGluZyBkb20gaGVscGVyIHR5cGUgbWV0aG9kc1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHRhZ1xuICAgKiBAcGFyYW0gIHtPYmplY3R8U3RyaW5nfEFycmF5fSBjb250ZW50XG4gICAqIEBwYXJhbSAge09iamVjdH0gYXR0cmlidXRlc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9IERPTSBlbGVtZW50XG4gICAqL1xuICBtYXJrdXAodGFnLCBjb250ZW50ID0gJycsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgIHRoaXMuZWxlbWVudCA9IG1hcmt1cCh0YWcsIGNvbnRlbnQsIGF0dHJpYnV0ZXMpXG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGVzY2FwZWQgSFRNTCBpbnRvIHVzYWJsZSBIVE1MXG4gICAqIEBwYXJhbSAge1N0cmluZ30gaHRtbCBlc2NhcGVkIEhUTUxcbiAgICogQHJldHVybiB7U3RyaW5nfSAgICAgIHBhcnNlZCBIVE1MXG4gICAqL1xuICBwYXJzZWRIdG1sKGh0bWwpIHtcbiAgICByZXR1cm4gcGFyc2VkSHRtbChodG1sKVxuICB9XG5cbiAgLyoqXG4gICAqIGNvbnZlcnQgYSBoeXBoZW5hdGVkIHN0cmluZyB0byBjYW1lbENhc2VcbiAgICogQHBhcmFtICB7U3RyaW5nfSBzdHJcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGNhbWVsQ2FzZShzdHIpIHtcbiAgICByZXR1cm4gY2FtZWxDYXNlKHN0cilcbiAgfVxufVxuIiwiaW1wb3J0IGNvbnRyb2wgZnJvbSAnLi4vY29udHJvbCdcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJy4uL2RvbSdcbi8qKlxuICogQXV0b2NvbXBsZXRlIGNsYXNzXG4gKiBPdXRwdXQgYW4gYXV0b2NvbXBsZXRlIGZvcm0gZWxlbWVudFxuICogQGV4dGVuZHMgY29udHJvbFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBjb250cm9sQXV0b2NvbXBsZXRlIGV4dGVuZHMgY29udHJvbCB7XG4gIC8qKlxuICAgKiBkZWZpbml0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH0gc2VsZWN0IGNvbnRyb2wgZGVmaW5pdGlvblxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZpbml0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtaTE4bjoge1xuICAgICAgICByZXF1aXJlVmFsaWRPcHRpb246ICdyZXF1aXJlVmFsaWRPcHRpb24nLFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogYnVpbGQgYSB0ZXh0IERPTSBlbGVtZW50LCBzdXBwb3J0aW5nIG90aGVyIGpxdWVyeSB0ZXh0IGZvcm0tY29udHJvbCdzXG4gICAqIEByZXR1cm4ge09iamVjdH0gRE9NIEVsZW1lbnQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZm9ybS5cbiAgICovXG4gIGJ1aWxkKCkge1xuICAgIGNvbnN0IHsgdmFsdWVzLCB0eXBlLCAuLi5kYXRhIH0gPSB0aGlzLmNvbmZpZ1xuICAgIGNvbnN0IGtleWJvYXJkTmF2ID0gZSA9PiB7XG4gICAgICBjb25zdCBsaXN0ID0gZS50YXJnZXQubmV4dFNpYmxpbmcubmV4dFNpYmxpbmdcbiAgICAgIGNvbnN0IGhpZGRlbkZpZWxkID0gZS50YXJnZXQubmV4dFNpYmxpbmdcbiAgICAgIGNvbnN0IGFjdGl2ZU9wdGlvbiA9IHRoaXMuZ2V0QWN0aXZlT3B0aW9uKGxpc3QpXG4gICAgICBjb25zdCBrZXlDb2RlTWFwVmFscyA9IFtcbiAgICAgICAgLy8gdXBcbiAgICAgICAgW1xuICAgICAgICAgIDM4LFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gdGhpcy5nZXRQcmV2aW91c09wdGlvbihhY3RpdmVPcHRpb24pXG4gICAgICAgICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5zZWxlY3RPcHRpb24obGlzdCwgcHJldmlvdXMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgLy8gZG93blxuICAgICAgICBbXG4gICAgICAgICAgNDAsXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuZ2V0TmV4dE9wdGlvbihhY3RpdmVPcHRpb24pXG4gICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICB0aGlzLnNlbGVjdE9wdGlvbihsaXN0LCBuZXh0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIC8vIGVudGVyXG4gICAgICAgIFtcbiAgICAgICAgICAxMyxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWN0aXZlT3B0aW9uKSB7XG4gICAgICAgICAgICAgIGUudGFyZ2V0LnZhbHVlID0gYWN0aXZlT3B0aW9uLmlubmVySFRNTFxuICAgICAgICAgICAgICBoaWRkZW5GaWVsZC52YWx1ZSA9IGFjdGl2ZU9wdGlvbi5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJylcbiAgICAgICAgICAgICAgaWYgKGxpc3Quc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TGlzdChsaXN0LCBhY3RpdmVPcHRpb24pXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlTGlzdChsaXN0KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBEb24ndCBhbGxvdyBhIHZhbHVlIG5vdCBpbiB0aGUgbGlzdFxuICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWcucmVxdWlyZVZhbGlkT3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzT3B0aW9uVmFsaWQobGlzdCwgZS50YXJnZXQudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICBlLnRhcmdldC52YWx1ZSA9ICcnXG4gICAgICAgICAgICAgICAgICBlLnRhcmdldC5uZXh0U2libGluZy52YWx1ZSA9ICcnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICAvLyBlc2NhcGVcbiAgICAgICAgW1xuICAgICAgICAgIDI3LFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGlkZUxpc3QobGlzdClcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgXVxuICAgICAgY29uc3Qga2V5Q29kZU1hcCA9IG5ldyBNYXAoa2V5Q29kZU1hcFZhbHMpXG5cbiAgICAgIGxldCBkaXJlY3Rpb24gPSBrZXlDb2RlTWFwLmdldChlLmtleUNvZGUpXG4gICAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgICBkaXJlY3Rpb24gPSAoKSA9PiBmYWxzZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGlyZWN0aW9uKClcbiAgICB9XG4gICAgY29uc3QgZmF1eEV2ZW50cyA9IHtcbiAgICAgIGZvY3VzOiBldnQgPT4ge1xuICAgICAgICBjb25zdCBsaXN0ID0gZXZ0LnRhcmdldC5uZXh0U2libGluZy5uZXh0U2libGluZ1xuICAgICAgICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSBmaWx0ZXIobGlzdC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLCBldnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICBldnQudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlib2FyZE5hdilcbiAgICAgICAgaWYgKGV2dC50YXJnZXQudmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gZmlsdGVyZWRPcHRpb25zLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZE9wdGlvbnNbZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAtIDFdIDogbnVsbFxuICAgICAgICAgIHRoaXMuc2hvd0xpc3QobGlzdCwgc2VsZWN0ZWRPcHRpb24pXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBibHVyOiBldnQgPT4ge1xuICAgICAgICBldnQudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlib2FyZE5hdilcbiAgICAgICAgY29uc3QgYmx1clRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBldnQudGFyZ2V0Lm5leHRTaWJsaW5nLm5leHRTaWJsaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgICAgICAgICBjbGVhclRpbWVvdXQoYmx1clRpbWVvdXQpXG4gICAgICAgIH0sIDIwMClcbiAgICAgICAgLy8gVmFsaWRhdGUgdGhlIG9wdGlvbiBlbnRlcmVkIGV4aXN0c1xuICAgICAgICBpZiAodGhpcy5jb25maWcucmVxdWlyZVZhbGlkT3B0aW9uKSB7XG4gICAgICAgICAgY29uc3QgbGlzdCA9IGV2dC50YXJnZXQubmV4dFNpYmxpbmcubmV4dFNpYmxpbmdcbiAgICAgICAgICBpZiAoIXRoaXMuaXNPcHRpb25WYWxpZChsaXN0LCBldnQudGFyZ2V0LnZhbHVlKSkge1xuICAgICAgICAgICAgZXZ0LnRhcmdldC52YWx1ZSA9ICcnXG4gICAgICAgICAgICBldnQudGFyZ2V0Lm5leHRTaWJsaW5nLnZhbHVlID0gJydcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbnB1dDogZXZ0ID0+IHtcbiAgICAgICAgY29uc3QgbGlzdCA9IGV2dC50YXJnZXQubmV4dFNpYmxpbmcubmV4dFNpYmxpbmdcbiAgICAgICAgY29uc3QgaGlkZGVuRmllbGQgPSBldnQudGFyZ2V0Lm5leHRTaWJsaW5nXG4gICAgICAgIGhpZGRlbkZpZWxkLnZhbHVlID0gZXZ0LnRhcmdldC52YWx1ZVxuICAgICAgICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSBmaWx0ZXIobGlzdC5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLCBldnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICBpZiAoZmlsdGVyZWRPcHRpb25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgdGhpcy5oaWRlTGlzdChsaXN0KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBhY3RpdmVPcHRpb24gPSB0aGlzLmdldEFjdGl2ZU9wdGlvbihsaXN0KVxuICAgICAgICAgIGlmICghYWN0aXZlT3B0aW9uKSB7XG4gICAgICAgICAgICBhY3RpdmVPcHRpb24gPSBmaWx0ZXJlZE9wdGlvbnNbZmlsdGVyZWRPcHRpb25zLmxlbmd0aCAtIDFdXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2hvd0xpc3QobGlzdCwgYWN0aXZlT3B0aW9uKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH1cbiAgICBjb25zdCBmYXV4QXR0cnMgPSBPYmplY3QuYXNzaWduKHt9LCBkYXRhLCB7XG4gICAgICBpZDogYCR7ZGF0YS5pZH0taW5wdXRgLFxuICAgICAgYXV0b2NvbXBsZXRlOiAnb2ZmJyxcbiAgICAgIGV2ZW50czogZmF1eEV2ZW50cyxcbiAgICB9KVxuICAgIGNvbnN0IGhpZGRlbkF0dHJzID0gT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwgeyB0eXBlOiAnaGlkZGVuJyB9KVxuICAgIGRlbGV0ZSBmYXV4QXR0cnMubmFtZVxuICAgIGNvbnN0IGZpZWxkID0gW3RoaXMubWFya3VwKCdpbnB1dCcsIG51bGwsIGZhdXhBdHRycyksIHRoaXMubWFya3VwKCdpbnB1dCcsIG51bGwsIGhpZGRlbkF0dHJzKV1cblxuICAgIGNvbnN0IG9wdGlvbnMgPSB2YWx1ZXMubWFwKG9wdGlvbkRhdGEgPT4ge1xuICAgICAgY29uc3QgbGFiZWwgPSBvcHRpb25EYXRhLmxhYmVsXG4gICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgIGV2ZW50czoge1xuICAgICAgICAgIGNsaWNrOiBldnQgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGlzdCA9IGV2dC50YXJnZXQucGFyZW50RWxlbWVudFxuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBsaXN0LnByZXZpb3VzU2libGluZy5wcmV2aW91c1NpYmxpbmdcbiAgICAgICAgICAgIGZpZWxkLnZhbHVlID0gb3B0aW9uRGF0YS5sYWJlbFxuICAgICAgICAgICAgZmllbGQubmV4dFNpYmxpbmcudmFsdWUgPSBvcHRpb25EYXRhLnZhbHVlXG4gICAgICAgICAgICB0aGlzLmhpZGVMaXN0KGxpc3QpXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdmFsdWU6IG9wdGlvbkRhdGEudmFsdWUsXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXJrdXAoJ2xpJywgbGFiZWwsIGNvbmZpZylcbiAgICB9KVxuXG4gICAgZmllbGQucHVzaCh0aGlzLm1hcmt1cCgndWwnLCBvcHRpb25zLCB7IGlkOiBgJHtkYXRhLmlkfS1saXN0YCwgY2xhc3NOYW1lOiBgZm9ybWJ1aWxkZXItJHt0eXBlfS1saXN0YCB9KSlcbiAgICByZXR1cm4gZmllbGRcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyBhdXRvY29tcGxldGUgbGlzdCBhbmQgZGVzZWxlY3RzIGFsbCB0aGUgb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gbGlzdCAtIGxpc3Qgb2YgYXV0b2NvbXBsZXRlIG9wdGlvbnNcbiAgICovXG4gIGhpZGVMaXN0KGxpc3QpIHtcbiAgICB0aGlzLnNlbGVjdE9wdGlvbihsaXN0LCBudWxsKVxuICAgIGxpc3Quc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3dzIGF1dG9jb21wbGV0ZSBsaXN0LiBBdXRvbWF0aWNhbGx5IHNlbGVjdHMgJ3NlbGVjdGVkT3B0aW9uJ1xuICAgKiBAcGFyYW0ge09iamVjdH0gbGlzdCAtIGxpc3Qgb2YgYXV0b2NvbXBsZXRlIG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlbGVjdGVkT3B0aW9uIC0gb3B0aW9uIHRvIGJlIHNlbGVjdGVkXG4gICAqL1xuICBzaG93TGlzdChsaXN0LCBzZWxlY3RlZE9wdGlvbikge1xuICAgIHRoaXMuc2VsZWN0T3B0aW9uKGxpc3QsIHNlbGVjdGVkT3B0aW9uKVxuICAgIGxpc3Quc3R5bGUuZGlzcGxheSA9ICdibG9jaydcbiAgICBsaXN0LnN0eWxlLndpZHRoID0gbGlzdC5wYXJlbnRFbGVtZW50Lm9mZnNldFdpZHRoICsgJ3B4J1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlyc3Qgb3B0aW9uIGZyb20gYXV0b2NvbXBsZXRlIGxpc3Qgd2l0aCAnYWN0aXZlLW9wdGlvbicgY2xhc3NcbiAgICogQHBhcmFtIHtPYmplY3R9IGxpc3QgLSBsaXN0IG9mIGF1dG9jb21wbGV0ZSBvcHRpb25zXG4gICAqIEByZXR1cm4ge09iamVjdH0gZmlyc3QgbGlzdCBvcHRpb24gd2l0aCAnYWN0aXZlLW9wdGlvbicgY2xhc3NcbiAgICovXG4gIGdldEFjdGl2ZU9wdGlvbihsaXN0KSB7XG4gICAgY29uc3QgYWN0aXZlT3B0aW9uID0gbGlzdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhY3RpdmUtb3B0aW9uJylbMF1cbiAgICBpZiAoYWN0aXZlT3B0aW9uICYmIGFjdGl2ZU9wdGlvbi5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBhY3RpdmVPcHRpb25cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBQcmV2aW91cyBuZXh0IG9wdGlvbiB0byB0aGUgY3VycmVudCBvcHRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGN1cnJlbnQgLSBjdXJyZW50bHkgc2VsZWN0ZWQgb3B0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH0gcHJldmlvdXMgb3B0aW9uIHRvIHRoZSBjdXJyZW50IG9wdGlvbiBvciBudWxsIGlmIHByZXZpb3VzIGRvZXNuJ3QgZXhpc3RcbiAgICovXG4gIGdldFByZXZpb3VzT3B0aW9uKGN1cnJlbnQpIHtcbiAgICBsZXQgcHJldmlvdXMgPSBjdXJyZW50XG4gICAgZG8ge1xuICAgICAgcHJldmlvdXMgPSBwcmV2aW91cyA/IHByZXZpb3VzLnByZXZpb3VzU2libGluZyA6IG51bGxcbiAgICB9IHdoaWxlIChwcmV2aW91cyAhPSBudWxsICYmIHByZXZpb3VzLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJylcbiAgICByZXR1cm4gcHJldmlvdXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5leHQgb3B0aW9uIHRvIHRoZSBjdXJyZW50IG9wdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gY3VycmVudCAtIGN1cnJlbnRseSBzZWxlY3RlZCBvcHRpb25cbiAgICogQHJldHVybiB7T2JqZWN0fSBuZXh0IG9wdGlvbiB0byB0aGUgY3VycmVudCBvcHRpb24gb3IgbnVsbCBpZiBuZXh0IGRvZXNuJ3QgZXhpc3RcbiAgICovXG4gIGdldE5leHRPcHRpb24oY3VycmVudCkge1xuICAgIGxldCBuZXh0ID0gY3VycmVudFxuICAgIGRvIHtcbiAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5uZXh0U2libGluZyA6IG51bGxcbiAgICB9IHdoaWxlIChuZXh0ICE9IG51bGwgJiYgbmV4dC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpXG4gICAgcmV0dXJuIG5leHRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIG9wdGlvbiBpbiBhdXRvY29tcGxldGUgbGlzdC4gUmVtb3ZlcyBjbGFzcyAnYWN0aXZlLW9wdGlvbicgZnJvbSBhbGwgb3B0aW9uc1xuICAgKiBhbmQgdGhlbiBhZGRzIHRoYXQgY2xhc3MgdG8gJ3NlbGVjdGVkJyBvcHRpb24uIElmICdzZWxlY3RlZCcgaXMgbnVsbCB0aGVuIG5vIG9wdGlvbiBpcyBzZWxlY3RlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gbGlzdCAtIGxpc3Qgb2YgYXV0b2NvbXBsZXRlIG9wdGlvbnNcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlbGVjdGVkT3B0aW9uIC0gb3B0aW9uIC0gJ2xpJyBlbGVtZW50IC0gdG8gYmUgc2VsZWN0ZWQgaW4gYXV0b2NvbXBsZXRlIGxpc3RcbiAgICovXG4gIHNlbGVjdE9wdGlvbihsaXN0LCBzZWxlY3RlZE9wdGlvbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBsaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJylcbiAgICAvLyAtLUZpeCBmb3IgSUUxMVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgb3B0aW9uc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUtb3B0aW9uJylcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkT3B0aW9uKSB7XG4gICAgICBzZWxlY3RlZE9wdGlvbi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUtb3B0aW9uJylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXMgdGhlIHZhbHVlIGluIHRoZSBhdXRvY29tcGxldGUgZmllbGQgaW4gdGhlIHByZS1kZWZpbmVkIE9wdGlvbnMgbGlzdD9cbiAgICogQHBhcmFtIHtPYmplY3R9IGxpc3QgLSBsaXN0IG9mIGF1dG9jb21wbGV0ZSBvcHRpb25zXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSAtdmFsdWUgdHJ5aW5nIHRvIGJlIHNldFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IC0gaXMgdGhlIG9wdGlvbiBpbiB0aGUgcHJlIGRlZmluZWQgbGlzdFxuICAgKi9cbiAgaXNPcHRpb25WYWxpZChsaXN0LCB2YWx1ZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBsaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJylcbiAgICBsZXQgdmFsaWRWYWx1ZSA9IGZhbHNlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAob3B0aW9uc1tpXS5pbm5lckhUTUwgPT09IHZhbHVlKSB7XG4gICAgICAgIHZhbGlkVmFsdWUgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWxpZFZhbHVlXG4gIH1cblxuICAvKipcbiAgICogb25SZW5kZXIgY2FsbGJhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2dFxuICAgKi9cbiAgb25SZW5kZXIoZXZ0KSB7XG4gICAgLy8gU2V0IHVzZXJEYXRhIGlmIGF2YWlsYWJsZVxuICAgIGlmICh0aGlzLmNvbmZpZy51c2VyRGF0YSkge1xuICAgICAgY29uc3QgJGVsID0gJCgnIycgKyB0aGlzLmNvbmZpZy5uYW1lKVxuICAgICAgY29uc3QgJG9wdGlvbnMgPSAkZWwubmV4dCgpXG5cbiAgICAgIGNvbnN0IHByZVNlbGVjdGVkT3B0aW9uID0gdGhpcy5jb25maWcudXNlckRhdGFbMF1cbiAgICAgIGxldCBzZWxlY3RlZE9wdGlvbiA9IG51bGxcblxuICAgICAgJG9wdGlvbnMuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgICAgIGlmICgkKHRoaXMpLmF0dHIoJ3ZhbHVlJykgPT09IHByZVNlbGVjdGVkT3B0aW9uKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgICAgIHNlbGVjdGVkT3B0aW9uID0gJCh0aGlzKS5nZXQoMClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLy8gSWYgdGhlIG9wdGlvbiB3YXMgbm90IHNldCwgYW5kIGNvbmZpZ3VyYXRpb24gc2F5cyBpdCBkb2Vzbid0IGhhdmUgdG8gYmUgcHJlLWRlZmluZWQsIHNldCB0aGUgdmFsdWVcbiAgICAgIGlmIChzZWxlY3RlZE9wdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICBpZiAodGhpcy5jb25maWcucmVxdWlyZVZhbGlkT3B0aW9uKSB7XG4gICAgICAgICAgLy8gRG9uJ3QgYWxsb3dcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTZXQgaXQgdG8gd2hhdGV2ZXIgdGhlIHZhbHVlIGlzXG4gICAgICAgICAgJGVsLnByZXYoKS52YWwodGhpcy5jb25maWcudXNlckRhdGFbMF0pXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGVsLnByZXYoKS52YWwoc2VsZWN0ZWRPcHRpb24uaW5uZXJIVE1MKVxuICAgICAgJGVsLnZhbChzZWxlY3RlZE9wdGlvbi5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG5cbiAgICAgIGNvbnN0IGxpc3QgPSAkZWwubmV4dCgpLmdldCgwKVxuXG4gICAgICBpZiAobGlzdC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgdGhpcy5zaG93TGlzdChsaXN0LCBzZWxlY3RlZE9wdGlvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZUxpc3QobGlzdClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV2dFxuICB9XG59XG5cbmNvbnRyb2wucmVnaXN0ZXIoJ2F1dG9jb21wbGV0ZScsIGNvbnRyb2xBdXRvY29tcGxldGUpXG4iLCJpbXBvcnQgY29udHJvbCBmcm9tICcuLi9jb250cm9sJ1xuXG4vKipcbiAqIEJ1dHRvbiBjbGFzc1xuICogT3V0cHV0IGEgPGJ1dHRvbj5MYWJlbDwvYnV0dG9uPiBmb3JtIGVsZW1lbnRcbiAqIEBleHRlbmRzIGNvbnRyb2xcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgY29udHJvbEJ1dHRvbiBleHRlbmRzIGNvbnRyb2wge1xuICAvKipcbiAgICogYnVpbGQgYSB0ZXh0IERPTSBlbGVtZW50LCBzdXBwb3J0aW5nIG90aGVyIGpxdWVyeSB0ZXh0IGZvcm0tY29udHJvbCdzXG4gICAqIEByZXR1cm4ge3tmaWVsZDogSFRNTEVsZW1lbnQsIGxheW91dDogc3RyaW5nfX0gRE9NIEVsZW1lbnQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZm9ybS5cbiAgICovXG4gIGJ1aWxkKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmaWVsZDogdGhpcy5tYXJrdXAoJ2J1dHRvbicsIHRoaXMubGFiZWwsIHRoaXMuY29uZmlnKSxcbiAgICAgIGxheW91dDogJ25vTGFiZWwnLFxuICAgIH1cbiAgfVxufVxuXG4vLyByZWdpc3RlciB0aGUgZm9sbG93aW5nIGNvbnRyb2xzXG5jb250cm9sLnJlZ2lzdGVyKCdidXR0b24nLCBjb250cm9sQnV0dG9uKVxuY29udHJvbC5yZWdpc3RlcihbJ2J1dHRvbicsICdzdWJtaXQnLCAncmVzZXQnXSwgY29udHJvbEJ1dHRvbiwgJ2J1dHRvbicpXG4iLCJpbXBvcnQgY29udHJvbCBmcm9tICcuLi9jb250cm9sJ1xuXG4vKipcbiAqIFN1cHBvcnQgZm9yIGN1c3RvbSBjb250cm9sc1xuICogSW1wbGVtZW50aW5nIHN1cHBvcnQgZm9yIGN1c3RvbSB0ZW1wbGF0ZXMgYmVpbmcgcGFzc2VkIGFzIG9wdGlvbnMgdG8gZm9ybUJ1aWxkZXIvUmVuZGVyXG4gKiBAZXh0ZW5kcyBjb250cm9sXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGNvbnRyb2xDdXN0b20gZXh0ZW5kcyBjb250cm9sIHtcblxuICBjb25zdHJ1Y3Rvcihjb25maWcsIHByZXZpZXcsIHRlbXBsYXRlKSB7XG4gICAgc3VwZXIoY29uZmlnLHByZXZpZXcpXG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlXG4gIH1cblxuICAvKipcbiAgICogYnVpbGQgYSBjdXN0b20gY29udHJvbCBkZWZpbmVkIGluIHRoZSB0ZW1wbGF0ZXMgb3B0aW9uXG4gICAqIEByZXR1cm4ge3tmaWVsZDogYW55LCBsYXlvdXQ6IGFueX19IERPTSBFbGVtZW50IHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZvcm0uXG4gICAqL1xuICBidWlsZCgpIHtcbiAgICBsZXQgY3VzdG9tID0gdGhpcy50ZW1wbGF0ZVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKCFjdXN0b20pIHtcbiAgICAgIHJldHVybiBjb250cm9sLmVycm9yKFxuICAgICAgICBgSW52YWxpZCBjdXN0b20gY29udHJvbCB0eXBlICcke3RoaXMudHlwZX0nLiBQbGVhc2UgZW5zdXJlIHlvdSBoYXZlIHJlZ2lzdGVyZWQgaXQgY29ycmVjdGx5IGFzIGEgdGVtcGxhdGUgb3B0aW9uLmAsXG4gICAgICApXG4gICAgfVxuXG4gICAgLy8gcmVuZGVyIHRoZSBjdXN0b20gdGVtcGxhdGVcbiAgICAvLyByZXN0b3JlIGZpZWxkRGF0YSBjb25maWcgc3RydWN0dXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgIGNvbnN0IGZpZWxkRGF0YSA9IE9iamVjdC5hc3NpZ24odGhpcy5jb25maWcpXG4gICAgY29uc3QgcHJvcGVydGllcyA9IFtcbiAgICAgICdsYWJlbCcsXG4gICAgICAnZGVzY3JpcHRpb24nLFxuICAgICAgJ3N1YnR5cGUnLFxuICAgICAgJ2lkJyxcbiAgICAgICdwcmV2aWV3JyxcbiAgICAgICdyZXF1aXJlZCcsXG4gICAgICAndGl0bGUnLFxuICAgICAgJ2FyaWEtcmVxdWlyZWQnLFxuICAgICAgJ3R5cGUnLFxuICAgIF1cbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcGVydGllcykge1xuICAgICAgZmllbGREYXRhW3Byb3BdID0gdGhpcy5jb25maWdbcHJvcF0gfHwgdGhpc1twcm9wXVxuICAgIH1cblxuICAgIC8vIGJ1aWxkICYgcmV0cmlldmUgZWxlbWVudCBzZXR0aW5nc1xuICAgIGN1c3RvbSA9IGN1c3RvbS5iaW5kKHRoaXMpXG4gICAgY3VzdG9tID0gY3VzdG9tKGZpZWxkRGF0YSlcblxuICAgIC8vIGNoZWNrIGZvciBDU1Mgb3IgSlMgdG8gYmUgaW5qZWN0ZWRcbiAgICBpZiAoY3VzdG9tLmpzKSB7XG4gICAgICB0aGlzLmpzID0gY3VzdG9tLmpzXG4gICAgfVxuICAgIGlmIChjdXN0b20uY3NzKSB7XG4gICAgICB0aGlzLmNzcyA9IGN1c3RvbS5jc3NcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgb25SZW5kZXIgZXZlbnRzICYgcmV0dXJuXG4gICAgdGhpcy5vblJlbmRlciA9IGN1c3RvbS5vblJlbmRlclxuICAgIHJldHVybiB7XG4gICAgICBmaWVsZDogY3VzdG9tLmZpZWxkLFxuICAgICAgbGF5b3V0OiBjdXN0b20ubGF5b3V0LFxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IGNvbnRyb2wgZnJvbSAnLi4vY29udHJvbCdcblxuLyoqXG4gKiBIaWRkZW4gaW5wdXQgY2xhc3NcbiAqIE91dHB1dCBhIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgLi4uIC8+IGZvcm0gZWxlbWVudFxuICogQGV4dGVuZHMgY29udHJvbFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBjb250cm9sSGlkZGVuIGV4dGVuZHMgY29udHJvbCB7XG4gIC8qKlxuICAgKiBidWlsZCBhIGhpZGRlbiBpbnB1dCBkb20gZWxlbWVudFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IERPTSBFbGVtZW50IHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZvcm0uXG4gICAqL1xuICBidWlsZCgpIHtcbiAgICB0aGlzLmZpZWxkID0gdGhpcy5tYXJrdXAoJ2lucHV0JywgbnVsbCwgdGhpcy5jb25maWcpXG4gICAgcmV0dXJuIHtcbiAgICAgIGZpZWxkOiB0aGlzLmZpZWxkLFxuICAgICAgbGF5b3V0OiAnaGlkZGVuJyxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogb25SZW5kZXIgY2FsbGJhY2tcbiAgICovXG4gIG9uUmVuZGVyKCkge1xuICAgIC8vIFNldCB1c2VyRGF0YSBpZiBhdmFpbGFibGVcbiAgICBpZiAodGhpcy5jb25maWcudXNlckRhdGEpIHtcbiAgICAgICQodGhpcy5maWVsZCkudmFsKHRoaXMuY29uZmlnLnVzZXJEYXRhWzBdKVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWdpc3RlciB0aGUgZm9sbG93aW5nIGNvbnRyb2xzXG5jb250cm9sLnJlZ2lzdGVyKCdoaWRkZW4nLCBjb250cm9sSGlkZGVuKVxuIiwiaW1wb3J0IGNvbnRyb2xBdXRvY29tcGxldGUgZnJvbSAnLi9hdXRvY29tcGxldGUnXG5pbXBvcnQgY29udHJvbEJ1dHRvbiBmcm9tICcuL2J1dHRvbidcbmltcG9ydCBjb250cm9sQ3VzdG9tIGZyb20gJy4vY3VzdG9tJ1xuaW1wb3J0IGNvbnRyb2xIaWRkZW4gZnJvbSAnLi9oaWRkZW4nXG5pbXBvcnQgY29udHJvbFBhcmFncmFwaCBmcm9tICcuL3BhcmFncmFwaCdcbmltcG9ydCBjb250cm9sU2VsZWN0IGZyb20gJy4vc2VsZWN0J1xuaW1wb3J0IGNvbnRyb2xUZXh0IGZyb20gJy4vdGV4dCdcbmltcG9ydCBjb250cm9sVGV4dGFyZWEgZnJvbSAnLi90ZXh0YXJlYSdcbmltcG9ydCBjb250cm9sVGlueW1jZSBmcm9tICcuL3RleHRhcmVhLnRpbnltY2UnXG5pbXBvcnQgY29udHJvbFF1aWxsIGZyb20gJy4vdGV4dGFyZWEucXVpbGwnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29udHJvbEF1dG9jb21wbGV0ZSxcbiAgY29udHJvbEJ1dHRvbixcbiAgY29udHJvbEN1c3RvbSxcbiAgY29udHJvbEhpZGRlbixcbiAgY29udHJvbFBhcmFncmFwaCxcbiAgY29udHJvbFNlbGVjdCxcbiAgY29udHJvbFRleHQsXG4gIGNvbnRyb2xUZXh0YXJlYSxcbiAgY29udHJvbFRpbnltY2UsXG4gIGNvbnRyb2xRdWlsbCxcbn1cbiIsImltcG9ydCBjb250cm9sIGZyb20gJy4uL2NvbnRyb2wnXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMnXG4vKipcbiAqIFRleHQgaW5wdXQgY2xhc3NcbiAqIE91dHB1dCBhIDxpbnB1dCB0eXBlPVwidGV4dFwiIC4uLiAvPiBmb3JtIGVsZW1lbnRcbiAqIEBleHRlbmRzIGNvbnRyb2xcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgY29udHJvbFBhcmFncmFwaCBleHRlbmRzIGNvbnRyb2wge1xuICAvKipcbiAgICogYnVpbGQgYSBwYXJhZ3JhcGggRE9NIGVsZW1lbnRcbiAgICogQHJldHVybiB7T2JqZWN0fSBET00gRWxlbWVudCB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBmb3JtLlxuICAgKi9cbiAgYnVpbGQoKSB7XG4gICAgY29uc3QgeyB0eXBlLCAuLi5hdHRycyB9ID0gdGhpcy5jb25maWdcbiAgICBsZXQgdGFnID0gdHlwZVxuXG4gICAgLy8gc29tZSB0eXBlcyB1c2UgYW4gZWxlbWVudCBvZiBhIGRpZmZlcmVudCBuYW1lXG4gICAgY29uc3QgdHlwZU1hcCA9IHtcbiAgICAgIHBhcmFncmFwaDogJ3AnLFxuICAgICAgaGVhZGVyOiB0aGlzLnN1YnR5cGUsXG4gICAgfVxuICAgIGlmICh0eXBlTWFwW3R5cGVdKSB7XG4gICAgICB0YWcgPSB0eXBlTWFwW3R5cGVdXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBmaWVsZDogdGhpcy5tYXJrdXAodGFnLCB1dGlscy5wYXJzZWRIdG1sKHRoaXMubGFiZWwpLCBhdHRycyksXG4gICAgICBsYXlvdXQ6ICdub0xhYmVsJyxcbiAgICB9XG4gIH1cbn1cblxuLy8gcmVnaXN0ZXIgdGhlIGZvbGxvd2luZyBjb250cm9sc1xuY29udHJvbC5yZWdpc3RlcihbJ3BhcmFncmFwaCcsICdoZWFkZXInXSwgY29udHJvbFBhcmFncmFwaClcbmNvbnRyb2wucmVnaXN0ZXIoWydwJywgJ2FkZHJlc3MnLCAnYmxvY2txdW90ZScsICdjYW52YXMnLCAnb3V0cHV0J10sIGNvbnRyb2xQYXJhZ3JhcGgsICdwYXJhZ3JhcGgnKVxuY29udHJvbC5yZWdpc3RlcihbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2J10sIGNvbnRyb2xQYXJhZ3JhcGgsICdoZWFkZXInKVxuIiwiaW1wb3J0IGNvbnRyb2wgZnJvbSAnLi4vY29udHJvbCdcbmltcG9ydCB7IHRyaW1PYmogfSBmcm9tICcuLi91dGlscydcblxuLyoqXG4gKiBUZXh0IGlucHV0IGNsYXNzXG4gKiBPdXRwdXQgYSA8aW5wdXQgdHlwZT1cInRleHRcIiAuLi4gLz4gZm9ybSBlbGVtZW50XG4gKiBAZXh0ZW5kcyBjb250cm9sXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGNvbnRyb2xTZWxlY3QgZXh0ZW5kcyBjb250cm9sIHtcbiAgLyoqXG4gICAqIGRlZmluaXRpb25cbiAgICogQHJldHVybiB7T2JqZWN0fSBzZWxlY3QgY29udHJvbCBkZWZpbml0aW9uXG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmluaXRpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluYWN0aXZlOiBbJ2NoZWNrYm94J10sXG4gICAgICBtaTE4bjoge1xuICAgICAgICBtaW5TZWxlY3Rpb25SZXF1aXJlZDogJ21pblNlbGVjdGlvblJlcXVpcmVkJyxcbiAgICAgIH0sXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGJ1aWxkIGEgc2VsZWN0IERPTSBlbGVtZW50LCBzdXBwb3J0aW5nIG90aGVyIGpxdWVyeSB0ZXh0IGZvcm0tY29udHJvbCdzXG4gICAqIEByZXR1cm4ge09iamVjdH0gRE9NIEVsZW1lbnQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZm9ybS5cbiAgICovXG4gIGJ1aWxkKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBbXVxuICAgIGNvbnN0IHsgdmFsdWVzLCB2YWx1ZSwgcGxhY2Vob2xkZXIsIHR5cGUsIGlubGluZSwgb3RoZXIsIHRvZ2dsZSwgLi4uZGF0YSB9ID0gdGhpcy5jb25maWdcbiAgICBjb25zdCBvcHRpb25UeXBlID0gdHlwZS5yZXBsYWNlKCctZ3JvdXAnLCAnJylcbiAgICBjb25zdCBpc1NlbGVjdCA9IHR5cGUgPT09ICdzZWxlY3QnXG4gICAgaWYgKGRhdGEubXVsdGlwbGUgfHwgdHlwZSA9PT0gJ2NoZWNrYm94LWdyb3VwJykge1xuICAgICAgZGF0YS5uYW1lID0gZGF0YS5uYW1lICsgJ1tdJ1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnY2hlY2tib3gtZ3JvdXAnICYmIGRhdGEucmVxdWlyZWQpIHtcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICBjb25zdCBkZWZhdWx0T25SZW5kZXIgPSB0aGlzLm9uUmVuZGVyLmJpbmQodGhpcylcbiAgICAgIHRoaXMub25SZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZGVmYXVsdE9uUmVuZGVyKClcbiAgICAgICAgc2VsZi5ncm91cFJlcXVpcmVkKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWxldGUgZGF0YS50aXRsZVxuXG4gICAgaWYgKHZhbHVlcykge1xuICAgICAgLy8gaWYgYSBwbGFjZWhvbGRlciBpcyBzcGVjaWZpZWQsIGFkZCBpdCB0byB0aGUgdG9wIG9mIHRoZSBvcHRpb24gbGlzdFxuICAgICAgaWYgKHBsYWNlaG9sZGVyICYmIGlzU2VsZWN0KSB7XG4gICAgICAgIG9wdGlvbnMucHVzaChcbiAgICAgICAgICB0aGlzLm1hcmt1cCgnb3B0aW9uJywgcGxhY2Vob2xkZXIsIHtcbiAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICAgICAgc2VsZWN0ZWQ6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgfSksXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgLy8gcHJvY2VzcyB0aGUgcmVzdCBvZiB0aGUgb3B0aW9uc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG9wdGlvbiA9IHZhbHVlc1tpXVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBvcHRpb24gPSB7IGxhYmVsOiBvcHRpb24sIHZhbHVlOiBvcHRpb24gfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgbGFiZWwgPSAnJywgLi4ub3B0aW9uQXR0cnMgfSA9IG9wdGlvblxuICAgICAgICBvcHRpb25BdHRycy5pZCA9IGAke2RhdGEuaWR9LSR7aX1gXG5cbiAgICAgICAgLy8gZG9uJ3Qgc2VsZWN0IHRoaXMgb3B0aW9uIGlmIGEgcGxhY2Vob2xkZXIgaXMgZGVmaW5lZFxuICAgICAgICBpZiAoIW9wdGlvbkF0dHJzLnNlbGVjdGVkIHx8IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgZGVsZXRlIG9wdGlvbkF0dHJzLnNlbGVjdGVkXG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBhIHZhbHVlIGlzIGRlZmluZWQgYXQgc2VsZWN0IGxldmVsLCBzZWxlY3QgdGhpcyBhdHRyaWJ1dGVcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0aW9uQXR0cnMudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgb3B0aW9uQXR0cnMuc2VsZWN0ZWQgPSB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNTZWxlY3QpIHtcbiAgICAgICAgICBjb25zdCBvID0gdGhpcy5tYXJrdXAoJ29wdGlvbicsIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGxhYmVsKSwgb3B0aW9uQXR0cnMpXG4gICAgICAgICAgb3B0aW9ucy5wdXNoKG8pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbGFiZWxDb250ZW50cyA9IFtsYWJlbF1cbiAgICAgICAgICBsZXQgd3JhcHBlckNsYXNzID0gYGZvcm1idWlsZGVyLSR7b3B0aW9uVHlwZX1gXG4gICAgICAgICAgaWYgKGlubGluZSkge1xuICAgICAgICAgICAgd3JhcHBlckNsYXNzICs9ICctaW5saW5lJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHRpb25BdHRycy50eXBlID0gb3B0aW9uVHlwZVxuICAgICAgICAgIGlmIChvcHRpb25BdHRycy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgb3B0aW9uQXR0cnMuY2hlY2tlZCA9ICdjaGVja2VkJ1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbkF0dHJzLnNlbGVjdGVkXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5tYXJrdXAoJ2lucHV0JywgbnVsbCwgT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwgb3B0aW9uQXR0cnMpKVxuICAgICAgICAgIGNvbnN0IGxhYmVsQXR0cnMgPSB7IGZvcjogb3B0aW9uQXR0cnMuaWQgfVxuICAgICAgICAgIGxldCBvdXRwdXQgPSBbaW5wdXQsIHRoaXMubWFya3VwKCdsYWJlbCcsIGxhYmVsQ29udGVudHMsIGxhYmVsQXR0cnMpXVxuICAgICAgICAgIGlmICh0b2dnbGUpIHtcbiAgICAgICAgICAgIGxhYmVsQXR0cnMuY2xhc3NOYW1lID0gJ2tjLXRvZ2dsZSdcbiAgICAgICAgICAgIGxhYmVsQ29udGVudHMudW5zaGlmdChpbnB1dCwgdGhpcy5tYXJrdXAoJ3NwYW4nKSlcbiAgICAgICAgICAgIG91dHB1dCA9IHRoaXMubWFya3VwKCdsYWJlbCcsIGxhYmVsQ29udGVudHMsIGxhYmVsQXR0cnMpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgd3JhcHBlciA9IHRoaXMubWFya3VwKCdkaXYnLCBvdXRwdXQsIHsgY2xhc3NOYW1lOiB3cmFwcGVyQ2xhc3MgfSlcbiAgICAgICAgICBvcHRpb25zLnB1c2god3JhcHBlcilcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBpZiBjb25maWd1cmVkIHRvIGRpc3BsYXkgYW4gJ290aGVyJyBvcHRpb24sIHByZXBhcmUgdGhlIGVsZW1lbnRzXG4gICAgICBpZiAoIWlzU2VsZWN0ICYmIG90aGVyKSB7XG4gICAgICAgIGNvbnN0IG90aGVyT3B0aW9uQXR0cnMgPSB7XG4gICAgICAgICAgaWQ6IGAke2RhdGEuaWR9LW90aGVyYCxcbiAgICAgICAgICBjbGFzc05hbWU6IGAke2RhdGEuY2xhc3NOYW1lID8/ICcnfSBvdGhlci1vcHRpb25gLFxuICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB3cmFwcGVyQ2xhc3MgPSBgZm9ybWJ1aWxkZXItJHtvcHRpb25UeXBlfWBcbiAgICAgICAgaWYgKGlubGluZSkge1xuICAgICAgICAgIHdyYXBwZXJDbGFzcyArPSAnLWlubGluZSdcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wdGlvbkF0dHJzID0gT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwgb3RoZXJPcHRpb25BdHRycylcbiAgICAgICAgb3B0aW9uQXR0cnMudHlwZSA9IG9wdGlvblR5cGVcblxuICAgICAgICBjb25zdCBvdGhlclZhbEF0dHJzID0ge1xuICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgIGlucHV0OiBldnQgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBvdGhlcklucHV0ID0gZXZ0LnRhcmdldFxuICAgICAgICAgICAgICBjb25zdCBvdGhlciA9IG90aGVySW5wdXQucGFyZW50RWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG4gICAgICAgICAgICAgIG90aGVyLnZhbHVlID0gb3RoZXJJbnB1dC52YWx1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGlkOiBgJHtvdGhlck9wdGlvbkF0dHJzLmlkfS12YWx1ZWAsXG4gICAgICAgICAgY2xhc3NOYW1lOiAnb3RoZXItdmFsJyxcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmltYXJ5SW5wdXQgPSB0aGlzLm1hcmt1cCgnaW5wdXQnLCBudWxsLCBvcHRpb25BdHRycylcbiAgICAgICAgY29uc3Qgb3RoZXJJbnB1dHMgPSBbZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29udHJvbC5taTE4bignb3RoZXInKSksIHRoaXMubWFya3VwKCdpbnB1dCcsIG51bGwsIG90aGVyVmFsQXR0cnMpXVxuICAgICAgICBjb25zdCBpbnB1dExhYmVsID0gdGhpcy5tYXJrdXAoJ2xhYmVsJywgb3RoZXJJbnB1dHMsIHsgZm9yOiBvcHRpb25BdHRycy5pZCB9KVxuICAgICAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5tYXJrdXAoJ2RpdicsIFtwcmltYXJ5SW5wdXQsIGlucHV0TGFiZWxdLCB7IGNsYXNzTmFtZTogd3JhcHBlckNsYXNzIH0pXG4gICAgICAgIG9wdGlvbnMucHVzaCh3cmFwcGVyKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGJ1aWxkICYgcmV0dXJuIHRoZSBET00gZWxlbWVudHNcbiAgICBpZiAodHlwZSA9PSAnc2VsZWN0Jykge1xuICAgICAgdGhpcy5kb20gPSB0aGlzLm1hcmt1cChvcHRpb25UeXBlLCBvcHRpb25zLCB0cmltT2JqKGRhdGEsIHRydWUpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvbSA9IHRoaXMubWFya3VwKCdkaXYnLCBvcHRpb25zLCB7IGNsYXNzTmFtZTogdHlwZSB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5kb21cbiAgfVxuXG4gIC8qKlxuICAgKiBzZXRDdXN0b21WYWxpZGl0eSBmb3IgY2hlY2tib3gtZ3JvdXBcbiAgICovXG4gIGdyb3VwUmVxdWlyZWQoKSB7XG4gICAgY29uc3QgY2hlY2tib3hlcyA9IHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKVxuICAgIGNvbnN0IHNldFZhbGlkaXR5ID0gKGNoZWNrYm94LCBpc1ZhbGlkKSA9PiB7XG4gICAgICBjb25zdCBtaW5SZXEgPSBjb250cm9sLm1pMThuKCdtaW5TZWxlY3Rpb25SZXF1aXJlZCcsIDEpXG4gICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgY2hlY2tib3guc2V0Q3VzdG9tVmFsaWRpdHkobWluUmVxKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hlY2tib3guc2V0Q3VzdG9tVmFsaWRpdHkoJycpXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHRvZ2dsZVJlcXVpcmVkID0gKGNoZWNrYm94ZXMsIGlzVmFsaWQpID0+IHtcbiAgICAgIFtdLmZvckVhY2guY2FsbChjaGVja2JveGVzLCBjYiA9PiB7XG4gICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgY2IucmVtb3ZlQXR0cmlidXRlKCdyZXF1aXJlZCcpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2Iuc2V0QXR0cmlidXRlKCdyZXF1aXJlZCcsICdyZXF1aXJlZCcpXG4gICAgICAgIH1cbiAgICAgICAgc2V0VmFsaWRpdHkoY2IsIGlzVmFsaWQpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IHRvZ2dsZVZhbGlkID0gKCkgPT4ge1xuICAgICAgY29uc3QgaXNWYWxpZCA9IFtdLnNvbWUuY2FsbChjaGVja2JveGVzLCBjYiA9PiBjYi5jaGVja2VkKVxuICAgICAgdG9nZ2xlUmVxdWlyZWQoY2hlY2tib3hlcywgaXNWYWxpZClcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gY2hlY2tib3hlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY2hlY2tib3hlc1tpXS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0b2dnbGVWYWxpZClcbiAgICB9XG4gICAgdG9nZ2xlVmFsaWQoKVxuICB9XG5cbiAgLyoqXG4gICAqIG9uUmVuZGVyIGNhbGxiYWNrXG4gICAqL1xuICBvblJlbmRlcigpIHtcbiAgICAvLyBTZXQgdXNlckRhdGEgaWYgYXZhaWxhYmxlXG4gICAgaWYgKHRoaXMuY29uZmlnLnVzZXJEYXRhKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZE9wdGlvbnMgPSB0aGlzLmNvbmZpZy51c2VyRGF0YS5zbGljZSgpXG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy50eXBlID09PSAnc2VsZWN0Jykge1xuICAgICAgICAkKHRoaXMuZG9tKVxuICAgICAgICAgIC52YWwoc2VsZWN0ZWRPcHRpb25zKVxuICAgICAgICAgIC5wcm9wKCdzZWxlY3RlZCcsIHRydWUpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY29uZmlnLnR5cGUuZW5kc1dpdGgoJy1ncm91cCcpKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy50eXBlID09PSAnY2hlY2tib3gtZ3JvdXAnKSB7XG4gICAgICAgICAgLy9jbGVhciBhbGwgY2hlY2tlZCBlbGVtZW50cyBwcmlvciB0byBzZXR0aW5nIHRoZW0gZnJvbSB1c2VyRGF0YVxuICAgICAgICAgIHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9Y2hlY2tib3hdJykuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgICAgICBpbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2NoZWNrZWQnKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb20ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdvdGhlci12YWwnKSkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3RlZE9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC52YWx1ZSA9PT0gc2VsZWN0ZWRPcHRpb25zW2ldKSB7XG4gICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsICdjaGVja2VkJylcbiAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb25zLnNwbGljZShpLCAxKSAvLyBSZW1vdmUgdGhpcyBpdGVtIGZyb20gdGhlIGxpc3RcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBEaWQgbm90IGZpbmQgYSBtYXRjaCBmb3IgdGhlIHNlbGVjdGVkT3B0aW9uLCBzZWUgaWYgdGhpcyBpcyBhbiBcIm90aGVyXCJcbiAgICAgICAgICBpZiAoaW5wdXQuaWQuZW5kc1dpdGgoJy1vdGhlcicpICYmIHNlbGVjdGVkT3B0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBvdGhlclZhbCA9IHRoaXMuZG9tLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0LmlkfS12YWx1ZWApXG5cbiAgICAgICAgICAgIC8vIHNldCB0aGUgb3RoZXIgdmFsdWVcbiAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsICdjaGVja2VkJylcbiAgICAgICAgICAgIG90aGVyVmFsLnZhbHVlID0gaW5wdXQudmFsdWUgPSBzZWxlY3RlZE9wdGlvbnNbMF1cbiAgICAgICAgICAgIC8vIHNob3cgb3RoZXIgdmFsdWVcbiAgICAgICAgICAgIG90aGVyVmFsLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVnaXN0ZXIgdGhpcyBjb250cm9sIGZvciB0aGUgZm9sbG93aW5nIHR5cGVzICYgdGV4dCBzdWJ0eXBlc1xuY29udHJvbC5yZWdpc3RlcihbJ3NlbGVjdCcsICdjaGVja2JveC1ncm91cCcsICdyYWRpby1ncm91cCcsICdjaGVja2JveCddLCBjb250cm9sU2VsZWN0KVxuIiwiaW1wb3J0IGNvbnRyb2wgZnJvbSAnLi4vY29udHJvbCdcblxuLyoqXG4gKiBUZXh0IGlucHV0IGNsYXNzXG4gKiBPdXRwdXQgYSA8aW5wdXQgdHlwZT1cInRleHRcIiAuLi4gLz4gZm9ybSBlbGVtZW50XG4gKiBAZXh0ZW5kcyBjb250cm9sXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGNvbnRyb2xUZXh0IGV4dGVuZHMgY29udHJvbCB7XG4gIC8qKlxuICAgKiBjbGFzcyBjb25maWd1cmF0aW9uXG4gICAqL1xuICBzdGF0aWMgZ2V0IGRlZmluaXRpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIG1pMThuIGN1c3RvbSBtYXBwaW5ncyAoZGVmYXVsdHMgdG8gY2FtZWxDYXNlIHR5cGUpXG4gICAgICBtaTE4bjoge1xuICAgICAgICBkYXRlOiAnZGF0ZUZpZWxkJyxcbiAgICAgICAgZmlsZTogJ2ZpbGVVcGxvYWQnLFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogYnVpbGQgYSB0ZXh0IERPTSBlbGVtZW50LCBzdXBwb3J0aW5nIG90aGVyIGpxdWVyeSB0ZXh0IGZvcm0tY29udHJvbCdzXG4gICAqIEByZXR1cm4ge09iamVjdH0gRE9NIEVsZW1lbnQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZm9ybS5cbiAgICovXG4gIGJ1aWxkKCkge1xuICAgIGxldCB7IG5hbWUgfSA9IHRoaXMuY29uZmlnXG4gICAgbmFtZSA9IHRoaXMuY29uZmlnLm11bHRpcGxlID8gYCR7bmFtZX1bXWAgOiBuYW1lXG4gICAgY29uc3QgaW5wdXRDb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZywgeyBuYW1lIH0pXG4gICAgdGhpcy5kb20gPSB0aGlzLm1hcmt1cCgnaW5wdXQnLCBudWxsLCBpbnB1dENvbmZpZylcbiAgICByZXR1cm4gdGhpcy5kb21cbiAgfVxuXG4gIC8qKlxuICAgKiBvblJlbmRlciBjYWxsYmFja1xuICAgKi9cbiAgb25SZW5kZXIoKSB7XG4gICAgLy8gU2V0IHVzZXJEYXRhIGlmIGF2YWlsYWJsZVxuICAgIGlmICh0aGlzLmNvbmZpZy51c2VyRGF0YSkge1xuICAgICAgJCh0aGlzLmRvbSkudmFsKHRoaXMuY29uZmlnLnVzZXJEYXRhWzBdKVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWdpc3RlciB0aGlzIGNvbnRyb2wgZm9yIHRoZSBmb2xsb3dpbmcgdHlwZXMgJiB0ZXh0IHN1YnR5cGVzXG5jb250cm9sLnJlZ2lzdGVyKFsndGV4dCcsICdmaWxlJywgJ2RhdGUnLCAnbnVtYmVyJ10sIGNvbnRyb2xUZXh0KVxuY29udHJvbC5yZWdpc3RlcihbJ3RleHQnLCAncGFzc3dvcmQnLCAnZW1haWwnLCAnY29sb3InLCAndGVsJ10sIGNvbnRyb2xUZXh0LCAndGV4dCcpXG5jb250cm9sLnJlZ2lzdGVyKFsnZGF0ZScsICd0aW1lJywgJ2RhdGV0aW1lLWxvY2FsJ10sIGNvbnRyb2xUZXh0LCAnZGF0ZScpXG5jb250cm9sLnJlZ2lzdGVyKFsnbnVtYmVyJywgJ3JhbmdlJ10sIGNvbnRyb2xUZXh0LCAnbnVtYmVyJylcbiIsImltcG9ydCBjb250cm9sIGZyb20gJy4uL2NvbnRyb2wnXG5cbi8qKlxuICogVGV4dCBpbnB1dCBjbGFzc1xuICogT3V0cHV0IGEgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgLi4uIC8+IGZvcm0gZWxlbWVudFxuICogQGV4dGVuZHMgY29udHJvbFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBjb250cm9sVGV4dGFyZWEgZXh0ZW5kcyBjb250cm9sIHtcbiAgLyoqXG4gICAqIGNsYXNzIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHN0YXRpYyBnZXQgZGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gbWkxOG4gY3VzdG9tIG1hcHBpbmdzIChkZWZhdWx0cyB0byBjYW1lbENhc2UgdHlwZSlcbiAgICAgIG1pMThuOiB7XG4gICAgICAgIHRleHRhcmVhOiAndGV4dEFyZWEnLFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogYnVpbGQgYSB0ZXh0IERPTSBlbGVtZW50LCBzdXBwb3J0aW5nIG90aGVyIGpxdWVyeSB0ZXh0IGZvcm0tY29udHJvbCdzXG4gICAqIEByZXR1cm4ge09iamVjdH0gRE9NIEVsZW1lbnQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZm9ybS5cbiAgICovXG4gIGJ1aWxkKCkge1xuICAgIGNvbnN0IHsgdmFsdWUgPSAnJywgLi4uYXR0cnMgfSA9IHRoaXMuY29uZmlnXG4gICAgLy9UZXh0YXJlYXMgZG8gbm90IGhhdmUgYW4gYXR0cmlidXRlICd0eXBlJ1xuICAgIGRlbGV0ZSBhdHRyc1sndHlwZSddXG4gICAgdGhpcy5maWVsZCA9IHRoaXMubWFya3VwKCd0ZXh0YXJlYScsIHRoaXMucGFyc2VkSHRtbCh2YWx1ZSksIGF0dHJzKVxuICAgIHJldHVybiB0aGlzLmZpZWxkXG4gIH1cblxuICAvKipcbiAgICogb25SZW5kZXIgY2FsbGJhY2tcbiAgICovXG4gIG9uUmVuZGVyKCkge1xuICAgIC8vIFNldCB1c2VyRGF0YSBpZiBhdmFpbGFibGVcbiAgICBpZiAodGhpcy5jb25maWcudXNlckRhdGEpIHtcbiAgICAgICQodGhpcy5maWVsZCkudmFsKHRoaXMuY29uZmlnLnVzZXJEYXRhWzBdKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBleHRlbmQgdGhlIGRlZmF1bHQgZXZlbnRzIHRvIGFkZCBhIHByZXJlbmRlciBmb3IgdGV4dGFyZWFzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICogQHJldHVybiB7RnVuY3Rpb259IHByZXJlbmRlciBmdW5jdGlvblxuICAgKi9cbiAgb24oZXZlbnRUeXBlKSB7XG4gICAgaWYgKGV2ZW50VHlwZSA9PSAncHJlcmVuZGVyJyAmJiB0aGlzLnByZXZpZXcpIHtcbiAgICAgIHJldHVybiBlbGVtZW50ID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gdGhpcy5maWVsZFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhpcyBpcyBhIHByZXZpZXcsIHN0b3AgZXZlbnRzIGJ1YmJsaW5nIHVwIHNvIHRoZSBlZGl0b3IgcHJldmlldyBpcyBjbGlja2FibGUgKGFuZCBub3QgZHJhZ2dhYmxlKVxuICAgICAgICAkKGVsZW1lbnQpLm9uKCdtb3VzZWRvd24nLCBlID0+IHtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbihldmVudFR5cGUpXG4gIH1cbn1cblxuLy8gcmVnaXN0ZXIgdGhlIGZvbGxvd2luZyBjb250cm9sc1xuY29udHJvbC5yZWdpc3RlcigndGV4dGFyZWEnLCBjb250cm9sVGV4dGFyZWEpXG5jb250cm9sLnJlZ2lzdGVyKCd0ZXh0YXJlYScsIGNvbnRyb2xUZXh0YXJlYSwgJ3RleHRhcmVhJylcbiIsImltcG9ydCBjb250cm9sVGV4dGFyZWEgZnJvbSAnLi90ZXh0YXJlYSdcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscydcblxuLyoqXG4gKiBRdWlsbCByaWNoIHRleHQgZWRpdG9yIGVsZW1lbnRcbiAqIFNlZSBodHRwczovL3F1aWxsanMuY29tLyBmb3IgbW9yZSBpbmZvXG4gKiBAZXh0ZW5kcyBjb250cm9sVGV4dGFyZWFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgY29udHJvbFF1aWxsIGV4dGVuZHMgY29udHJvbFRleHRhcmVhIHtcbiAgLyoqXG4gICAqIGNvbmZpZ3VyZSB0aGUgcXVpbGwgZWRpdG9yIHJlcXVpcmVtZW50c1xuICAgKi9cbiAgY29uZmlndXJlKCkge1xuICAgIGNvbnN0IGRlZmF1bHRDbGFzc0NvbmZpZyA9IHtcbiAgICAgIGpzOiAnaHR0cHM6Ly9jZG4ucXVpbGxqcy5jb20vMS4yLjQvcXVpbGwuanMnLFxuICAgICAgY3NzOiAnaHR0cHM6Ly9jZG4ucXVpbGxqcy5jb20vMS4yLjQvcXVpbGwuc25vdy5jc3MnLFxuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRFZGl0b3JDb25maWcgPSB7XG4gICAgICBtb2R1bGVzOiB7XG4gICAgICAgIHRvb2xiYXI6IFtbeyBoZWFkZXI6IFsxLCAyLCBmYWxzZV0gfV0sIFsnYm9sZCcsICdpdGFsaWMnLCAndW5kZXJsaW5lJ10sIFsnY29kZS1ibG9jayddXSxcbiAgICAgIH0sXG4gICAgICBwbGFjZWhvbGRlcjogdGhpcy5jb25maWcucGxhY2Vob2xkZXIgfHwgJycsXG4gICAgICB0aGVtZTogJ3Nub3cnLFxuICAgIH1cblxuICAgIGNvbnN0IFtjdXN0b21DbGFzc0NvbmZpZywgY3VzdG9tRWRpdG9yQ29uZmlnXSA9IHV0aWxzLnNwbGl0T2JqZWN0KHRoaXMuY2xhc3NDb25maWcsIFsnY3NzJywgJ2pzJ10pXG5cbiAgICAvLyBBbGxvdyBmb3IgY3VzdG9taXphdGlvbiBvZiB0aGUgY29udHJvbFxuICAgIE9iamVjdC5hc3NpZ24odGhpcywge1xuICAgICAgLi4uZGVmYXVsdENsYXNzQ29uZmlnLFxuICAgICAgLi4uY3VzdG9tQ2xhc3NDb25maWcsXG4gICAgfSlcblxuICAgIC8vIEFsbG93IGZvciBjdXN0b21pemF0aW9uIG9mIHRoZSBlZGl0b3JcbiAgICB0aGlzLmVkaXRvckNvbmZpZyA9IHtcbiAgICAgIC4uLmRlZmF1bHRFZGl0b3JDb25maWcsXG4gICAgICAuLi5jdXN0b21FZGl0b3JDb25maWcsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGJ1aWxkIGEgZGl2IERPTSBlbGVtZW50IHRvIGJlIGxhdGVyIHJlcGxhY2VkIHdpdGggdGhlIHF1aWxsIGVkaXRvclxuICAgKiBAcmV0dXJuIHtPYmplY3R9IERPTSBFbGVtZW50IHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZvcm0uXG4gICAqL1xuICBidWlsZCgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBjb25zdCB7IHZhbHVlID0gJycsIC4uLmF0dHJzIH0gPSB0aGlzLmNvbmZpZ1xuICAgIC8vVGV4dGFyZWFzIGRvIG5vdCBoYXZlIGFuIGF0dHJpYnV0ZSAndHlwZSdcbiAgICBkZWxldGUgYXR0cnNbJ3R5cGUnXVxuICAgIHRoaXMuZmllbGQgPSB0aGlzLm1hcmt1cCgnZGl2JywgbnVsbCwgYXR0cnMpXG4gICAgaWYgKHRoaXMuZmllbGQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmb3JtLWNvbnRyb2wnKSkge1xuICAgICAgdGhpcy5maWVsZC5jbGFzc0xpc3QucmVtb3ZlKCdmb3JtLWNvbnRyb2wnKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maWVsZFxuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVuZGVyZWQgaW50byB0aGUgRE9NLCBleGVjdXRlIHRoZSBmb2xsb3dpbmcgY29kZSB0byBpbml0aWFsaXNlIGl0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldnQgLSBldmVudFxuICAgKi9cbiAgb25SZW5kZXIoZXZ0KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmNvbmZpZy52YWx1ZSB8fCAnJ1xuICAgIGNvbnN0IERlbHRhID0gd2luZG93LlF1aWxsLmltcG9ydCgnZGVsdGEnKVxuICAgIHdpbmRvdy5mYkVkaXRvcnMucXVpbGxbdGhpcy5pZF0gPSB7fVxuICAgIGNvbnN0IGVkaXRvciA9IHdpbmRvdy5mYkVkaXRvcnMucXVpbGxbdGhpcy5pZF1cbiAgICBlZGl0b3IuaW5zdGFuY2UgPSBuZXcgd2luZG93LlF1aWxsKHRoaXMuZmllbGQsIHRoaXMuZWRpdG9yQ29uZmlnKVxuICAgIGVkaXRvci5kYXRhID0gbmV3IERlbHRhKClcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGVkaXRvci5pbnN0YW5jZS5zZXRDb250ZW50cyh3aW5kb3cuSlNPTi5wYXJzZSh0aGlzLnBhcnNlZEh0bWwodmFsdWUpKSlcbiAgICB9XG4gICAgZWRpdG9yLmluc3RhbmNlLm9uKCd0ZXh0LWNoYW5nZScsIGZ1bmN0aW9uKGRlbHRhKSB7XG4gICAgICBlZGl0b3IuZGF0YSA9IGVkaXRvci5kYXRhLmNvbXBvc2UoZGVsdGEpXG4gICAgfSlcbiAgICByZXR1cm4gZXZ0XG4gIH1cbn1cblxuLy8gcmVnaXN0ZXIgcXVpbGwgYXMgYSByaWNodGV4dCBjb250cm9sXG5jb250cm9sVGV4dGFyZWEucmVnaXN0ZXIoJ3F1aWxsJywgY29udHJvbFF1aWxsLCAndGV4dGFyZWEnKVxuIiwiaW1wb3J0IGNvbnRyb2xUZXh0YXJlYSBmcm9tICcuL3RleHRhcmVhJ1xuXG4vKipcbiAqIFRpbnlNQ0UgZWRpdG9yIGVsZW1lbnRcbiAqIFNlZSBodHRwczovL3d3dy50aW55bWNlLmNvbS8gZm9yIG1vcmUgaW5mb1xuICpcbiAqIFRvIGN1c3RvbWlzZSB0aGUgb3B0aW9ucyBvbiB0aGlzIGVkaXRvciwgc2ltcGx5IHBhc3MgYW55IHByb3BlcnRpZXMgeW91IHdpc2ggdG8gb3ZlcndyaXRlIGluIHRoZSBjb250cm9sQ29uZmlnIG9wdGlvbiB0byBmb3JtUmVuZGVyXG4gKiBlLmcuIHRoZSBiZWxvdyBleGFtcGxlIHdvdWxkIGRpc2FibGUgdGhlIGFiaWxpdHkgdG8gcGFzdGUgaW1hZ2VzIGFzIGEgYmFzZTY0IGVuY29kZWQgc3JjXG4gKiBgYGBcbiAqIHZhciByZW5kZXJPcHRzID0ge1xuICogICAgY29udHJvbENvbmZpZzoge1xuICogICAgICAndGV4dGFyZWEudGlueW1jZSc6IHtcbiAqICAgICAgICAgcGFzdGVfZGF0YV9pbWFnZXM6IGZhbHNlXG4gKiAgICAgICB9XG4gKiAgICB9XG4gKiB9O1xuICogYGBgXG4gKiBAZXh0ZW5kcyBjb250cm9sVGV4dGFyZWFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgY29udHJvbFRpbnltY2UgZXh0ZW5kcyBjb250cm9sVGV4dGFyZWEge1xuICAvKipcbiAgICogY29uZmlndXJlIHRoZSB0aW55bWNlIGVkaXRvciByZXF1aXJlbWVudHNcbiAgICovXG4gIGNvbmZpZ3VyZSgpIHtcbiAgICB0aGlzLmpzID0gW11cbiAgICBpZiAoIXdpbmRvdy50aW55bWNlKSB7XG4gICAgICB0aGlzLmpzLnB1c2goJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3RpbnltY2UvNC45LjExL3RpbnltY2UubWluLmpzJylcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIGphdmFzY3JpcHQgY29uZmlnXG4gICAgaWYgKHRoaXMuY2xhc3NDb25maWcuanMpIHtcbiAgICAgIGxldCBqcyA9IHRoaXMuY2xhc3NDb25maWcuanNcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShqcykpIHtcbiAgICAgICAganMgPSBuZXcgQXJyYXkoanMpXG4gICAgICB9XG4gICAgICB0aGlzLmpzID0gdGhpcy5qcy5jb25jYXQoanMpXG4gICAgICBkZWxldGUgdGhpcy5jbGFzc0NvbmZpZy5qc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgY3NzIGNvbmZpZ1xuICAgIGlmICh0aGlzLmNsYXNzQ29uZmlnLmNzcykge1xuICAgICAgdGhpcy5jc3MgPSB0aGlzLmNsYXNzQ29uZmlnLmNzc1xuICAgIH1cblxuICAgIC8vIGNvbmZpZ3VyZSB0aGUgdGlueU1DRSBlZGl0b3IgZGVmYXVsdHNcbiAgICB0aGlzLmVkaXRvck9wdGlvbnMgPSB7XG4gICAgICBoZWlnaHQ6IDI1MCxcbiAgICAgIHBhc3RlX2RhdGFfaW1hZ2VzOiB0cnVlLFxuICAgICAgcGx1Z2luczogWydhZHZsaXN0JywgJ2F1dG9saW5rJywgJ2xpc3RzJywgJ2xpbmsnLCAnaW1hZ2UnLCAnY2hhcm1hcCcsICdwcmludCcsICdwcmV2aWV3JywgJ2FuY2hvcicsXG4gICAgICAgICAgICAgICAnc2VhcmNocmVwbGFjZScsICd2aXN1YWxibG9ja3MnLCAnY29kZScsICdmdWxsc2NyZWVuJyxcbiAgICAgICAgICAgICAgICdpbnNlcnRkYXRldGltZScsICdtZWRpYScsICd0YWJsZScsICdjb250ZXh0bWVudScsICdwYXN0ZScsICdjb2RlJ10sXG4gICAgICB0b29sYmFyOlxuICAgICAgICAndW5kbyByZWRvIHwgc3R5bGVzZWxlY3QgfCBib2xkIGl0YWxpYyB8IGFsaWdubGVmdCBhbGlnbmNlbnRlciBhbGlnbnJpZ2h0IGFsaWduanVzdGlmeSB8IGJ1bGxpc3QgbnVtbGlzdCBvdXRkZW50IGluZGVudCB8IGxpbmsgaW1hZ2UgfCB0YWJsZScsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGJ1aWxkIGEgdGV4dGFyZWEgRE9NIGVsZW1lbnQsIHRvIGJlIGxhdGVyIHJlcGxhY2VkIGJ5IHRoZSBUaW55TUNFIGVkaXRvclxuICAgKiBAcmV0dXJuIHtPYmplY3R9IERPTSBFbGVtZW50IHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZvcm0uXG4gICAqL1xuICBidWlsZCgpIHtcbiAgICBjb25zdCB7IHZhbHVlID0gJycsIC4uLmF0dHJzIH0gPSB0aGlzLmNvbmZpZ1xuICAgIC8vVGV4dGFyZWFzIGRvIG5vdCBoYXZlIGFuIGF0dHJpYnV0ZSAndHlwZSdcbiAgICBkZWxldGUgYXR0cnNbJ3R5cGUnXVxuICAgIHRoaXMuZmllbGQgPSB0aGlzLm1hcmt1cCgndGV4dGFyZWEnLCB0aGlzLnBhcnNlZEh0bWwodmFsdWUpLCBhdHRycylcbiAgICAvLyBNYWtlIHRoZSBlZGl0b3IgcmVhZCBvbmx5IGlmIGRpc2FibGVkIGlzIHNldCBvbiB0aGUgdGV4dGFyZWFcbiAgICBpZiAoYXR0cnMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZWRpdG9yT3B0aW9ucy5yZWFkb25seSA9IHRydWVcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmllbGRcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBlbGVtZW50IGlzIHJlbmRlcmVkIGludG8gdGhlIERPTSwgZXhlY3V0ZSB0aGUgZm9sbG93aW5nIGNvZGUgdG8gaW5pdGlhbGlzZSBpdFxuICAgKi9cbiAgb25SZW5kZXIoKSB7XG4gICAgY29uc3Qgb2xkSW5zdCA9IHdpbmRvdy50aW55bWNlLmdldCh0aGlzLmlkKVxuICAgIGlmIChvbGRJbnN0KSB7XG4gICAgICB3aW5kb3cudGlueW1jZS5yZW1vdmUob2xkSW5zdClcbiAgICB9XG5cbiAgICAvLyBkZWZpbmUgb3B0aW9ucyAmIGFsbG93IHRoZW0gdG8gYmUgb3ZlcndyaXR0ZW4gaW4gdGhlIGNsYXNzIGNvbmZpZ1xuICAgIGNvbnN0IG9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHRoaXMuZWRpdG9yT3B0aW9ucywgdGhpcy5jbGFzc0NvbmZpZylcbiAgICBvcHRpb25zLnRhcmdldCA9IHRoaXMuZmllbGRcblxuICAgIC8vUmVtb3ZlIGFueSBkZWZpbmVkIHBsdWdpbnMgZnJvbSB0aGUgbGlzdCBpZiB0aGV5IGhhdmUgYmVlbiByZW1vdmVkIG9yIG1vdmVkIHRvIENvcmUgYXMgcGFydCBvZiBtYWpvciB2ZXJzaW9uIHVwZGF0ZXNcbiAgICBjb25zdCByZW1vdmVkUGx1Z2lucyA9IFtdXG4gICAgaWYgKE51bWJlcih3aW5kb3cudGlueW1jZS5tYWpvclZlcnNpb24pID49IDUpIHtcbiAgICAgIHJlbW92ZWRQbHVnaW5zLnB1c2goJ2NvbnRleHRtZW51JylcbiAgICB9XG4gICAgaWYgKE51bWJlcih3aW5kb3cudGlueW1jZS5tYWpvclZlcnNpb24pID49IDYpIHtcbiAgICAgIHJlbW92ZWRQbHVnaW5zLnB1c2goJ3Bhc3RlJywncHJpbnQnKVxuICAgIH1cbiAgICBvcHRpb25zLnBsdWdpbnMgPSBvcHRpb25zLnBsdWdpbnMuZmlsdGVyKHBsdWdpbiA9PiB7XG4gICAgICByZXR1cm4gKHJlbW92ZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA9PT0gLTEpXG4gICAgfSlcblxuICAgIGNvbnN0IHVzZXJEYXRhID0gdGhpcy5jb25maWcudXNlckRhdGEgPyB0aGlzLnBhcnNlZEh0bWwodGhpcy5jb25maWcudXNlckRhdGFbMF0pIDogdW5kZWZpbmVkXG4gICAgY29uc3QgY29waWVkRGF0YSA9IHdpbmRvdy5sYXN0Rm9ybUJ1aWxkZXJDb3BpZWRUaW55TUNFID8gdGhpcy5wYXJzZWRIdG1sKHdpbmRvdy5sYXN0Rm9ybUJ1aWxkZXJDb3BpZWRUaW55TUNFKSA6IHVuZGVmaW5lZFxuICAgIHdpbmRvdy5sYXN0Rm9ybUJ1aWxkZXJDb3BpZWRUaW55TUNFID0gbnVsbFxuICAgIGNvbnN0IGFmdGVySW5pdCA9IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgICAvLyBTZXQgdXNlckRhdGFcbiAgICAgIGlmIChjb3BpZWREYXRhKSB7XG4gICAgICAgIGluc3RbMF0uc2V0Q29udGVudChjb3BpZWREYXRhKVxuICAgICAgfSBlbHNlIGlmICh1c2VyRGF0YSkge1xuICAgICAgICBpbnN0WzBdLnNldENvbnRlbnQodXNlckRhdGEpXG4gICAgICB9XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAvLyBpbml0aWFsaXNlIHRoZSBlZGl0b3Igd2l0aGluIGEgdGltZW91dCBzbyB0aGF0IHRoZSBtYWluIHRocmVhZCBjYW4gY29udGludWUgd2hpbGUgdGlueW1jZSBpbml0aWFsaXNlc1xuICAgICAgd2luZG93LnRpbnltY2UuaW5pdChvcHRpb25zKS50aGVuKGFmdGVySW5pdClcbiAgICB9LCAwKVxuICB9XG59XG5cbi8vIHJlZ2lzdGVyIHRpbnltY2UgYXMgYSByaWNodGV4dCBjb250cm9sXG5jb250cm9sVGV4dGFyZWEucmVnaXN0ZXIoJ3RpbnltY2UnLCBjb250cm9sVGlueW1jZSwgJ3RleHRhcmVhJylcbiIsImltcG9ydCBtaTE4biBmcm9tICdtaTE4bidcbmltcG9ydCBjb250cm9sIGZyb20gJy4vY29udHJvbCdcbmltcG9ydCBjb250cm9sQ3VzdG9tIGZyb20gJy4vY29udHJvbC9jdXN0b20nXG5cbi8qKlxuICogY3VzdG9tQ29udHJvbHMgc2VydmVzIGFzIGEgcmVnaXN0ZXIgZm9yIHR3byB0eXBlcyBvZiBjdXN0b20gZmllbGRzIHN1cHBvcnRlZCBieSBmb3JtQnVpbGRlclxuICogIC0gQ3VzdG9tIGNvbnRyb2xzIGRlZmluZWQgYnkgYSB0ZW1wbGF0ZVxuICogIC0gQ3VzdG9tIGNvbnRyb2wgZGVmaW5lZCBieSBhIGZpZWxkIGRlZmluaXRpb24gb25seVxuICpcbiAqICBUaGUgY29kZSB0YWtlcyB0d28gcGF0aHNcbiAqICAgLSBDdXN0b20gY29udHJvbHMgd2l0aCBhIHRlbXBsYXRlIHdpbGwgYmUgYSBwcm94eSBmdW5jdGlvbiBjcmVhdGVkIHRvIGdlbmVyYXRlIGEgY29udHJvbEN1c3RvbSBjbGFzc1xuICogICAtIEZpZWxkcyB3aXRob3V0IHRlbXBsYXRlcyB3aWxsIG1hcCB0byB0aGVpciBkZWZpbmVkIHR5cGUvc3VidHlwZSBjbGFzc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBjdXN0b21Db250cm9scyB7XG4gIGNvbnN0cnVjdG9yKHRlbXBsYXRlcyA9IHt9LCBmaWVsZHMgPSBbXSkge1xuICAgIHRoaXMuY3VzdG9tUmVnaXN0ZXIgPSB7fVxuICAgIHRoaXMudGVtcGxhdGVDb250cm9sUmVnaXN0ZXIgPSB7fVxuICAgIHRoaXMuZGVmID0ge1xuICAgICAgaWNvbjoge30sXG4gICAgICBpMThuOiB7fSxcbiAgICB9XG4gICAgdGhpcy5yZWdpc3Rlcih0ZW1wbGF0ZXMsIGZpZWxkcylcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgcmVnaXN0ZXIgbWV0aG9kIHRvIGFsbG93IHBhc3NpbmcgJ3RlbXBsYXRlcycgY29uZmlndXJhdGlvbiBkYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZXMgYW4gb2JqZWN0L2hhc2ggb2YgdGVtcGxhdGUgZGF0YSBhcyBkZWZpbmVkIGh0dHBzOi8vZm9ybWJ1aWxkZXIub25saW5lL2RvY3MvZm9ybUJ1aWxkZXIvb3B0aW9ucy90ZW1wbGF0ZXMvXG4gICAqIEBwYXJhbSB7QXJyYXl9IGZpZWxkc1xuICAgKi9cbiAgcmVnaXN0ZXIodGVtcGxhdGVzID0ge30sIGZpZWxkcyA9IFtdKSB7XG4gICAgLy8gcHJlcGFyZSBpMThuIGxvY2FsZSBkZWZpbml0aW9uXG4gICAgY29uc3QgbG9jYWxlID0gbWkxOG4ubG9jYWxlXG4gICAgaWYgKCF0aGlzLmRlZi5pMThuW2xvY2FsZV0pIHtcbiAgICAgIHRoaXMuZGVmLmkxOG5bbG9jYWxlXSA9IHt9XG4gICAgfVxuXG4gICAgY29uc3QgX3RoaXMgPSB0aGlzXG4gICAgT2JqZWN0LmtleXModGVtcGxhdGVzKS5mb3JFYWNoKHRlbXBsYXRlTmFtZSA9PiB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZUNvbnRyb2wgPSBmdW5jdGlvbihjb25maWcsIHByZXZpZXcpIHtcbiAgICAgICAgdGhpcy5jdXN0b21Db250cm9sID0gbmV3IGNvbnRyb2xDdXN0b20oY29uZmlnLCBwcmV2aWV3LCB0ZW1wbGF0ZXNbdGVtcGxhdGVOYW1lXSlcblxuICAgICAgICAvKipcbiAgICAgICAgICogYnVpbGQgYSBjdXN0b20gY29udHJvbCBkZWZpbmVkIGluIHRoZSB0ZW1wbGF0ZXMgb3B0aW9uXG4gICAgICAgICAqIEByZXR1cm4ge3tmaWVsZDogYW55LCBsYXlvdXQ6IGFueX19IERPTSBFbGVtZW50IHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZvcm0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJ1aWxkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tQ29udHJvbC5idWlsZCgpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uID0gZnVuY3Rpb24oZXZlbnRUeXBlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tQ29udHJvbC5vbihldmVudFR5cGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRlbXBsYXRlQ29udHJvbC5kZWZpbml0aW9uID0ge31cbiAgICAgIHRlbXBsYXRlQ29udHJvbC5sYWJlbCA9IHR5cGUgPT4gX3RoaXMubGFiZWwodHlwZSlcbiAgICAgIHRlbXBsYXRlQ29udHJvbC5pY29uID0gdHlwZSA9PiBfdGhpcy5pY29uKHR5cGUpXG4gICAgICB0aGlzLnRlbXBsYXRlQ29udHJvbFJlZ2lzdGVyW3RlbXBsYXRlTmFtZV0gPSB0ZW1wbGF0ZUNvbnRyb2xcbiAgICB9KVxuXG4gICAgLy8gYnVpbGQgdGhlIGNvbnRyb2wgbGFiZWwgJiBpY29uIGRlZmluaXRpb25zXG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBmaWVsZHMpIHtcbiAgICAgIGxldCB0eXBlID0gZmllbGQudHlwZVxuICAgICAgZmllbGQuYXR0cnMgPSBmaWVsZC5hdHRycyB8fCB7fVxuICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIGlmICghZmllbGQuYXR0cnMudHlwZSkge1xuICAgICAgICAgIGNvbnRyb2wuZXJyb3IoJ0lnbm9yaW5nIGludmFsaWQgY3VzdG9tIGZpZWxkIGRlZmluaXRpb24uIFBsZWFzZSBzcGVjaWZ5IGEgdHlwZSBwcm9wZXJ0eS4nKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgdHlwZSA9IGZpZWxkLmF0dHJzLnR5cGVcbiAgICAgIH1cblxuICAgICAgLy8gZGVmYXVsdCBpY29uICYgbGFiZWwgbG9va3VwXG4gICAgICBsZXQgbG9va3VwID0gZmllbGQuc3VidHlwZSB8fCB0eXBlXG5cbiAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIHRlbXBsYXRlIGRlZmluZWQgZm9yIHRoaXMgdHlwZSwgY2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIHRoaXMgdHlwZS9zdWJ0eXBlIHJlZ2lzdGVyZWRcbiAgICAgIGlmICghdGVtcGxhdGVzW3R5cGVdKSB7XG4gICAgICAgIC8vIGNoZWNrIHRoYXQgdGhpcyB0eXBlIGlzIGFscmVhZHkgcmVnaXN0ZXJlZFxuICAgICAgICBjb25zdCBjb250cm9sQ2xhc3MgPSBjb250cm9sLmdldENsYXNzKHR5cGUsIGZpZWxkLnN1YnR5cGUpXG4gICAgICAgIGlmICghY29udHJvbENsYXNzKSB7XG4gICAgICAgICAgc3VwZXIuZXJyb3IoXG4gICAgICAgICAgICAnRXJyb3Igd2hpbGUgcmVnaXN0ZXJpbmcgY3VzdG9tIGZpZWxkOiAnICtcbiAgICAgICAgICAgIHR5cGUgK1xuICAgICAgICAgICAgKGZpZWxkLnN1YnR5cGUgPyAnOicgKyBmaWVsZC5zdWJ0eXBlIDogJycpICtcbiAgICAgICAgICAgICcuIFVuYWJsZSB0byBmaW5kIGFueSBleGlzdGluZyBkZWZpbmVkIGNvbnRyb2wgb3IgdGVtcGxhdGUgZm9yIHJlbmRlcmluZy4nLFxuICAgICAgICAgIClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgYSByYW5kb20ga2V5ICYgbWFwIHRoZSBzZXR0aW5ncyBhZ2FpbnN0IGl0XG4gICAgICAgIGxvb2t1cCA9IGZpZWxkLmRhdGF0eXBlID8gZmllbGQuZGF0YXR5cGUgOiBgJHt0eXBlfS0ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDkwMDAgKyAxMDAwKX1gXG5cbiAgICAgICAgdGhpcy5jdXN0b21SZWdpc3Rlcltsb29rdXBdID0galF1ZXJ5LmV4dGVuZChmaWVsZCwge1xuICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgY2xhc3M6IGNvbnRyb2xDbGFzcyxcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vTWFwIHRoZSBmaWVsZCBkZWZpbml0aW9uIGludG8gdGhlIHRlbXBsYXRlZCBjb250cm9sIGNsYXNzXG4gICAgICAgIGNvbnN0IGNvbnRyb2xDbGFzcyA9IHRoaXMudGVtcGxhdGVDb250cm9sUmVnaXN0ZXJbdHlwZV1cbiAgICAgICAgY29udHJvbENsYXNzLmRlZmluaXRpb24gPSBmaWVsZFxuICAgICAgICB0aGlzLmN1c3RvbVJlZ2lzdGVyW2xvb2t1cF0gPSBqUXVlcnkuZXh0ZW5kKGZpZWxkLCB7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICBjbGFzczogY29udHJvbENsYXNzLFxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICAvLyBtYXAgbGFiZWwgJiBpY29uXG4gICAgICB0aGlzLmRlZi5pMThuW2xvY2FsZV1bbG9va3VwXSA9IGZpZWxkLmxhYmVsXG4gICAgICB0aGlzLmRlZi5pY29uW2xvb2t1cF0gPSBmaWVsZC5pY29uXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSB0cmFuc2xhdGVkIGNvbnRyb2wgbGFiZWwgZm9yIGEgY29udHJvbCB0eXBlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gdHJhbnNsYXRlZCBjb250cm9sXG4gICAqL1xuICAgbGFiZWwodHlwZSkge1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIGEgdHJhbnNsYXRlZCBzdHJpbmdcbiAgICAgKiBCeSBkZWZhdWx0IGxvb2tzIGZvciB0cmFuc2xhdGlvbnMgZGVmaW5lZCBhZ2FpbnN0IHRoZSBjbGFzcyAoZm9yIHBsdWdpbiBjb250cm9scylcbiAgICAgKiBFeHBlY3RzIHtsb2NhbGUxOiB7dHlwZTogbGFiZWx9LCBsb2NhbGUyOiB7dHlwZTogbGFiZWx9fSwgb3Ige2RlZmF1bHQ6IGxhYmVsfSwgb3Ige2xvY2FsMTogbGFiZWwsIGxvY2FsMjogbGFiZWwyfVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBsb29rdXAgc3RyaW5nIHRvIHJldHJpZXZlIHRoZSBsYWJlbCAvIHRyYW5zbGF0ZWQgc3RyaW5nIGZvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fE51bWJlcnxTdHJpbmd9IFthcmdzXSAtIHN0cmluZyBvciBrZXkvdmFsIHBhaXJzIGZvciBzdHJpbmcgbG9va3VwcyB3aXRoIHZhcmlhYmxlc1xuICAgICAqIEByZXR1cm4ge1N0cmluZ30gdGhlIHRyYW5zbGF0ZWQgbGFiZWxcbiAgICAgKi9cbiAgICAgIGNvbnN0IGRlZiA9IHRoaXMuZGVmaW5pdGlvblxuICAgICAgbGV0IGkxOG4gPSBkZWYuaTE4biB8fCB7fVxuICAgICAgY29uc3QgbG9jYWxlID0gbWkxOG4ubG9jYWxlXG4gICAgICBpMThuID0gaTE4bltsb2NhbGVdIHx8IGkxOG4uZGVmYXVsdCB8fCBpMThuXG4gICAgICBjb25zdCBsb29rdXBDYW1lbCA9IGNvbnRyb2wuY2FtZWxDYXNlKHR5cGUpXG5cbiAgICAgIC8vIGlmIHRyYW5zbGF0aW9uIGlzIGRlZmluZWQgaW4gdGhlIGNvbnRyb2wsIHJldHVybiBpdFxuICAgICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgaTE4biA9PSAnb2JqZWN0JyA/IGkxOG5bbG9va3VwQ2FtZWxdIHx8IGkxOG5bdHlwZV0gOiBpMThuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvdGhlcndpc2UgY2hlY2sgdGhlIG1pMThuIG9iamVjdCAtIGFsbG93IGZvciBtYXBwaW5nIGEgbG9va3VwIHRvIGEgY3VzdG9tIG1pMThuIGxvb2t1cFxuICAgICAgICBsZXQgbWFwcGVkID0gZGVmLm1pMThuXG4gICAgICAgIGlmICh0eXBlb2YgbWFwcGVkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIG1hcHBlZCA9IG1hcHBlZFtsb29rdXBDYW1lbF0gfHwgbWFwcGVkW3R5cGVdXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtYXBwZWQpIHtcbiAgICAgICAgICBtYXBwZWQgPSBsb29rdXBDYW1lbFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaTE4bi5nZXQobWFwcGVkKVxuICAgICAgfVxuICB9XG5cbiAgZ2V0IGRlZmluaXRpb24oKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGljb24gZm9yIGEgY29udHJvbCB0eXBlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gaWNvblxuICAgKi9cbiAgaWNvbih0eXBlKSB7XG4gICAgLy8gQHRvZG8gLSBzdXBwb3J0IGZvciBgJHtjc3NfcHJlZml4X3RleHR9JHthdHRyLm5hbWV9YCAtIGlzIHRoaXMgZm9yIGlucHV0U2V0cz8gRG9lc250IGxvb2sgbGlrZSBpdCBidXQgY2FuJ3Qgc2VlIGFueXRoaW5nIGVsc2UgdGhhdCBzZXRzIGF0dHIubmFtZT9cbiAgICAvLyBodHRwczovL2Zvcm1idWlsZGVyLm9ubGluZS9kb2NzL2Zvcm1CdWlsZGVyL29wdGlvbnMvaW5wdXRTZXRzL1xuICAgIGNvbnN0IGRlZiA9IHRoaXMuZGVmaW5pdGlvblxuICAgIGlmIChkZWYgJiYgdHlwZW9mIGRlZi5pY29uID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGRlZi5pY29uW3R5cGVdXG4gICAgfVxuICAgIHJldHVybiBkZWYuaWNvblxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW55IGN1c3RvbSBmaWVsZHMgdGhhdCBtYXAgdG8gYW4gZXhpc3RpbmcgdHlwZS9zdWJ0eXBlIGNvbWJpbmF0aW9uXG4gICAqIEBwYXJhbSAge3N0cmluZ3xmYWxzZX0gdHlwZSBvcHRpb25hbCB0eXBlIG9mIGNvbnRyb2wgd2Ugd2FudCB0byBsb29rIHVwXG4gICAqIHN1YnR5cGVzIG9mLiBJZiBub3Qgc3BlY2lmaWVkIHdpbGwgcmV0dXJuIGFsbCB0eXBlc1xuICAgKiBAcmV0dXJuIHtBcnJheXxmdW5jdGlvbn0gcmVnaXN0ZXJlZCBjdXN0b20gbG9va3VwIGtleXNcbiAgICovXG4gIGdldFJlZ2lzdGVyZWQodHlwZSA9IGZhbHNlKSB7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlQ29udHJvbFJlZ2lzdGVyW3R5cGVdID8/IHVuZGVmaW5lZFxuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jdXN0b21SZWdpc3RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgY2xhc3MgZm9yIGEgc3BlY2lmaWVkIGNvbnRyb2wgdHlwZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSB0eXBlIG9mIGNvbnRyb2wgd2UgYXJlIGxvb2tpbmcgdXBcbiAgICogYSBjbGFzcyBtYXBwZWQgdG8gdGhpcyBzdWJ0eXBlLiBJZiBub25lIGZvdW5kLCBmYWxsIGJhY2sgdG8gdGhlIHR5cGUuXG4gICAqIEByZXR1cm4ge0NsYXNzfSBjb250cm9sIHN1YmNsYXNzIGFzIGRlZmluZWQgaW4gdGhlIGNhbGwgdG8gcmVnaXN0ZXJcbiAgICovXG4gICBnZXRDbGFzcyh0eXBlKSB7XG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGVDb250cm9sUmVnaXN0ZXJbdHlwZV0gPz8gdW5kZWZpbmVkXG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGNsYXNzIGZvciBhIHNwZWNpZmllZCBjb250cm9sIHR5cGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvb2t1cCAtIGN1c3RvbSBjb250cm9sIGxvb2t1cCB0byBjaGVjayBmb3JcbiAgICogQHJldHVybiB7Q2xhc3N9IGNvbnRyb2wgc3ViY2xhc3MgYXMgZGVmaW5lZCBpbiB0aGUgY2FsbCB0byByZWdpc3RlclxuICAgKi9cbiAgbG9va3VwKGxvb2t1cCkge1xuICAgIHJldHVybiB0aGlzLmN1c3RvbVJlZ2lzdGVyW2xvb2t1cF1cbiAgfVxufSIsImV4cG9ydCBjb25zdCBpbnN0YW5jZURvbSA9IHt9XG5leHBvcnQgY29uc3QgZGVmYXVsdFN1YnR5cGVzID0ge1xuICB0ZXh0OiBbJ3RleHQnLCAncGFzc3dvcmQnLCAnZW1haWwnLCAnY29sb3InLCAndGVsJ10sXG4gIGhlYWRlcjogWydoMScsICdoMicsICdoMyddLFxuICBidXR0b246IFsnYnV0dG9uJywgJ3N1Ym1pdCcsICdyZXNldCddLFxuICBwYXJhZ3JhcGg6IFsncCcsICdhZGRyZXNzJywgJ2Jsb2NrcXVvdGUnLCAnY2FudmFzJywgJ291dHB1dCddLFxuICB0ZXh0YXJlYTogWyd0ZXh0YXJlYScsICdxdWlsbCddLFxufVxuXG4vKipcbiAqIFJlbW92ZXMgYSBkb20gbm9kZVxuICogQHBhcmFtIHtOb2RlfSBlbGVtZW50XG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmUgPSBlbGVtZW50ID0+IHtcbiAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KVxuICB9XG59XG5cblxuLyoqXG4gKiBVdGlsIHRvIHJlbW92ZSBjb250ZW50cyBvZiBET00gTm9kZVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBlbGVtZW50IHdpdGggaXRzIGNoaWxkcmVuIHJlbW92ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGVtcHR5ID0gZWxlbWVudCA9PiB7XG4gIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQuZmlyc3RDaGlsZClcbiAgfVxuICByZXR1cm4gZWxlbWVudFxufVxuXG4vKipcbiAqIEhpZGUgb3Igc2hvdyBhbiBBcnJheXxIVE1MQ29sbGVjdGlvbiBvZiBlbGVtZW50cyBjb250YWluaW5nIGEgY2FzZS1pbnNlbnNpdGl2ZSBzdHJpbmdcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50W118SFRNTENvbGxlY3Rpb259ICAgZWxlbXNcbiAqIEBwYXJhbSAge3N0cmluZ30gIHRlcm0gIG1hdGNoIHRleHRDb250ZW50IHRvIHRoaXMgdGVybVxuICogQHBhcmFtICB7Ym9vbGVhbn0gW3Nob3c9dHJ1ZV0gc2hvdyBvciBoaWRlIGVsZW1lbnRzXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudFtdfSAgICAgICAgIGZpbHRlcmVkIGVsZW1lbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBmaWx0ZXIgPSAoZWxlbXMsIHRlcm0sIHNob3cgPSB0cnVlKSA9PiB7XG4gIGNvbnN0IGZpbHRlcmVkRWxlbXMgPSBbXVxuICBsZXQgdG9nZ2xlID0gWydub25lJywgJ2Jsb2NrJ11cblxuICBpZiAoc2hvdykge1xuICAgIHRvZ2dsZSA9IHRvZ2dsZS5yZXZlcnNlKClcbiAgfVxuXG4gIGZvciAobGV0IGkgPSBlbGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IHR4dCA9IGVsZW1zW2ldLnRleHRDb250ZW50LnRvTG93ZXJDYXNlKClcbiAgICBpZiAodHh0LmluZGV4T2YodGVybS50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpIHtcbiAgICAgIGVsZW1zW2ldLnN0eWxlLmRpc3BsYXkgPSB0b2dnbGVbMF1cbiAgICAgIGZpbHRlcmVkRWxlbXMucHVzaChlbGVtc1tpXSlcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbXNbaV0uc3R5bGUuZGlzcGxheSA9IHRvZ2dsZVsxXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWx0ZXJlZEVsZW1zXG59XG5cbmV4cG9ydCBjb25zdCBvcHRpb25GaWVsZHMgPSBbJ3NlbGVjdCcsICdjaGVja2JveC1ncm91cCcsICdjaGVja2JveCcsICdyYWRpby1ncm91cCcsICdhdXRvY29tcGxldGUnXVxuXG5leHBvcnQgY29uc3Qgb3B0aW9uRmllbGRzUmVnRXggPSBuZXcgUmVnRXhwKGAoJHtvcHRpb25GaWVsZHMuam9pbignfCcpfSlgKVxuLyoqXG4gKiBEb20gY2xhc3MuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvbSB7XG4gIC8qKlxuICAgKiBAdHlwZSB7SFRNTFVMaXN0RWxlbWVudH1cbiAgICovXG4gIHN0YWdlXG4gIC8qKlxuICAgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBjb250cm9sc1xuICAvKipcbiAgICogQHR5cGUge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgZm9ybUFjdGlvbnNcbiAgLyoqXG4gICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGVkaXRvcldyYXBcblxuICAvKipcbiAgICogU2V0IGRlZmF1bHRzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtSURcbiAgICogQHJldHVybiB7RG9tfSBEb20gSW5zdGFuY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKGZvcm1JRCkge1xuICAgIHRoaXMub3B0aW9uRmllbGRzID0gb3B0aW9uRmllbGRzXG4gICAgdGhpcy5vcHRpb25GaWVsZHNSZWdFeCA9IG9wdGlvbkZpZWxkc1JlZ0V4XG5cbiAgICB0aGlzLnN1YnR5cGVzID0gZGVmYXVsdFN1YnR5cGVzXG5cbiAgICAvKipcbiAgICAgKiBVdGlsIHRvIHJlbW92ZSBjb250ZW50cyBvZiBET00gT2JqZWN0XG4gICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gZWxlbWVudCB3aXRoIGl0cyBjaGlsZHJlbiByZW1vdmVkXG4gICAgICovXG4gICAgdGhpcy5lbXB0eSA9IGVtcHR5XG5cbiAgICAvKipcbiAgICAgKiBIaWRlIG9yIHNob3cgYW4gQXJyYXl8SFRNTENvbGxlY3Rpb24gb2YgZWxlbWVudHMgY29udGFpbmluZyBhIGNhc2UtaW5zZW5zaXRpdmUgc3RyaW5nXG4gICAgICogQHBhcmFtICB7SFRNTEVsZW1lbnRbXXxIVE1MQ29sbGVjdGlvbn0gICBlbGVtc1xuICAgICAqIEBwYXJhbSAge3N0cmluZ30gIHRlcm0gIG1hdGNoIHRleHRDb250ZW50IHRvIHRoaXMgdGVybVxuICAgICAqIEBwYXJhbSAge2Jvb2xlYW59IHNob3cgIG9yIGhpZGUgZWxlbWVudHNcbiAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudFtdfSAgICAgICAgIGZpbHRlcmVkIGVsZW1lbnRzXG4gICAgICovXG4gICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXJcblxuICAgIGluc3RhbmNlRG9tW2Zvcm1JRF0gPSB0aGlzXG4gICAgcmV0dXJuIGluc3RhbmNlRG9tW2Zvcm1JRF1cbiAgfVxuXG4gIC8qKlxuICAgKiBAY2FsbGJhY2sgb25SZW5kZXJDYWxsYmFja1xuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBldnQgLSByZW5kZXJlZCBub2RlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBEbyBzb21ldGhpbmcgd2hlbiBhIHNwZWNpZmljIGRvbSBlbGVtZW50IHJlbmRlcnNcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge29uUmVuZGVyQ2FsbGJhY2t9IGNiXG4gICAqL1xuICBvblJlbmRlcihub2RlLCBjYikge1xuICAgIGlmICghbm9kZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMub25SZW5kZXIobm9kZSwgY2IpKVxuICAgIH0gZWxzZSB7XG4gICAgICBjYihub2RlKVxuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBGb3JtIEJ1aWxkZXIgZXZlbnRzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHZhcmlvdXMgZXZlbnRzIHRvIGJlIHRyaWdnZXJcbiAqL1xuXG4vKipcbiAqIFdyYXBwZXIgdG8gZGVhbCB3aXRoIGllMTFcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcbiAqIEByZXR1cm4ge0V2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiBjcmVhdGVOZXdFdmVudChldmVudE5hbWUpIHtcbiAgbGV0IGV2ZW50XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIC0gaGlzdG9yaWNhbCBJbnRlcm5ldEV4cGxvcmVyIG9ubHkgKi9cbiAgaWYgKHR5cGVvZiBFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50ID0gbmV3IEV2ZW50KGV2ZW50TmFtZSlcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpXG4gICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSwgdHJ1ZSwgdHJ1ZSlcbiAgfVxuXG4gIHJldHVybiBldmVudFxufVxuXG5jb25zdCBldmVudHMgPSB7XG4gIGxvYWRlZDogY3JlYXRlTmV3RXZlbnQoJ2xvYWRlZCcpLFxuICB2aWV3RGF0YTogY3JlYXRlTmV3RXZlbnQoJ3ZpZXdEYXRhJyksXG4gIHVzZXJEZWNsaW5lZDogY3JlYXRlTmV3RXZlbnQoJ3VzZXJEZWNsaW5lZCcpLFxuICBtb2RhbENsb3NlZDogY3JlYXRlTmV3RXZlbnQoJ21vZGFsQ2xvc2VkJyksXG4gIG1vZGFsT3BlbmVkOiBjcmVhdGVOZXdFdmVudCgnbW9kYWxPcGVuZWQnKSxcbiAgZm9ybVNhdmVkOiBjcmVhdGVOZXdFdmVudCgnZm9ybVNhdmVkJyksXG4gIGZpZWxkQWRkZWQ6IGNyZWF0ZU5ld0V2ZW50KCdmaWVsZEFkZGVkJyksXG4gIGZpZWxkUmVtb3ZlZDogY3JlYXRlTmV3RXZlbnQoJ2ZpZWxkUmVtb3ZlZCcpLFxuICBmaWVsZFJlbmRlcmVkOiBjcmVhdGVOZXdFdmVudCgnZmllbGRSZW5kZXJlZCcpLFxuICBmaWVsZEVkaXRPcGVuZWQ6IGNyZWF0ZU5ld0V2ZW50KCdmaWVsZEVkaXRPcGVuZWQnKSxcbiAgZmllbGRFZGl0Q2xvc2VkOiBjcmVhdGVOZXdFdmVudCgnZmllbGRFZGl0Q2xvc2VkJyksXG4gIHN0YWdlRW1wdGllZDogY3JlYXRlTmV3RXZlbnQoJ3N0YWdlRW1wdGllZCcpLFxufVxuXG5leHBvcnQgZGVmYXVsdCBldmVudHNcbiIsIi8vIExBWU9VVC5KU1xuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgeyBnZXRBbGxHcmlkUmVsYXRlZENsYXNzZXMgfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IGNvbnRyb2wgZnJvbSAnLi9jb250cm9sJ1xuXG5jb25zdCBwcm9jZXNzQ2xhc3NOYW1lID0gKGRhdGEsIGZpZWxkKSA9PiB7XG4gIC8vIHdyYXAgdGhlIG91dHB1dCBpbiBhIGZvcm0tZ3JvdXAgZGl2ICYgcmV0dXJuXG4gIGxldCBjbGFzc05hbWUgPSBkYXRhLmlkID8gYGZvcm1idWlsZGVyLSR7ZGF0YS50eXBlfSBmb3JtLWdyb3VwIGZpZWxkLSR7ZGF0YS5pZH1gIDogJydcblxuICBpZiAoZGF0YS5jbGFzc05hbWUpIHtcbiAgICAvLyBMaWZ0IGFueSBjb2wtIGFuZCByb3ctIHR5cGUgY2xhc3MgdG8gdGhlIGZvcm0tZ3JvdXAgd3JhcHBlci4gVGhlIHJvdy0gY2xhc3MgZGVub3RlcyB0aGUgcm93IGdyb3VwIGl0IHNob3VsZCBnbyB0b1xuICAgIGNvbnN0IGNsYXNzZXMgPSBnZXRBbGxHcmlkUmVsYXRlZENsYXNzZXMoZGF0YS5jbGFzc05hbWUpXG5cbiAgICBpZiAoY2xhc3NlcyAmJiBjbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNsYXNzTmFtZSArPSBgICR7Y2xhc3Nlcy5qb2luKCcgJyl9YFxuXG4gICAgICAvLyBOb3cgdGhhdCB0aGUgcm93LSAmIGNvbC0gdHlwZXMgd2VyZSBsaWZ0ZWQsIHJlbW92ZSBmcm9tIHRoZSBhY3R1YWwgaW5wdXQgZmllbGQgYW5kIGFueSBjaGlsZCBlbGVtZW50c1xuICAgICAgLy9maWVsZCBtYXkgYmUgYSBzaW5nbGUgZWxlbWVudCwgZG9tIGZyYWdtZW50LCBvciBhbiBhcnJheSBvZiBlbGVtZW50c1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGZpZWxkKSkge1xuICAgICAgICBmaWVsZCA9IFtmaWVsZF1cbiAgICAgIH1cbiAgICAgIGZpZWxkLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmNsYXNzTGlzdCkge1xuICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzKVxuICAgICAgICB9XG4gICAgICAgIGl0ZW0ucXVlcnlTZWxlY3RvckFsbCgnW2NsYXNzKj1yb3ctXSxbY2xhc3MqPWNvbC1dJykuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNsYXNzTmFtZVxufVxuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIGNvbnRyb2xsaW5nIHRoZSBsYXlvdXQgb2YgZWFjaCAncm93JyBvbiB0aGUgZm9ybVxuICogQ2FuIGJlIGV4dGVuZGVkICYgY3VzdG9taXNlZCB3aXRoIHRoZSBuZXcgb2JqZWN0IGJlaW5nIHBhc3NlZCB0byBGb3JtUmVuZGVyIGFzIHRoZSBuZXcgbGF5b3V0IG9iamVjdFxuICogQ29udHJvbHMgdGhpbmdzIGxpa2UgdGhlIGxhYmVsLCBoZWxwIHRleHQsIGFuZCBob3cgdGhleSBmaXQgdG9nZXRoZXIgd2l0aCB0aGUgY29udHJvbCBpdHNlbGZcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgbGF5b3V0IHtcbiAgLyoqXG4gICAqIFByZXBhcmUgdGhlIHRlbXBsYXRlcyBmb3IgbGF5b3V0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZXMgb2JqZWN0IGNvbnRhaW5pbmcgY3VzdG9tIG9yIG92ZXJ3cml0ZSB0ZW1wbGF0ZXNcbiAgICogQHBhcmFtIHtCb29sZWFufSBbcHJldmlldz1mYWxzZV0gLSBhcmUgd2UgcmVuZGVyaW5nIGEgcHJldmlldyBmb3IgdGhlIGZvcm1CdWlsZGVyIHN0YWdlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2Rpc2FibGVIVE1MTGFiZWxzPWZhbHNlXSAtIGRvIHdlIHJlbmRlciBsYWJlbHMgYXMgSFRNTCBvciBwbGFpbiB0ZXh0XG4gICAqIEBwYXJhbSB7QXJyYXl9IFtjb250cm9sQ29uZmlnPXt9XSAtIGFiaWxpdHkgZm9yIGNvbnRyb2xzIHRvIGhhdmUgdGhlaXIgb3duIGNvbmZpZ3VyYXRpb24gLyBvcHRpb25zIG9mIHRoZSBmb3JtYXQgY29udHJvbCBpZGVudGlmaWVyICh0eXBlLCBvciB0eXBlLnN1YnR5cGUpOiB7b3B0aW9uc31cbiAgICovXG4gIGNvbnN0cnVjdG9yKHRlbXBsYXRlcywgcHJldmlldyA9IGZhbHNlLCBkaXNhYmxlSFRNTExhYmVscyA9IGZhbHNlLCBjb250cm9sQ29uZmlnID0ge30pIHtcbiAgICB0aGlzLnByZXZpZXcgPSBwcmV2aWV3ID8/IGZhbHNlXG4gICAgdGhpcy5kaXNhYmxlSFRNTExhYmVscyA9IGRpc2FibGVIVE1MTGFiZWxzID8/IGZhbHNlXG4gICAgdGhpcy5jb250cm9sQ29uZmlnID0gY29udHJvbENvbmZpZyA/PyB7fVxuXG4gICAgLy8gc3VwcG9ydGVkIHRlbXBsYXRlcyBmb3Igb3V0cHV0dGluZyBhIGZpZWxkXG4gICAgLy8gcHJlZmVycmVkIGxheW91dCB0ZW1wbGF0ZSBjYW4gYmUgaW5kaWNhdGVkIGJ5IHNwZWNpZnlpbmcgYSAnbGF5b3V0JyBpbiB0aGUgcmV0dXJuIG9iamVjdCBvZiBjb250cm9sOjpidWlsZFxuICAgIHRoaXMudGVtcGxhdGVzID0ge1xuICAgICAgbGFiZWw6IG51bGwsIC8vIGNhbiBiZSBvdmVycmlkZGVuIHdpdGggYSBmdW5jdGlvbihsYWJlbERPTUVsZW1lbnRzLCBkYXRhKSB0byBnZW5lcmF0ZSB0aGUgbGFiZWwgZWxlbWVudCAtIHJldHVybnMgYSBET00gZWxlbWVudFxuICAgICAgaGVscDogbnVsbCwgLy8gY2FuIGJlIG92ZXJyaWRkZW4gd2l0aCBhIGZ1bmN0aW9uKGhlbHBUZXh0LCBkYXRhKSB0byBnZW5lcmF0ZSB0aGUgaGVscCBlbGVtZW50IC0gcmV0dXJucyBhIERPTSBlbGVtZW50XG4gICAgICBkZWZhdWx0OiAoZmllbGQsIGxhYmVsLCBoZWxwLCBkYXRhKSA9PiB7XG4gICAgICAgIC8vIGFwcGVuZCBoZWxwIGludG8gdGhlIGxhYmVsXG4gICAgICAgIGlmIChoZWxwKSB7XG4gICAgICAgICAgbGFiZWwuYXBwZW5kQ2hpbGQoaGVscClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm1hcmt1cCgnZGl2JywgW2xhYmVsLCBmaWVsZF0sIHtcbiAgICAgICAgICBjbGFzc05hbWU6IHByb2Nlc3NDbGFzc05hbWUoZGF0YSwgZmllbGQpLFxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG5vTGFiZWw6IChmaWVsZCwgbGFiZWwsIGhlbHAsIGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFya3VwKCdkaXYnLCBmaWVsZCwge1xuICAgICAgICAgIGNsYXNzTmFtZTogcHJvY2Vzc0NsYXNzTmFtZShkYXRhLCBmaWVsZCksXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgaGlkZGVuOiBmaWVsZCA9PiB7XG4gICAgICAgIC8vIG5vIHdyYXBwZXIgYW55IGFueSB2aXNpYmxlIGVsZW1lbnRzXG4gICAgICAgIHJldHVybiBmaWVsZFxuICAgICAgfSxcbiAgICB9XG5cbiAgICAvLyBtZXJnZSBpbiBhbnkgY3VzdG9tIHRlbXBsYXRlc1xuICAgIGlmICh0ZW1wbGF0ZXMpIHtcbiAgICAgIHRoaXMudGVtcGxhdGVzID0galF1ZXJ5LmV4dGVuZCh0aGlzLnRlbXBsYXRlcywgdGVtcGxhdGVzKVxuICAgIH1cbiAgICB0aGlzLmNvbmZpZ3VyZSgpXG4gIH1cblxuICAvKipcbiAgICogdGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IHRoZSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIG92ZXJ3cml0dGVuIGZvciBjdXN0b20gbGF5b3V0cyB0aGF0IG5lZWQgdG9cbiAgICogcHJvY2VzcyB0aGUgY29uZmlndXJhdGlvbiBhcmd1bWVudHMgcHJpb3IgdG8gcmVuZGVyaW5nXG4gICAqL1xuICBjb25maWd1cmUoKSB7fVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHRoZSBjb25maWd1cmF0aW9uIGZyb20gYW4gZWxlbWVudCBmcm9tIHRoZSBzdGFuZGFyZCBmb3JtRGF0YSBhcnJheVxuICAgKiBidWlsZGluZyB0aGUgY29udHJvbCwgbGFiZWwgYW5kIGhlbHAgdGV4dCwgYW5kIHRoZW4gcHV0dGluZyB0aGVtIGFsbCB0b2dldGhlci5cbiAgICogU2hvdWxkIHN1cHBvcnQgdGhlIGNvbnRyb2wgb2JqZWN0IHJldHVybmluZyBhIERPTSBlbGVtZW50LCBvciBhbiBvYmplY3QgY29udGFpbmluZ1xuICAgKiBjb25maWd1cmF0aW9uIHByb3BlcnRpZXM6XG4gICAqICAgLSBmaWVsZCAtIHRoZSBET00gZWxlbWVudFxuICAgKiAgIC0gbm9MYWJlbCAtIHRoaXMgY29udHJvbCBzaG91bGRuJ3QgaGF2ZSBhIGxhYmVsIChub3IgYSBzcGFjZSBmb3IgYSBsYWJlbClcbiAgICogICAtIGhpZGRlbiAtIHRoaXMgY29udHJvbCBzaG91bGRuJ3QgcmVuZGVyIGFueXRoaW5nIHZpc2libGUgdG8gdGhlIHBhZ2VcbiAgICogQHBhcmFtIHtDbGFzc30gcmVuZGVyQ29udHJvbCAtIHRoZSByZWxldmFudCBjb250cm9sIGNsYXNzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gY29uZmlndXJhdGlvbiBkYXRhIHBhc3NlZCB0aHJvdWdoIGZvcm1EYXRhIGZvciB0aGlzIGNvbnRyb2xcbiAgICogQHBhcmFtIHtTdHJpbmd9IGZvcmNlVGVtcGxhdGUgLSBwcm9ncmFtbWF0aWNhbGx5IGZvcmNlIHRoZSB0ZW1wbGF0ZSB3aXRoIHdoaWNoIHRoaXMgY29udHJvbCB0byBiZSByZW5kZXJlZFxuICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgKi9cbiAgYnVpbGQocmVuZGVyQ29udHJvbCwgZGF0YSwgZm9yY2VUZW1wbGF0ZSkge1xuICAgIC8vIHByZXBhcmUgdGhlIGRhdGFcbiAgICBpZiAodGhpcy5wcmV2aWV3KSB7XG4gICAgICBpZiAoZGF0YS5uYW1lKSB7XG4gICAgICAgIGRhdGEubmFtZSA9IGRhdGEubmFtZSArICctcHJldmlldydcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEubmFtZSA9IHV0aWxzLm5hbWVBdHRyKGRhdGEpICsgJy1wcmV2aWV3J1xuICAgICAgfVxuICAgIH1cbiAgICBkYXRhLmlkID0gZGF0YS5uYW1lXG4gICAgdGhpcy5kYXRhID0galF1ZXJ5LmV4dGVuZCh7fSwgZGF0YSlcblxuICAgIC8vIGJ1aWxkIHRoZSBjb250cm9sXG4gICAgY29udHJvbC5jb250cm9sQ29uZmlnID0gdGhpcy5jb250cm9sQ29uZmlnXG4gICAgY29uc3QgY29udHJvbEluc3RhbmNlID0gbmV3IHJlbmRlckNvbnRyb2woZGF0YSwgdGhpcy5wcmV2aWV3KVxuICAgIGxldCBmaWVsZCA9IGNvbnRyb2xJbnN0YW5jZS5idWlsZCgpXG4gICAgaWYgKHR5cGVvZiBmaWVsZCAhPT0gJ29iamVjdCcgfHwgIWZpZWxkLmZpZWxkKSB7XG4gICAgICBmaWVsZCA9IHsgZmllbGQ6IGZpZWxkIH1cbiAgICB9XG5cbiAgICAvLyBJZiBmaWVsZCBpcyBhIHJhdyBIVE1MIHN0cmluZywgY29udmVydCB0byBIVE1MRWxlbWVudChzKVxuICAgIGlmICh0eXBlb2YgZmllbGQuZmllbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCB0bXBGaWVsZCA9IHRoaXMubWFya3VwKCdkaXYnLCBmaWVsZC5maWVsZCwge30pXG4gICAgICBpZiAodG1wRmllbGQuY2hpbGRFbGVtZW50Q291bnQgPT09IDEpIHtcbiAgICAgICAgZmllbGQuZmllbGQgPSB0bXBGaWVsZC5jaGlsZHJlbi5pdGVtKDApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZC5maWVsZCA9IEFycmF5LmZyb20odG1wRmllbGQuY2hpbGRyZW4pXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYnVpbGQgdGhlIGxhYmVsICYgaGVscCB0ZXh0XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLmxhYmVsKClcbiAgICBjb25zdCBoZWxwID0gdGhpcy5oZWxwKClcblxuICAgIC8vIHByb2Nlc3MgdGhlIHJlbGV2YW50IGxheW91dCB0ZW1wbGF0ZVxuICAgIGxldCBlbGVtZW50VGVtcGxhdGVcbiAgICBpZiAoZm9yY2VUZW1wbGF0ZSAmJiB0aGlzLmlzVGVtcGxhdGUoZm9yY2VUZW1wbGF0ZSkpIHtcbiAgICAgIGVsZW1lbnRUZW1wbGF0ZSA9IGZvcmNlVGVtcGxhdGVcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudFRlbXBsYXRlID0gdGhpcy5pc1RlbXBsYXRlKGZpZWxkLmxheW91dCkgPyBmaWVsZC5sYXlvdXQgOiAnZGVmYXVsdCdcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMucHJvY2Vzc1RlbXBsYXRlKGVsZW1lbnRUZW1wbGF0ZSwgZmllbGQuZmllbGQsIGxhYmVsLCBoZWxwKVxuXG4gICAgLy8gZXhlY3V0ZSBwcmVyZW5kZXIgZXZlbnRzXG4gICAgY29udHJvbEluc3RhbmNlLm9uKCdwcmVyZW5kZXInKShlbGVtZW50KVxuXG4gICAgLy8gYmluZCBjb250cm9sIG9uIHJlbmRlciBldmVudHNcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZpZWxkUmVuZGVyZWQnLCBjb250cm9sSW5zdGFuY2Uub24oJ3JlbmRlcicpKVxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cblxuICAvKipcbiAgICogQnVpbGQgYSBsYWJlbCBlbGVtZW50XG4gICAqIEByZXR1cm4ge09iamVjdH0gZG9tIGVsZW1lbnQgdG8gcmVuZGVyIHRoZSBsYWJlbFxuICAgKi9cbiAgbGFiZWwoKSB7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLmRhdGEubGFiZWwgfHwgJydcbiAgICBjb25zdCBsYWJlbFRleHQgPSB0aGlzLmRpc2FibGVIVE1MTGFiZWxzID8gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGFiZWwpIDogdXRpbHMucGFyc2VkSHRtbChsYWJlbClcbiAgICBjb25zdCBsYWJlbENvbnRlbnRzID0gW2xhYmVsVGV4dF1cbiAgICBpZiAodGhpcy5kYXRhLnJlcXVpcmVkKSB7XG4gICAgICBsYWJlbENvbnRlbnRzLnB1c2godGhpcy5tYXJrdXAoJ3NwYW4nLCAnKicsIHsgY2xhc3NOYW1lOiAnZm9ybWJ1aWxkZXItcmVxdWlyZWQnIH0pKVxuICAgIH1cblxuICAgIC8vIHN1cHBvcnQgYW4gb3ZlcnJpZGUgdGVtcGxhdGUgZm9yIGxhYmVsc1xuICAgIGlmICh0aGlzLmlzVGVtcGxhdGUoJ2xhYmVsJykpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NUZW1wbGF0ZSgnbGFiZWwnLCBsYWJlbENvbnRlbnRzKVxuICAgIH1cblxuICAgIC8vIGdlbmVyYXRlIGEgbGFiZWwgZWxlbWVudFxuICAgIHJldHVybiB0aGlzLm1hcmt1cCgnbGFiZWwnLCBsYWJlbENvbnRlbnRzLCB7XG4gICAgICBmb3I6IHRoaXMuZGF0YS5pZCxcbiAgICAgIGNsYXNzTmFtZTogYGZvcm1idWlsZGVyLSR7dGhpcy5kYXRhLnR5cGV9LWxhYmVsYCxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIGEgaGVscCBlbGVtZW50XG4gICAqIEByZXR1cm4ge09iamVjdH0gZG9tIGVsZW1lbnQgdG8gcmVuZGVyIHRoZSBoZWxwIHRleHRcbiAgICovXG4gIGhlbHAoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEuZGVzY3JpcHRpb24pIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydCBhbiBvdmVycmlkZSB0ZW1wbGF0ZSBmb3IgbGFiZWxzXG4gICAgaWYgKHRoaXMuaXNUZW1wbGF0ZSgnaGVscCcpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzVGVtcGxhdGUoJ2hlbHAnLCB0aGlzLmRhdGEuZGVzY3JpcHRpb24pXG4gICAgfVxuXG4gICAgLy8gZ2VuZXJhdGUgdGhlIGRlZmF1bHQgaGVscCBlbGVtZW50XG4gICAgcmV0dXJuIHRoaXMubWFya3VwKCdzcGFuJywgJz8nLCB7XG4gICAgICBjbGFzc05hbWU6ICd0b29sdGlwLWVsZW1lbnQnLFxuICAgICAgdG9vbHRpcDogdGhpcy5kYXRhLmRlc2NyaXB0aW9uLFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhIHRlbXBsYXRlIGlzIGRlZmluZWQgZm9yIHRoZSBzcGVjaWZpZWQga2V5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0ZW1wbGF0ZSBzdHJpbmcgdGVtcGxhdGUga2V5IHRvIGNoZWNrIGZvclxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgaXNUZW1wbGF0ZSh0ZW1wbGF0ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy50ZW1wbGF0ZXNbdGVtcGxhdGVdID09PSAnZnVuY3Rpb24nXG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBhIHRlbXBsYXRlICYgcHJlcGFyZSB0aGUgcmVzdWx0c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gdGVtcGxhdGUgLSB0ZW1wbGF0ZSBrZXkgdG8gZXhlY3V0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIC0gYW55IG51bWJlciBvZiBhcmdzIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgdGVtcGxhdGUuIHRoaXMuZGF0YSBpcyBzZW50IGFzIHRoZSBsYXN0IHBhcmFtZXRlciB0byBhbnkgdGVtcGxhdGUuXG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgcHJvY2Vzc1RlbXBsYXRlKHRlbXBsYXRlLCAuLi5hcmdzKSB7XG4gICAgbGV0IHByb2Nlc3NlZCA9IHRoaXMudGVtcGxhdGVzW3RlbXBsYXRlXSguLi5hcmdzLCB0aGlzLmRhdGEpXG5cbiAgICBpZiAocHJvY2Vzc2VkLmpxdWVyeSkge1xuICAgICAgcHJvY2Vzc2VkID0gcHJvY2Vzc2VkWzBdXG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBsaW5rIHRvIHRoZSB1dGlscy5tYXJrdXAgbWV0aG9kXG4gICAqIGlkZWFsbHkgdGhpcyB3b3VsZCBiZSBpbmhlcml0ZWQgZnJvbSBhIHBhcmVudCAnZG9tJyB0eXBlIGVsZW1lbnQgc3VwcG9ydGluZyBkb20gaGVscGVyIHR5cGUgbWV0aG9kc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gdGFnXG4gICAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ3xBcnJheX0gY29udGVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9IERPTSBlbGVtZW50XG4gICAqL1xuICBtYXJrdXAodGFnLCBjb250ZW50ID0gJycsIGF0dHJpYnV0ZXMgPSB7fSkge1xuICAgIHJldHVybiB1dGlscy5tYXJrdXAodGFnLCBjb250ZW50LCBhdHRyaWJ1dGVzKVxuICB9XG59XG4iLCIvKipcbiAqIFNhbml0aXplciB1dGlsaXR5IGZvciBoYW5kbGluZyB1bnRydXN0ZWQgSFRNTFxuICovXG5cbmNvbnN0IHNhbml0aXplckNvbmZpZyA9IHtcbiAgY2xvYmJlcmluZ1Byb3RlY3Rpb246IHtcbiAgICBkb2N1bWVudDogdHJ1ZSxcbiAgICBmb3JtOiB0cnVlLFxuICAgIG5hbWVzcGFjZUF0dHJpYnV0ZXM6IGZhbHNlLCAvL3doZXRoZXIgdG8gcHJlZml4IHdpdGggdXNlci1jb250ZW50LVxuICB9LFxuICBiYWNrZW5kT3JkZXI6IFsnZG9tcHVyaWZ5JywgJ3Nhbml0aXplcicsICdmYWxsYmFjayddLFxuICBiYWNrZW5kczoge1xuICAgIHNhbml0aXplcjogdHlwZW9mIHdpbmRvd1snU2FuaXRpemVyJ10gPT09ICdmdW5jdGlvbicgPyBuZXcgd2luZG93LlNhbml0aXplcigpIDogZmFsc2UsXG4gICAgZG9tcHVyaWZ5OiB3aW5kb3cuRE9NUHVyaWZ5ID8gKHB1cmlmeSA9PiB7XG4gICAgICBwdXJpZnkuc2V0Q29uZmlnKHtcbiAgICAgICAgLy9VU0VfUFJPRklMRVM6IHsgaHRtbDogdHJ1ZSB9LCAvL09ubHkgcHJvY2VzcyBIVE1MIChleGNsdWRlIFNWRyBhbmQgTUFUSE1MKVxuICAgICAgICBTQU5JVElaRV9ET006IGZhbHNlLCAvL2Zvcm1CdWlsZGVyIHVzZXMgaW5wdXRzIHdpdGggbmFtZXMgdGhhdCBjbGFzaCBidWlsdC1pbiBhdHRyaWJ1dGVzIG9mIEZvcm0gZWxlbWVudCwgd2UgdXNlIG91ciBtb2RpZmllZCBEb21DbG9iYmVyaW5nIGZ1bmN0aW9uIGluc3RlYWRcbiAgICAgICAgQUREX0FUVFI6IFsnY29udGVudGVkaXRhYmxlJ10gLy9sYWJlbCBpbnB1dCByZXF1aXJlcyB0aGlzIHRvIGJlIGFsbG93ZWRcbiAgICAgIH0pXG4gICAgICByZXR1cm4gcHVyaWZ5XG4gICAgfSkod2luZG93LkRPTVB1cmlmeSkgOiBmYWxzZSxcbiAgICBmYWxsYmFjazogY29udGVudCA9PiBjb250ZW50LFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzZXRTYW5pdGl6ZXJDb25maWcgPSBjb25maWcgPT4ge1xuICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyAnSW52YWxpZCB2YWx1ZSBnaXZlbiB0byBzZXRTYW5pdGl6ZXJDb25maWcsIGV4cGVjdGVkIGNvbmZpZyBvYmplY3QnXG4gIH1cblxuICBpZiAoY29uZmlnLmhhc093blByb3BlcnR5KCdjbG9iYmVyaW5nUHJvdGVjdGlvbicpKSB7XG4gICAgWydkb2N1bWVudCcsICdmb3JtJywgJ25hbWVzcGFjZUF0dHJpYnV0ZXMnXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICAgaWYgKGNvbmZpZy5jbG9iYmVyaW5nUHJvdGVjdGlvbi5oYXNPd25Qcm9wZXJ0eSh0eXBlKSAmJiB0eXBlb2YgY29uZmlnLmNsb2JiZXJpbmdQcm90ZWN0aW9uW3R5cGVdID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgc2FuaXRpemVyQ29uZmlnLmNsb2JiZXJpbmdQcm90ZWN0aW9uW3R5cGVdID0gY29uZmlnLmNsb2JiZXJpbmdQcm90ZWN0aW9uW3R5cGVdXG4gICAgICB9XG4gICAgfSlcbiAgfVxuICBpZiAoY29uZmlnLmhhc093blByb3BlcnR5KCdiYWNrZW5kcycpKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcuYmFja2VuZHMgPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3Qua2V5cyhjb25maWcuYmFja2VuZHMpLmZvckVhY2goaW1wbGVtZW50YXRpb24gPT4gc2FuaXRpemVyQ29uZmlnLmJhY2tlbmRzW2ltcGxlbWVudGF0aW9uXSA9IGNvbmZpZy5iYWNrZW5kc1tpbXBsZW1lbnRhdGlvbl0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICdiYWNrZW5kcyBjb25maWcgZXhwZWN0ZWQgdG8gYmUgYW4gT2JqZWN0J1xuICAgIH1cbiAgfVxuICBpZiAoY29uZmlnLmhhc093blByb3BlcnR5KCdiYWNrZW5kT3JkZXInKSkge1xuICAgIHNhbml0aXplckNvbmZpZy5iYWNrZW5kT3JkZXIgPSBbXVxuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZy5iYWNrZW5kT3JkZXIpKSB7XG4gICAgICBjb25maWcuYmFja2VuZE9yZGVyLmZvckVhY2goYmFja2VuZCA9PiB7XG4gICAgICAgIGlmIChzYW5pdGl6ZXJDb25maWcuYmFja2VuZHMuaGFzT3duUHJvcGVydHkoYmFja2VuZCkpIHtcbiAgICAgICAgICBzYW5pdGl6ZXJDb25maWcuYmFja2VuZE9yZGVyLnB1c2goYmFja2VuZClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAndW5rbm93biBzYW5pdGl6ZXIgYmFja2VuZCAnICsgYmFja2VuZFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyAnYmFja2VuZE9yZGVyIGNvbmZpZyBleHBlY3RlZCB0byBiZSBhbiBBcnJheSBvZiBiYWNrZW5kIGtleXMgYXMgc3RyaW5ncydcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzUG90ZW50aWFsbHlEYW5nZXJvdXNBdHRyaWJ1dGUgPSAoYXR0ck5hbWUsIGF0dHJWYWx1ZSkgPT4ge1xuICBpZiAoc2FuaXRpemVyQ29uZmlnLmJhY2tlbmRPcmRlci5sZW5ndGggPT09IDApIHtcbiAgICAvL0FsbCBiYWNrZW5kcyBkaXNhYmxlZCBzbyBubyBzYW5pdGl6YXRpb24gY2hlY2tzIHRvIGJlIHBlcmZvcm1lZFxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGNvbnN0IGF0dHJOYW1lTGMgPSBhdHRyTmFtZS50b0xvd2VyQ2FzZSgpXG4gIGF0dHJWYWx1ZSA9IGF0dHJWYWx1ZSA/IGF0dHJWYWx1ZSArICcnIDogJydcbiAgcmV0dXJuIChcbiAgICBhdHRyTmFtZUxjLnN0YXJ0c1dpdGgoJ29uJylcbiAgICB8fCBbJ2Zvcm0nLCAnZm9ybWFjdGlvbiddLmluY2x1ZGVzKGF0dHJOYW1lTGMpXG4gICAgfHwgYXR0clZhbHVlLnRyaW0oKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJ2phdmFzY3JpcHQ6JylcbiAgKVxufVxuXG5mdW5jdGlvbiBmYWxsYmFja1Nhbml0aXplcihjb250ZW50KSB7XG4gIC8vRmFsbGJhY2sgZnVuY3Rpb24gaWYgbm8gb3RoZXIgc2FuaXRpemVyIGlzIGF2YWlsYWJsZVxuXG4gIC8valF1ZXJ5IDwgMy41IGRvZXNuJ3QgaGF2ZSB0aGlzIHNhZmV0eSBmZWF0dXJlLCBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZVxuICAvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcbiAgLy8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cbiAgY29uc3QgY29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgnJylcblxuICAvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcbiAgLy8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcbiAgLy8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTFxuICBjb25zdCBiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCdiYXNlJylcbiAgYmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZlxuICBjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoYmFzZSlcblxuICBjb25zdCBleGNsdWRlX3RhZ3MgPSBbXG4gICAgJ2FwcGxldCcsXG4gICAgJ2NvbW1lbnQnLFxuICAgICdlbWJlZCcsXG4gICAgJ2lmcmFtZScsXG4gICAgJ2xpbmsnLFxuICAgICdsaXN0aW5nJyxcbiAgICAnbWV0YScsXG4gICAgJ25vc2NyaXB0JyxcbiAgICAnb2JqZWN0JyxcbiAgICAncGxhaW50ZXh0JyxcbiAgICAnc2NyaXB0JyxcbiAgICAnc3R5bGUnLFxuICAgICd4bXAnLFxuICBdXG5cbiAgY29uc3Qgb3V0cHV0ID0gJC5wYXJzZUhUTUwoY29udGVudCwgY29udGV4dCwgZmFsc2UpXG4gICQob3V0cHV0KS5maW5kKCcqJykuYWRkQmFjaygpLmVhY2goKG5pbmRleCwgbm9kZSkgPT4ge1xuICAgIGlmIChub2RlLm5vZGVOYW1lID09PSAnI3RleHQnKSB7XG4gICAgICByZXR1cm4gLy9BbGxvdyB0aHJvdWdoIHRleHQgbm9kZXNcbiAgICB9XG5cbiAgICAvL1N0cmlwIHBvdGVudGlhbGx5IGRhbmdlcm91cyB0YWdzXG4gICAgaWYgKG5vZGUudGFnTmFtZSAmJiBleGNsdWRlX3RhZ3MuaW5jbHVkZXMobm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICBpZiAobm9kZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIG5vZGUucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChub2RlKVxuICAgICAgfSBlbHNlIGlmIChvdXRwdXQuaW5jbHVkZXMobm9kZSkpIHtcbiAgICAgICAgb3V0cHV0LnNwbGljZShvdXRwdXQuaW5kZXhPZihub2RlKSwgMSlcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vU3RyaXAgYXR0cmlidXRlcyB0aGF0IGNhbiBleGVjdXRlIEphdmFzY3JpcHQgb3IgY2F1c2UgZG9tIGNsb2JiZXJpbmdcbiAgICBpZiAobm9kZS5hdHRyaWJ1dGVzKSB7XG4gICAgICBBcnJheS5mcm9tKG5vZGUuYXR0cmlidXRlcykuZm9yRWFjaChhdHRyaWJ1dGUgPT4ge1xuICAgICAgICBpZiAoaXNQb3RlbnRpYWxseURhbmdlcm91c0F0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlLnZhbHVlKSkge1xuICAgICAgICAgICQobm9kZSkucmVtb3ZlQXR0cihhdHRyaWJ1dGUubmFtZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH0pXG5cbiAgY29uc3QgdG1wID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAkKHRtcCkuaHRtbChvdXRwdXQpXG4gIHJldHVybiB0bXAuaW5uZXJIVE1MXG59XG5cbnNhbml0aXplckNvbmZpZy5iYWNrZW5kcy5mYWxsYmFjayA9IGZhbGxiYWNrU2FuaXRpemVyXG5cbmV4cG9ydCBjb25zdCBhdHRyaWJ1dGVXaWxsQ2xvYmJlciA9IHZhbHVlID0+IHtcbiAgY29uc3QgY2hlY2tfZG9jID0gZG9jdW1lbnRcbiAgY29uc3QgY2hlY2tfZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKVxuXG4gIHJldHVybiAodmFsdWUgaW4gY2hlY2tfZG9jIHx8IHZhbHVlIGluIGNoZWNrX2Zvcm0pXG59XG5cbmV4cG9ydCBjb25zdCBzYW5pdGl6ZU5hbWVkQXR0cmlidXRlID0gdmFsdWUgPT4ge1xuICBjb25zdCBjaGVja19kb2MgPSBzYW5pdGl6ZXJDb25maWcuY2xvYmJlcmluZ1Byb3RlY3Rpb24uZG9jdW1lbnQgPyBkb2N1bWVudCA6IGZhbHNlXG4gIGNvbnN0IGNoZWNrX2Zvcm0gPSBzYW5pdGl6ZXJDb25maWcuY2xvYmJlcmluZ1Byb3RlY3Rpb24uZm9ybSA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKSA6IGZhbHNlXG5cbiAgaWYgKChjaGVja19kb2MgJiYgdmFsdWUgaW4gY2hlY2tfZG9jKSB8fCAoY2hlY2tfZm9ybSAmJiB2YWx1ZSBpbiBjaGVja19mb3JtKSkge1xuICAgIHJldHVybiAoc2FuaXRpemVyQ29uZmlnLmNsb2JiZXJpbmdQcm90ZWN0aW9uLm5hbWVzcGFjZUF0dHJpYnV0ZXMpID8gJ3VzZXItY29udGVudC0nICsgdmFsdWUgOiB1bmRlZmluZWRcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuY29uc3Qgc2FuaXRpemVEb21DbG9iYmVyaW5nID0gZWxlbWVudCA9PiB7XG4gICQoZWxlbWVudCkuZmluZCgnKicpLmVhY2goKG5pbmRleCwgbm9kZSkgPT4ge1xuICAgIGNvbnN0IHByb3RlY3RlZFR5cGVzID0gWydpZCcsICduYW1lJ11cblxuICAgIC8vUHJldmVudCBkb20gY2xvYmJlcmluZyBvZiBkb2N1bWVudC5YIGZyb20gRWxlbWVudC5uYW1lXG4gICAgaWYgKFsnZW1iZWQnLCAnZm9ybScsICdpZnJhbWUnLCAnaW1hZ2UnLCAnaW1nJywgJ29iamVjdCddLmluY2x1ZGVzKG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ25hbWUnKVxuICAgIH1cblxuICAgIHByb3RlY3RlZFR5cGVzLmZvckVhY2goYXR0ck5hbWUgPT4ge1xuICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKGF0dHJOYW1lKSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHNhbml0aXplTmFtZWRBdHRyaWJ1dGUobm9kZS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpKVxuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCB2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG4gIHJldHVybiBlbGVtZW50XG59XG5cbmNvbnN0IHNhbml0aXplcnNDYWxsYmFja3MgPSB7XG4gIGZhbGxiYWNrOiAoZWxlbWVudCwgY29udGVudCkgPT4ge1xuICAgIC8vZmFsbGJhY2sgd2lsbCByZXR1cm4gdGhlIGNvbnRlbnQgYXMtaXMgaWYgdGhlIGZhbGxiYWNrIGlzIGRpc2FibGVkXG4gICAgY29uc3QgcHVyaWZpZXIgPSBzYW5pdGl6ZXJDb25maWcuYmFja2VuZHMuZmFsbGJhY2tcbiAgICBjb25zdCBzdXBwb3J0ZWQgPSB0eXBlb2YgcHVyaWZpZXIgPT09ICdmdW5jdGlvbidcbiAgICBpZiAoc3VwcG9ydGVkKSB7XG4gICAgICBjb250ZW50ID0gcHVyaWZpZXIoY29udGVudClcbiAgICB9XG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBjb250ZW50XG4gICAgcmV0dXJuIHN1cHBvcnRlZFxuICB9LFxuICBkb21wdXJpZnk6IChlbGVtZW50LCBjb250ZW50KSA9PiB7XG4gICAgY29uc3QgcHVyaWZpZXIgPSBzYW5pdGl6ZXJDb25maWcuYmFja2VuZHMuZG9tcHVyaWZ5XG4gICAgaWYgKHB1cmlmaWVyID09PSBmYWxzZSB8fCAhcHVyaWZpZXIuaXNTdXBwb3J0ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gcHVyaWZpZXIuc2FuaXRpemUoY29udGVudClcbiAgICByZXR1cm4gdHJ1ZVxuICB9LFxuICBzYW5pdGl6ZXI6IChlbGVtZW50LCBjb250ZW50KSA9PiB7XG4gICAgY29uc3Qgc2FuaXRpemVyID0gc2FuaXRpemVyQ29uZmlnLmJhY2tlbmRzLnNhbml0aXplclxuICAgIGlmIChzYW5pdGl6ZXIpIHtcbiAgICAgIGVsZW1lbnQuc2V0SFRNTChjb250ZW50LCB7IHNhbml0aXplcjogc2FuaXRpemVyIH0pXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc2V0RWxlbWVudENvbnRlbnQgPSAoZWxlbWVudCwgY29udGVudCwgYXNUZXh0ID0gZmFsc2UpID0+IHtcbiAgaWYgKGFzVGV4dCkge1xuICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSBjb250ZW50XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcHJveHlFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50LnRhZ05hbWUpXG4gICAgY29uc3QgcGVyZm9ybWVkQnkgPSBzYW5pdGl6ZXJDb25maWcuYmFja2VuZE9yZGVyLmZpbmQodHlwZSA9PiBzYW5pdGl6ZXJzQ2FsbGJhY2tzW3R5cGVdKHByb3h5RWxlbSwgY29udGVudCkpXG4gICAgaWYgKHBlcmZvcm1lZEJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNhbml0aXplRG9tQ2xvYmJlcmluZyhwcm94eUVsZW0pXG4gICAgICBlbGVtZW50LmlubmVySFRNTCA9IHByb3h5RWxlbS5pbm5lckhUTUxcbiAgICAgIHJldHVybiBlbGVtZW50XG4gICAgfVxuICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gY29udGVudFxuXG4gICAgcmV0dXJuIGVsZW1lbnRcbiAgfVxufVxuXG5jb25zdCBzYW5pdGl6ZXIgPSB7XG4gIHNldEVsZW1lbnRDb250ZW50LFxuICBzZXRTYW5pdGl6ZXJDb25maWcsXG4gIHNhbml0aXplTmFtZWRBdHRyaWJ1dGUsXG4gIGlzUG90ZW50aWFsbHlEYW5nZXJvdXNBdHRyaWJ1dGUsXG4gIGF0dHJpYnV0ZVdpbGxDbG9iYmVyLFxufVxuXG5leHBvcnQgZGVmYXVsdCBzYW5pdGl6ZXJcbiIsImltcG9ydCB7IHNldEVsZW1lbnRDb250ZW50LCBzYW5pdGl6ZU5hbWVkQXR0cmlidXRlLCBpc1BvdGVudGlhbGx5RGFuZ2Vyb3VzQXR0cmlidXRlIH0gZnJvbSAnLi9zYW5pdGl6ZXInXG4vKipcbiAqIENyb3NzIGZpbGUgdXRpbGl0aWVzIGZvciB3b3JraW5nIHdpdGggYXJyYXlzLFxuICogc29ydGluZyBhbmQgb3RoZXIgZnVuIHN0dWZmXG4gKi9cblxud2luZG93LmZiTG9hZGVkID0ge1xuICBqczogW10sXG4gIGNzczogW10sXG59XG53aW5kb3cuZmJFZGl0b3JzID0ge1xuICBxdWlsbDoge30sXG4gIHRpbnltY2U6IHt9LFxufVxuXG4vKipcbiAqIFJlbW92ZSBudWxsLCB1bmRlZmluZWQsIGVtcHR5IHN0cmluZyBvciBlbXB0eSBhcnJheSB2YWx1ZXMgZnJvbSBhbiBvYmplY3QsIG9yaWdpbmFsIG9iamVjdCBpcyBub3QgbW9kaWZpZWRcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqIHthdHRyTmFtZTogYXR0clZhbHVlfVxuICogQHBhcmFtIHtib29sZWFufSBbcmVtb3ZlRmFsc2U9ZmFsc2VdIFJlbW92ZSB2YWx1ZXMgPT09IGZhbHNlXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB0cmltbWVkIG9mIG51bGwgb3IgdW5kZWZpbmVkIHZhbHVlc1xuICovXG5leHBvcnQgY29uc3QgdHJpbU9iaiA9IGZ1bmN0aW9uIChvYmosIHJlbW92ZUZhbHNlID0gZmFsc2UpIHtcbiAgaWYgKG51bGwgPT0gb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSByZXR1cm4gb2JqXG4gIGNvbnN0IGF0dHJzID0gKHR5cGVvZiB3aW5kb3cuc3RydWN0dXJlZENsb25lID09PSAnZnVuY3Rpb24nKSA/IHdpbmRvdy5zdHJ1Y3R1cmVkQ2xvbmUob2JqKSA6IE9iamVjdC5hc3NpZ24oe30sIG9iailcbiAgLyoqIEB0eXBlIHsobnVsbHx1bmRlZmluZWR8Jyd8ZmFsc2UpW119IHhtbFJlbW92ZSAqL1xuICBjb25zdCB4bWxSZW1vdmUgPSBbbnVsbCwgdW5kZWZpbmVkLCAnJ11cbiAgaWYgKHJlbW92ZUZhbHNlKSB7XG4gICAgeG1sUmVtb3ZlLnB1c2goZmFsc2UpXG4gIH1cbiAgZm9yIChjb25zdCBhdHRyIGluIGF0dHJzKSB7XG4gICAgaWYgKHhtbFJlbW92ZS5pbmNsdWRlcyhhdHRyc1thdHRyXSkpIHtcbiAgICAgIGRlbGV0ZSBhdHRyc1thdHRyXVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhdHRyc1thdHRyXSkpIHtcbiAgICAgIGlmICghYXR0cnNbYXR0cl0ubGVuZ3RoKSB7XG4gICAgICAgIGRlbGV0ZSBhdHRyc1thdHRyXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRyc1xufVxuXG4vKipcbiAqIFRlc3QgaWYgYXR0cmlidXRlIGlzIGEgdmFsaWQgSFRNTCBhdHRyaWJ1dGVcbiAqIEBwYXJhbSAge3N0cmluZ30gYXR0clxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkQXR0ciA9IGZ1bmN0aW9uIChhdHRyKSB7XG4gIGNvbnN0IGludmFsaWQgPSBbXG4gICAgJ3ZhbHVlcycsXG4gICAgJ2VuYWJsZU90aGVyJyxcbiAgICAnb3RoZXInLFxuICAgICdsYWJlbCcsXG4gICAgLy8gJ3N0eWxlJyxcbiAgICAnc3VidHlwZScsXG4gIF1cbiAgcmV0dXJuICFpbnZhbGlkLmluY2x1ZGVzKGF0dHIpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBhdHRycyBvYmplY3QgaW50byBhIHN0cmluZyBmb3IgeG1sIG5vZGVcbiAqIEBwYXJhbSAge09iamVjdH0gYXR0cnMgb2JqZWN0IG9mIGF0dHJpYnV0ZXMgZm9yIG1hcmt1cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgeG1sQXR0clN0cmluZyA9IGF0dHJzID0+XG4gIE9iamVjdC5lbnRyaWVzKGF0dHJzKVxuICAgIC5tYXAoKFtrZXksIHZhbF0pID0+IGAke2h5cGhlbkNhc2Uoa2V5KX09XCIke3ZhbH1cImApXG4gICAgLmpvaW4oJyAnKVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXR0cnMgb2JqZWN0IGludG8gYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IGF0dHJzIG9iamVjdCBvZiBhdHRyaWJ1dGVzIGZvciBtYXJrdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGF0dHJTdHJpbmcgPSBhdHRycyA9PlxuICBPYmplY3QuZW50cmllcyhhdHRycylcbiAgICAubWFwKChba2V5LCB2YWxdKSA9PiB2YWxpZEF0dHIoa2V5KSAmJiBPYmplY3QudmFsdWVzKHNhZmVBdHRyKGtleSwgdmFsKSkuam9pbignJykpXG4gICAgLmZpbHRlcihCb29sZWFuKVxuICAgIC5qb2luKCcgJylcblxuLyoqXG4gKiBDb252ZXJ0IGF0dHJpYnV0ZXMgdG8gbWFya3VwIHNhZmUgc3RyaW5nc1xuICogQHBhcmFtICB7c3RyaW5nfSBuYW1lICBhdHRyaWJ1dGUgbmFtZVxuICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZSBhdHRyaWJ1dGUgdmFsdWVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAge2F0dHJOYW1lOiBhdHRyVmFsdWV9XG4gKi9cbmV4cG9ydCBjb25zdCBzYWZlQXR0ciA9IChuYW1lLCB2YWx1ZSkgPT4ge1xuICBuYW1lID0gc2FmZUF0dHJOYW1lKG5hbWUpXG4gIGxldCB2YWxTdHJpbmdcblxuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhbFN0cmluZyA9IGVzY2FwZUF0dHIodmFsdWUuam9pbignICcpKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpXG4gICAgICB9XG4gICAgICB2YWxTdHJpbmcgPSBlc2NhcGVBdHRyKHZhbHVlLnRyaW0oKSlcbiAgICB9XG4gIH1cblxuICB2YWx1ZSA9IHZhbHVlID8gYD1cIiR7dmFsU3RyaW5nfVwiYCA6ICcnXG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICB2YWx1ZSxcbiAgfVxufVxuXG4vKipcbiAqIHJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYSBuZXN0ZWQgYXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFyciB0byBiZSBmbGF0dGVuZWRcbiAqIEByZXR1cm4ge0FycmF5fSBmbGF0dGVuZWQgYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGZsYXR0ZW5BcnJheSA9IGFyciA9PlxuICBhcnIucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbCkgPyBmbGF0dGVuQXJyYXkodmFsKSA6IHZhbCksIFtdKVxuXG5leHBvcnQgY29uc3Qgc2FmZUF0dHJOYW1lID0gbmFtZSA9PiB7XG4gIGNvbnN0IHNhZmVBdHRyID0ge1xuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgfVxuXG4gIHJldHVybiBzYWZlQXR0cltuYW1lXSB8fCBoeXBoZW5DYXNlKG5hbWUpXG59XG5cbi8qKlxuICogQ29udmVydCBzdHJpbmdzIGludG8gbG93ZXJjYXNlLWh5cGhlblxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBoeXBoZW5DYXNlID0gc3RyID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4gIHN0ciA9IHN0ci5yZXBsYWNlKC9bXlxcd1xcc1xcLV0vZ2ksICcnKVxuICBzdHIgPSBzdHIucmVwbGFjZSgvKFtBLVpdKS9nLCBmdW5jdGlvbiAoJDEpIHtcbiAgICByZXR1cm4gJy0nICsgJDEudG9Mb3dlckNhc2UoKVxuICB9KVxuXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxzL2csICctJykucmVwbGFjZSgvXi0rL2csICcnKVxufVxuXG4vKipcbiAqIGNvbnZlcnQgYSBoeXBoZW5hdGVkIHN0cmluZyB0byBjYW1lbENhc2VcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBjb25zdCBjYW1lbENhc2UgPSBzdHIgPT4gc3RyLnJlcGxhY2UoLy0oW2Etel0pL2csIChtLCB3KSA9PiB3LnRvVXBwZXJDYXNlKCkpXG5cbi8qKlxuICogQmluZCBldmVudHMgdG8gYW4gZWxlbWVudFxuICogQHBhcmFtICB7RXZlbnRUYXJnZXR9IGVsZW1lbnQgRE9NIGVsZW1lbnRcbiAqIEBwYXJhbSAge09iamVjdH0gZXZlbnRzICBvYmplY3QgZnVsbCBvZiBldmVudHMgZWcuIHtjbGljazogZXZ0ID0+IGNhbGxiYWNrfVxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IGJpbmRFdmVudHMgPSAoZWxlbWVudCwgZXZlbnRzKSA9PiB7XG4gIGlmIChldmVudHMpIHtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IGluIGV2ZW50cykge1xuICAgICAgaWYgKGV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBldnQgPT4gZXZlbnRzW2V2ZW50XShldnQpKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgdW5pcXVlIG5hbWUgYXR0cmlidXRlXG4gKiBAcGFyYW0gIHtPYmplY3R9IGZpZWxkXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgIG5hbWVcbiAqL1xuZXhwb3J0IGNvbnN0IG5hbWVBdHRyID0gKGZ1bmN0aW9uICgpIHtcbiAgbGV0IGxlcG9jaFxuICBsZXQgY291bnRlciA9IDBcbiAgcmV0dXJuIGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIGNvbnN0IGVwb2NoID0gRGF0ZS5ub3coKVxuICAgIGlmIChlcG9jaCA9PT0gbGVwb2NoKSB7XG4gICAgICArK2NvdW50ZXJcbiAgICB9IGVsc2Uge1xuICAgICAgY291bnRlciA9IDBcbiAgICAgIGxlcG9jaCA9IGVwb2NoXG4gICAgfVxuICAgIGNvbnN0IHByZWZpeCA9IGZpZWxkLnR5cGUgfHwgaHlwaGVuQ2FzZShmaWVsZC5sYWJlbClcbiAgICByZXR1cm4gcHJlZml4ICsgJy0nICsgZXBvY2ggKyAnLScgKyBjb3VudGVyXG4gIH1cbn0pKClcblxuLyoqXG4gKiBEZXRlcm1pbmUgY29udGVudCB0eXBlXG4gKiBAcGFyYW0gIHtOb2RlIHwgU3RyaW5nIHwgQXJyYXkgfCBPYmplY3R9IGNvbnRlbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGNvbnN0IGdldENvbnRlbnRUeXBlID0gY29udGVudCA9PiB7XG4gIGlmIChjb250ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY29udGVudFxuICB9XG5cbiAgcmV0dXJuIFtcbiAgICBbJ2FycmF5JywgY29udGVudCA9PiBBcnJheS5pc0FycmF5KGNvbnRlbnQpXSxcbiAgICBbJ25vZGUnLCBjb250ZW50ID0+IGNvbnRlbnQgaW5zdGFuY2VvZiB3aW5kb3cuTm9kZSB8fCBjb250ZW50IGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50XSxcbiAgICBbJ2NvbXBvbmVudCcsICgpID0+IGNvbnRlbnQgJiYgY29udGVudC5kb21dLFxuICAgIFt0eXBlb2YgY29udGVudCwgKCkgPT4gdHJ1ZV0sXG4gIF0uZmluZCh0eXBlQ29uZGl0aW9uID0+IHR5cGVDb25kaXRpb25bMV0oY29udGVudCkpWzBdXG59XG5cbi8qKlxuICogR2VuZXJhdGUgbWFya3VwIHdyYXBwZXIgd2hlcmUgbmVlZGVkXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSB0YWcgVGFnIG5hbWVcbiAqIEBwYXJhbSAge3N0cmluZ3xBcnJheXxvYmplY3R8Tm9kZXxGdW5jdGlvbnxudWxsfSBjb250ZW50IGNvbnRlbnQgdG8gd3JhcFxuICogQHBhcmFtICB7T2JqZWN0fSBhdHRyaWJ1dGVzIGF0dHJpYnV0ZXMgdG8gYXNzaWduIHRvIGVsZW1lbnRcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBET00gRWxlbWVudFxuICovXG5leHBvcnQgY29uc3QgbWFya3VwID0gZnVuY3Rpb24gKHRhZywgY29udGVudCA9ICcnLCBhdHRyaWJ1dGVzID0ge30pIHtcbiAgbGV0IGNvbnRlbnRUeXBlID0gZ2V0Q29udGVudFR5cGUoY29udGVudClcbiAgY29uc3QgeyBldmVudHMsIC4uLmF0dHJzIH0gPSBhdHRyaWJ1dGVzXG4gIGNvbnN0IGZpZWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpXG5cbiAgY29uc3QgYXBwZW5kQ29udGVudCA9IHtcbiAgICBzdHJpbmc6IGNvbnRlbnQgPT4ge1xuICAgICAgc2V0RWxlbWVudENvbnRlbnQoZmllbGQsZmllbGQuaW5uZXJIVE1MICsgY29udGVudClcbiAgICB9LFxuICAgIG9iamVjdDogY29uZmlnID0+IHtcbiAgICAgIGNvbnN0IHsgdGFnLCBjb250ZW50LCAuLi5kYXRhIH0gPSBjb25maWdcbiAgICAgIHJldHVybiBmaWVsZC5hcHBlbmRDaGlsZChtYXJrdXAodGFnLCBjb250ZW50LCBkYXRhKSlcbiAgICB9LFxuICAgIG5vZGU6IGNvbnRlbnQgPT4ge1xuICAgICAgcmV0dXJuIGZpZWxkLmFwcGVuZENoaWxkKGNvbnRlbnQpXG4gICAgfSxcbiAgICBhcnJheTogY29udGVudCA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29udGVudFR5cGUgPSBnZXRDb250ZW50VHlwZShjb250ZW50W2ldKVxuICAgICAgICBhcHBlbmRDb250ZW50W2NvbnRlbnRUeXBlXShjb250ZW50W2ldKVxuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb246IGNvbnRlbnQgPT4ge1xuICAgICAgY29udGVudCA9IGNvbnRlbnQoKVxuICAgICAgY29udGVudFR5cGUgPSBnZXRDb250ZW50VHlwZShjb250ZW50KVxuICAgICAgYXBwZW5kQ29udGVudFtjb250ZW50VHlwZV0oY29udGVudClcbiAgICB9LFxuICAgIHVuZGVmaW5lZDogKCkgPT4ge30sXG4gIH1cblxuICBmb3IgKGNvbnN0IGF0dHIgaW4gYXR0cnMpIHtcbiAgICBpZiAoYXR0cnMuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBzYWZlQXR0ck5hbWUoYXR0cilcbiAgICAgIGxldCBhdHRyVmFsID0gQXJyYXkuaXNBcnJheShhdHRyc1thdHRyXSkgPyB1bmlxdWUoYXR0cnNbYXR0cl0uam9pbignICcpLnNwbGl0KCcgJykpLmpvaW4oJyAnKSA6IGF0dHJzW2F0dHJdXG4gICAgICAvL0lmIHRoZSBTYW5pdGl6ZXIgaXMgZGlzYWJsZWQgdGhpcyB3aWxsIGFsd2F5cyByZXR1cm4gZmFsc2VcbiAgICAgIGlmIChpc1BvdGVudGlhbGx5RGFuZ2Vyb3VzQXR0cmlidXRlKG5hbWUsIGF0dHJWYWwpKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGF0dHJWYWwgPT09ICdib29sZWFuJykge1xuICAgICAgICBpZiAoYXR0clZhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvbnN0IHZhbCA9IG5hbWUgPT09ICdjb250ZW50ZWRpdGFibGUnID8gdHJ1ZSA6IG5hbWVcbiAgICAgICAgICBmaWVsZC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2lkJyB8fCBuYW1lID09PSAnbmFtZScpIHtcbiAgICAgICAgICBhdHRyVmFsID0gc2FuaXRpemVOYW1lZEF0dHJpYnV0ZShhdHRyVmFsKVxuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRyVmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBmaWVsZC5zZXRBdHRyaWJ1dGUobmFtZSwgYXR0clZhbClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChjb250ZW50KSB7XG4gICAgYXBwZW5kQ29udGVudFtjb250ZW50VHlwZV0oY29udGVudClcbiAgfVxuXG4gIGJpbmRFdmVudHMoZmllbGQsIGV2ZW50cylcblxuICByZXR1cm4gZmllbGRcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGh0bWwgZWxlbWVudCBhdHRyaWJ1dGVzIHRvIGtleS92YWx1ZSBvYmplY3RcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbGVtIERPTSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGV4OiB7YXR0ck5hbWU6IGF0dHJWYWx1ZX1cbiAqL1xuZXhwb3J0IGNvbnN0IHhtbFBhcnNlQXR0cnMgPSBlbGVtID0+IHtcbiAgY29uc3QgYXR0cnMgPSBlbGVtLmF0dHJpYnV0ZXNcbiAgY29uc3QgZGF0YSA9IHt9XG4gIGZvckVhY2goYXR0cnMsIGF0dHIgPT4ge1xuICAgIGxldCBhdHRyVmFsID0gYXR0cnNbYXR0cl0udmFsdWUgfHwgJydcbiAgICBpZiAoYXR0clZhbC5tYXRjaCgvZmFsc2V8dHJ1ZS9nKSkge1xuICAgICAgYXR0clZhbCA9IGF0dHJWYWwgPT09ICd0cnVlJ1xuICAgIH0gZWxzZSBpZiAoYXR0clZhbC5tYXRjaCgvdW5kZWZpbmVkL2cpKSB7XG4gICAgICBhdHRyVmFsID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgaWYgKGF0dHJWYWwpIHtcbiAgICAgIGRhdGFbY2FtZWxDYXNlKGF0dHJzW2F0dHJdLm5hbWUpXSA9IGF0dHJWYWxcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGZpZWxkIG9wdGlvbnMgdG8gb3B0aW9uRGF0YVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge05vZGVMaXN0fSBvcHRpb25zICBET00gZWxlbWVudHNcbiAqIEByZXR1cm4ge0FycmF5fSBvcHRpb25EYXRhIGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCB4bWxQYXJzZU9wdGlvbnMgPSBvcHRpb25zID0+IHtcbiAgY29uc3QgZGF0YSA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgb3B0aW9uRGF0YSA9IHtcbiAgICAgIC4uLnhtbFBhcnNlQXR0cnMob3B0aW9uc1tpXSksXG4gICAgICBsYWJlbDogb3B0aW9uc1tpXS50ZXh0Q29udGVudCxcbiAgICB9XG4gICAgZGF0YS5wdXNoKG9wdGlvbkRhdGEpXG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG4vKipcbiAqIENvbnZlcnQgZmllbGQgdXNlciBkYXRhIHRvIHVzZXJEYXRhXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7Tm9kZUxpc3R9IHVzZXJEYXRhICBET00gZWxlbWVudHNcbiAqIEByZXR1cm4ge0FycmF5fSBvcHRpb25EYXRhIGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCB4bWxQYXJzZVVzZXJEYXRhID0gdXNlckRhdGEgPT4ge1xuICBjb25zdCBkYXRhID0gW11cblxuICBpZiAodXNlckRhdGEubGVuZ3RoKSB7XG4gICAgY29uc3QgdmFsdWVzID0gdXNlckRhdGFbMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3ZhbHVlJylcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhLnB1c2godmFsdWVzW2ldLnRleHRDb250ZW50KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRhXG59XG5cbi8qKlxuICogUGFyc2UgWE1MIGZvcm1EYXRhXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHhtbFN0cmluZ1xuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgZm9ybURhdGEgYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlWE1MID0geG1sU3RyaW5nID0+IHtcbiAgY29uc3QgcGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKVxuICBjb25zdCB4bWwgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHhtbFN0cmluZywgJ3RleHQveG1sJylcbiAgY29uc3QgZm9ybURhdGEgPSBbXVxuXG4gIGlmICh4bWwpIHtcbiAgICBjb25zdCBmaWVsZHMgPSB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ZpZWxkJylcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZmllbGREYXRhID0geG1sUGFyc2VBdHRycyhmaWVsZHNbaV0pXG4gICAgICBjb25zdCBvcHRpb25zID0gZmllbGRzW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvcHRpb24nKVxuICAgICAgY29uc3QgdXNlckRhdGEgPSBmaWVsZHNbaV0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3VzZXJEYXRhJylcblxuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgZmllbGREYXRhLnZhbHVlcyA9IHhtbFBhcnNlT3B0aW9ucyhvcHRpb25zKVxuICAgICAgfVxuXG4gICAgICBpZiAodXNlckRhdGEgJiYgdXNlckRhdGEubGVuZ3RoKSB7XG4gICAgICAgIGZpZWxkRGF0YS51c2VyRGF0YSA9IHhtbFBhcnNlVXNlckRhdGEodXNlckRhdGEpXG4gICAgICB9XG5cbiAgICAgIGZvcm1EYXRhLnB1c2goZmllbGREYXRhKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb3JtRGF0YVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGVzY2FwZWQgSFRNTCBpbnRvIHVzYWJsZSBIVE1MXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGh0bWwgZXNjYXBlZCBIVE1MXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgcGFyc2VkIEhUTUxcbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlZEh0bWwgPSBodG1sID0+IHtcbiAgY29uc3QgZXNjYXBlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJylcbiAgZXNjYXBlRWxlbWVudC5pbm5lckhUTUwgPSBodG1sXG4gIHJldHVybiBlc2NhcGVFbGVtZW50LnRleHRDb250ZW50XG59XG5cbi8qKlxuICogRXNjYXBlIG1hcmt1cCBzbyBpdCBjYW4gYmUgZGlzcGxheWVkIHJhdGhlciB0aGFuIHJlbmRlcmVkXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGh0bWwgbWFya3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgZXNjYXBlZCBodG1sXG4gKi9cbmV4cG9ydCBjb25zdCBlc2NhcGVIdG1sID0gaHRtbCA9PiB7XG4gIGNvbnN0IGVzY2FwZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpXG4gIGVzY2FwZUVsZW1lbnQudGV4dENvbnRlbnQgPSBodG1sXG4gIHJldHVybiBlc2NhcGVFbGVtZW50LmlubmVySFRNTFxufVxuXG4vLyBFc2NhcGUgYW4gYXR0cmlidXRlXG5leHBvcnQgY29uc3QgZXNjYXBlQXR0ciA9IHN0ciA9PiB7XG4gIGNvbnN0IG1hdGNoID0ge1xuICAgICdcIic6ICcmcXVvdDsnLFxuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgfVxuXG4gIGNvbnN0IHJlcGxhY2VUYWcgPSB0YWcgPT4gbWF0Y2hbdGFnXSB8fCB0YWdcblxuICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBzdHIucmVwbGFjZSgvW1wiJjw+XS9nLCByZXBsYWNlVGFnKSA6IHN0clxufVxuXG4vLyBFc2NhcGUgYXR0cmlidXRlcyBAVE9ETyBGaW5kIHVzYWdlP1xuZXhwb3J0IGNvbnN0IGVzY2FwZUF0dHJzID0gYXR0cnMgPT4ge1xuICBmb3IgKGNvbnN0IGF0dHIgaW4gYXR0cnMpIHtcbiAgICBpZiAoYXR0cnMuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgIGF0dHJzW2F0dHJdID0gZXNjYXBlQXR0cihhdHRyc1thdHRyXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0cnNcbn1cblxuLy8gZm9yRWFjaCB0aGF0IGNhbiBiZSB1c2VkIG9uIG5vZGVMaXN0XG5leHBvcnQgY29uc3QgZm9yRWFjaCA9IGZ1bmN0aW9uIChhcnJheSwgY2FsbGJhY2ssIHNjb3BlKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBjYWxsYmFjay5jYWxsKHNjb3BlLCBpLCBhcnJheVtpXSkgLy8gcGFzc2VzIGJhY2sgc3R1ZmYgd2UgbmVlZFxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGR1cGxpY2F0ZXMgZnJvbSBhbiBhcnJheSBvZiBlbGVtZW50c1xuICogQHBhcmFtICB7QXJyYXl9IGFycmF5ICBhcnJheSB3aXRoIHBvc3NpYmxlIGR1cGxpY2F0ZXNcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgYXJyYXkgd2l0aCBvbmx5IHVuaXF1ZSB2YWx1ZXNcbiAqL1xuZXhwb3J0IGNvbnN0IHVuaXF1ZSA9IGFycmF5ID0+IHtcbiAgcmV0dXJuIGFycmF5LmZpbHRlcigoZWxlbSwgcG9zLCBhcnIpID0+IGFyci5pbmRleE9mKGVsZW0pID09PSBwb3MpXG59XG5cbi8qKlxuICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gYW4gYXJyYXlcbiAqIEBwYXJhbSAge3N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtICB7QXJyYXl9IGFyclxuICovXG5leHBvcnQgY29uc3QgcmVtb3ZlRnJvbUFycmF5ID0gKHZhbCwgYXJyKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gYXJyLmluZGV4T2YodmFsKVxuXG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgYXJyLnNwbGljZShpbmRleCwgMSlcbiAgfVxufVxuXG4vKipcbiAqIExvYWRzIGFuIGFycmF5IG9mIHNjcmlwdHMgdXNpbmcgalF1ZXJ5J3MgYGdldFNjcmlwdGBcbiAqIEBwYXJhbSAge3N0cmluZ1tdfHN0cmluZ30gIHNjcmlwdFNjciAgICBzY3JpcHRzXG4gKiBAcGFyYW0gIHtTdHJpbmd9IFtwYXRoPScnXSAgIG9wdGlvbmFsIHRvIGxvYWQgZm9ybVxuICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgYSBwcm9taXNlXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRTY3JpcHRzID0gKHNjcmlwdFNjciwgcGF0aD0gJycpID0+IHtcbiAgY29uc3QgJCA9IGpRdWVyeVxuICBsZXQgX2FyciA9IFtdXG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHNjcmlwdFNjcikpIHtcbiAgICBzY3JpcHRTY3IgPSBbc2NyaXB0U2NyXVxuICB9XG5cbiAgaWYgKCFpc0NhY2hlZChzY3JpcHRTY3IpKSB7XG4gICAgX2FyciA9IGpRdWVyeS5tYXAoc2NyaXB0U2NyLCBzcmMgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgZGF0YVR5cGU6ICdzY3JpcHQnLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgdXJsOiAocGF0aCB8fCAnJykgKyBzcmMsXG4gICAgICB9XG4gICAgICByZXR1cm4galF1ZXJ5LmFqYXgob3B0aW9ucykuZG9uZSgoKSA9PiB3aW5kb3cuZmJMb2FkZWQuanMucHVzaChzcmMpKVxuICAgIH0pXG4gIH1cblxuICBfYXJyLnB1c2goalF1ZXJ5LkRlZmVycmVkKGRlZmVycmVkID0+ICQoZGVmZXJyZWQucmVzb2x2ZSkpKVxuXG4gIHJldHVybiBqUXVlcnkud2hlbiguLi5fYXJyKVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiByZW1vdGUgcmVzb3VyY2UgaXMgYWxyZWFkeSBsb2FkZWRcbiAqIEBwYXJhbSAge3N0cmluZ3xBcnJheX0gc3JjICB1cmwgb2YgcmVtb3RlIHNjcmlwdCBvciBjc3NcbiAqIEBwYXJhbSAgeydqcyd8J2Nzcyd9ICAgICAgIFt0eXBlPSdqcyddICB0eXBlIG9mIHJlbW90ZSByZXNvdXJjZVxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICBpc0NhY2hlZFxuICovXG5leHBvcnQgY29uc3QgaXNDYWNoZWQgPSAoc3JjLCB0eXBlID0gJ2pzJykgPT4ge1xuICBjb25zdCBjYWNoZSA9IHdpbmRvdy5mYkxvYWRlZFt0eXBlXVxuICByZXR1cm4gKEFycmF5LmlzQXJyYXkoc3JjKSkgPyBzcmMuZXZlcnkocyA9PiBjYWNoZS5pbmNsdWRlcyhzKSkgOiBjYWNoZS5pbmNsdWRlcyhzcmMpXG59XG5cbi8qKlxuICogQXBwZW5kcyBzdHlsZXNoZWV0cyB0byB0aGUgaGVhZFxuICogQHBhcmFtICB7QXJyYXl9IHNjcmlwdFNjclxuICogQHBhcmFtICB7U3RyaW5nfSBbcGF0aD0nJ11cbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRTdHlsZXMgPSAoc2NyaXB0U2NyLCBwYXRoPSAnJykgPT4ge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoc2NyaXB0U2NyKSkge1xuICAgIHNjcmlwdFNjciA9IFtzY3JpcHRTY3JdXG4gIH1cbiAgc2NyaXB0U2NyLmZvckVhY2goc3JjID0+IHtcbiAgICAvLyBpZiBhIHN0cmluZyBpcyBwYXNzZWQsIGFzc3VtZSBhIGhyZWYgVVJMXG4gICAgbGV0IHR5cGUgPSAnaHJlZidcbiAgICBsZXQga2V5ID0gc3JjXG4gICAgbGV0IGlkID0gJydcblxuICAgIC8vIGlmIGFuIG9iamVjdCBpcyBwYXNzZWQsIHdvcmsgb3V0IGRldGFpbHMgZnJvbSBpdCdzIHByb3BlcnRpZXNcbiAgICBpZiAodHlwZW9mIHNyYyA9PSAnb2JqZWN0Jykge1xuICAgICAgdHlwZSA9IHNyYy50eXBlIHx8IChzcmMuc3R5bGUgPyAnaW5saW5lJyA6ICdocmVmJylcbiAgICAgIGlkID0gc3JjLmlkXG4gICAgICBrZXkgPSBpZCB8fCBzcmMuaHJlZiB8fCBzcmMuc3R5bGVcbiAgICAgIHNyYyA9IHR5cGUgPT09ICdpbmxpbmUnID8gc3JjLnN0eWxlIDogc3JjLmhyZWZcbiAgICB9XG5cbiAgICAvLyBjaGVjayB3ZSBoYXZlbid0IGFscmVhZHkgbG9hZGVkIHRoaXMgY3NzXG4gICAgaWYgKGlzQ2FjaGVkKGtleSwgJ2NzcycpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBhcHBlbmQgdGhlIHN0eWxlIGludG8gdGhlIGhlYWRcbiAgICBpZiAodHlwZSA9PT0gJ2hyZWYnKSB7XG4gICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpXG4gICAgICBsaW5rLnR5cGUgPSAndGV4dC9jc3MnXG4gICAgICBsaW5rLnJlbCA9ICdzdHlsZXNoZWV0J1xuICAgICAgbGluay5ocmVmID0gKHBhdGggfHwgJycpICsgc3JjXG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmspXG4gICAgfSBlbHNlIHtcbiAgICAgICQoYDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4ke3NyY308L3N0eWxlPmApLmF0dHIoJ2lkJywgaWQpLmFwcGVuZFRvKCQoZG9jdW1lbnQuaGVhZCkpXG4gICAgfVxuXG4gICAgLy8gcmVjb3JkIHRoaXMgaXMgY2FjaGVkXG4gICAgd2luZG93LmZiTG9hZGVkLmNzcy5wdXNoKGtleSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYXBpdGFsaXplcyBhIHN0cmluZ1xuICogQHBhcmFtICB7c3RyaW5nfSBzdHIgdW5jYXBpdGFsaXplZCBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ30gc3RyIGNhcGl0YWxpemVkIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgY2FwaXRhbGl6ZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxiXFx3L2csIGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIG0udG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgbWVyZ2UgPSAob2JqMSwgb2JqMikgPT4ge1xuICBjb25zdCBtZXJnZWRPYmogPSBPYmplY3QuYXNzaWduKHt9LCBvYmoxLCBvYmoyKVxuICBmb3IgKGNvbnN0IHByb3AgaW4gb2JqMikge1xuICAgIGlmIChtZXJnZWRPYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iajJbcHJvcF0pKSB7XG4gICAgICAgIG1lcmdlZE9ialtwcm9wXSA9IEFycmF5LmlzQXJyYXkob2JqMVtwcm9wXSkgPyB1bmlxdWUob2JqMVtwcm9wXS5jb25jYXQob2JqMltwcm9wXSkpIDogb2JqMltwcm9wXVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqMltwcm9wXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbWVyZ2VkT2JqW3Byb3BdID0gbWVyZ2Uob2JqMVtwcm9wXSwgb2JqMltwcm9wXSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lcmdlZE9ialtwcm9wXSA9IG9iajJbcHJvcF1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1lcmdlZE9ialxufVxuXG4vKipcbiAqIEFwcGx5IHRoZSBzYW1lIGV2ZW50IGxpc3RlbmVyIHRvIG11bHRpcGxlIGV2ZW50c1xuICogQHBhcmFtIHtOb2RlfSBlbFxuICogQHBhcmFtIHtzdHJpbmd9IGV2dHMgZXZlbnRzIHRvIGJpbmQgdG9cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gKiBAcmV0dXJuIHtBcnJheX0gZXZlbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBhZGRFdmVudExpc3RlbmVycyA9IChlbCwgZXZ0cywgY2IpID0+IGV2dHMuc3BsaXQoJyAnKS5mb3JFYWNoKGUgPT4gZWwuYWRkRXZlbnRMaXN0ZW5lcihlLCBjYiwgZmFsc2UpKVxuXG4vKipcbiAqIEZpbmQgdGhlIGNsb3Nlc3QgcGFyZW50IGJ5IGNsYXNzXG4gKiBAcGFyYW0gIHtPYmplY3R9IGVsICBET00gZWxlbWVudFxuICogQHBhcmFtICB7c3RyaW5nfSBjbHMgY2xhc3NcbiAqIEByZXR1cm4ge09iamVjdH0gICAgIERPTSBFbGVtZW50XG4gKi9cbmV4cG9ydCBjb25zdCBjbG9zZXN0ID0gKGVsLCBjbHMpID0+IHtcbiAgY29uc3QgY2xhc3NOYW1lID0gY2xzLnJlcGxhY2UoJy4nLCAnJylcbiAgd2hpbGUgKChlbCA9IGVsLnBhcmVudEVsZW1lbnQpICYmICFlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSk7XG4gIHJldHVybiBlbFxufVxuXG4vKipcbiAqIEFkZCBhIG1vYmlsZSBjbGFzc1xuICogQHRvZG8gZmluZCBjc3Mgb25seSBzb2x1dGlvblxuICogQHJldHVybiB7c3RyaW5nfSBNb2JpbGUgY2xhc3MgYWRkZWQgdG8gZm9ybUJ1aWxkZXJcbiAqL1xuZXhwb3J0IGNvbnN0IG1vYmlsZUNsYXNzID0gKCkgPT4ge1xuICBsZXQgbW9iaWxlQ2xhc3MgPSAnJ1xuICA7KGEgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGlmIChcbiAgICAgIC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaS50ZXN0KFxuICAgICAgICBhLFxuICAgICAgKVxuICAgICkge1xuICAgICAgbW9iaWxlQ2xhc3MgPSAnZm9ybWJ1aWxkZXItbW9iaWxlJ1xuICAgIH1cbiAgfSkobmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYSlcbiAgcmV0dXJuIG1vYmlsZUNsYXNzXG59XG5cbi8qKlxuICogTWFrZSBzdHJpbmdzIHNhZmUgdG8gYmUgdXNlZCBhcyBjbGFzc2VzXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHIgc3RyaW5nIHRvIGJlIGNvbnZlcnRlZFxuICogQHJldHVybiB7c3RyaW5nfSAgICAgY29udmVydGVkIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3Qgc2FmZW5hbWUgPSBzdHIgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1xccy9nLCAnLScpLnJlcGxhY2UoL1teYS16QS1aMC05W1xcXV8tXS9nLCAnJylcbn1cblxuLyoqXG4gKiBTdHJpcHMgbm9uLW51bWJlcnMgZnJvbSBhIG51bWJlciBvbmx5IGlucHV0XG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHIgc3RyaW5nIHdpdGggcG9zc2libGUgbnVtYmVyXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICBzdHJpbmcgd2l0aG91dCBudW1iZXJzXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JjZU51bWJlciA9IHN0ciA9PiBzdHIucmVwbGFjZSgvW14wLTldL2csICcnKVxuXG4vKipcbiAqIHN1YnRyYWN0IHRoZSBjb250ZW50cyBvZiAxIGFycmF5IGZyb20gYW5vdGhlclxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAcGFyYW0ge0FycmF5fSBmcm9tXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmV4cG9ydCBjb25zdCBzdWJ0cmFjdCA9IChhcnIsIGZyb20pID0+IHtcbiAgcmV0dXJuIGZyb20uZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuICF+dGhpcy5pbmRleE9mKGEpXG4gIH0sIGFycilcbn1cblxuZXhwb3J0IGNvbnN0IGluc2VydFN0eWxlID0gc3JjcyA9PiB7XG4gIHNyY3MgPSBBcnJheS5pc0FycmF5KHNyY3MpID8gc3JjcyA6IFtzcmNzXVxuICBjb25zdCBwcm9taXNlcyA9IHNyY3MubWFwKFxuICAgICh7IHNyYywgaWQgfSkgPT5cbiAgICAgIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBpZiAod2luZG93LmZiTG9hZGVkLmNzcy5pbmNsdWRlcyhzcmMpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoc3JjKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZvcm1lb1N0eWxlID0gbWFya3VwKCdsaW5rJywgbnVsbCwge1xuICAgICAgICAgIGhyZWY6IHNyYyxcbiAgICAgICAgICByZWw6ICdzdHlsZXNoZWV0JyxcbiAgICAgICAgICBpZCxcbiAgICAgICAgfSlcblxuICAgICAgICBkb2N1bWVudC5oZWFkLmluc2VydEJlZm9yZShmb3JtZW9TdHlsZSwgZG9jdW1lbnQuaGVhZC5maXJzdENoaWxkKVxuICAgICAgfSksXG4gIClcblxuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG59XG5cbmV4cG9ydCBjb25zdCByZW1vdmVTdHlsZSA9IGlkID0+IHtcbiAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKVxuICByZXR1cm4gZWxlbS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsZW0pXG59XG5cbmV4cG9ydCBjb25zdCBib290c3RyYXBDb2x1bW5SZWdleCA9IC9eY29sLSh4c3xzbXxtZHxsZyktKFteXFxzXSspL1xuXG4vKipcbiAqIFJldHVybnMgQXJyYXkgb2YgY2xhc3NOYW1lcyByZWxhdGVkIHRvIEJvb3RzdHJhcFxuICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuICogQHJldHVybnMge3N0cmluZ1tdfVxuICovXG5leHBvcnQgY29uc3QgZ2V0QWxsR3JpZFJlbGF0ZWRDbGFzc2VzID0gY2xhc3NOYW1lID0+IHtcbiAgcmV0dXJuICh0eXBlb2YgY2xhc3NOYW1lID09PSAnc3RyaW5nJykgPyBjbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoeCA9PiBib290c3RyYXBDb2x1bW5SZWdleC50ZXN0KHgpIHx8IHguc3RhcnRzV2l0aCgncm93LScpKSA6IFtdXG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ30gdGl0bGVpemVkIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gdGl0bGVDYXNlKHN0cikge1xuICBjb25zdCBsb3dlcnMgPSBbXG4gICAgJ2EnLFxuICAgICdhbicsXG4gICAgJ2FuZCcsXG4gICAgJ2FzJyxcbiAgICAnYXQnLFxuICAgICdidXQnLFxuICAgICdieScsXG4gICAgJ2ZvcicsXG4gICAgJ2ZvcicsXG4gICAgJ2Zyb20nLFxuICAgICdpbicsXG4gICAgJ2ludG8nLFxuICAgICduZWFyJyxcbiAgICAnbm9yJyxcbiAgICAnb2YnLFxuICAgICdvbicsXG4gICAgJ29udG8nLFxuICAgICdvcicsXG4gICAgJ3RoZScsXG4gICAgJ3RvJyxcbiAgICAnd2l0aCcsXG4gIF0ubWFwKGxvd2VyID0+IGBcXFxccyR7bG93ZXJ9XFxcXHNgKVxuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYCg/ISR7bG93ZXJzLmpvaW4oJ3wnKX0pXFxcXHdcXFxcUypgLCAnZycpXG4gIHJldHVybiBgJHtzdHJ9YC5yZXBsYWNlKFxuICAgIHJlZ2V4LFxuICAgIHR4dCA9PiB0eHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eHQuc2xpY2UoMSkucmVwbGFjZSgvW0EtWl0vZywgd29yZCA9PiBgICR7d29yZH1gKSxcbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlyc3ROdW1iZXJPclVuZGVmaW5lZCguLi5vcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmZpbmQoeCA9PiB0eXBlb2YgeCA9PT0gJ251bWJlcicpXG59XG5cbmNvbnN0IHV0aWxzID0ge1xuICBhZGRFdmVudExpc3RlbmVycyxcbiAgYXR0clN0cmluZyxcbiAgY2FtZWxDYXNlLFxuICBjYXBpdGFsaXplLFxuICBjbG9zZXN0LFxuICBnZXRDb250ZW50VHlwZSxcbiAgZXNjYXBlQXR0cixcbiAgZXNjYXBlQXR0cnMsXG4gIGVzY2FwZUh0bWwsXG4gIGZvcmNlTnVtYmVyLFxuICBmb3JFYWNoLFxuICBnZXRTY3JpcHRzLFxuICBnZXRTdHlsZXMsXG4gIGh5cGhlbkNhc2UsXG4gIGlzQ2FjaGVkLFxuICBtYXJrdXAsXG4gIG1lcmdlLFxuICBtb2JpbGVDbGFzcyxcbiAgbmFtZUF0dHIsXG4gIHBhcnNlZEh0bWwsXG4gIHBhcnNlWE1MLFxuICByZW1vdmVGcm9tQXJyYXksXG4gIHNhZmVBdHRyLFxuICBzYWZlQXR0ck5hbWUsXG4gIHNhZmVuYW1lLFxuICBzdWJ0cmFjdCxcbiAgdHJpbU9iaixcbiAgdW5pcXVlLFxuICB2YWxpZEF0dHIsXG4gIHRpdGxlQ2FzZSxcbiAgZmlyc3ROdW1iZXJPclVuZGVmaW5lZCxcbn1cblxuLyoqXG4gKiBTcGxpdHMgYW4gb2JqZWN0IGJhc2VkIG9uIGFycmF5IG9mIGtleXNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB0byBiZSBzcGxpdFxuICogQHBhcmFtIHtBcnJheX0gIGtleXMgQXJyYXkgb2Yga2V5cyB0byB1c2Ugd2hlbiBzcGxpdHRpbmcgT2JqZWN0XG4gKlxuICogQHJldHVybiB7QXJyYXl9IHJldHVybnMgYW4gYXJyYXkgb2YgT2JqZWN0cywgdGhlIGZpcnN0IHdoZXJlIHRoZSBrZXlzIG1hdGNoZWQsXG4gKiAgICAgICAgICAgICAgICAgdGhlIHNlY29uZCB3aGVyZSB0aGV5IGRpZCBub3RcbiAqL1xudXRpbHMuc3BsaXRPYmplY3QgPSAob2JqLCBrZXlzKSA9PiB7XG4gIC8vIHJlZHVjZXIgZm9yIHJlY3JlYXRpbmcgdGhlIGluaXRpYWwgb2JqZWN0IGFmdGVyIHNwbGl0dGluZyB2aWEga2V5c1xuICAvLyBwcm92aWRlIGEgZnVuY3Rpb24gc28gSSBkb24ndCByZWZlcmVuY2UgdGhlIG9yaWdpbmFsIG9ialxuICBjb25zdCByZWNvbnN0cnVjdE9iaiA9IGluaXRpYWxPYmogPT4gKHJlc3VsdCwga2V5KSA9PiB7XG4gICAgcmVzdWx0W2tleV0gPSBpbml0aWFsT2JqW2tleV1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBjb25zdCBrZXB0ID0gT2JqZWN0LmtleXMob2JqKVxuICAgIC5maWx0ZXIoa2V5ID0+IGtleXMuaW5jbHVkZXMoa2V5KSlcbiAgICAucmVkdWNlKHJlY29uc3RydWN0T2JqKG9iaiksIHt9KVxuICBjb25zdCByZXN0ID0gT2JqZWN0LmtleXMob2JqKVxuICAgIC5maWx0ZXIoa2V5ID0+ICFrZXlzLmluY2x1ZGVzKGtleSkpXG4gICAgLnJlZHVjZShyZWNvbnN0cnVjdE9iaihvYmopLCB7fSlcbiAgcmV0dXJuIFtrZXB0LCByZXN0XVxufVxuXG4vKipcbiAqIGpRdWVyeSBmdW5jdGlvbiB0byBTd2FwIHR3byBlbGVtZW50cyBwb3NpdGlvbnMgaW4gdGhlIGRvbVxuICogQHBhcmFtIHtOb2RlfSB0aGF0XG4gKiBAcmV0dXJucyB7Tm9kZX1cbiAqL1xuJC5mbi5zd2FwV2l0aCA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIGNvbnN0ICR0aGlzID0gdGhpc1xuICBjb25zdCAkdGhhdCA9ICQodGhhdClcblxuICAvLyBjcmVhdGUgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gIGNvbnN0ICR0ZW1wID0gJCgnPGRpdj4nKVxuXG4gIC8vIDMtc3RlcCBzd2FwXG4gICR0aGlzLmJlZm9yZSgkdGVtcClcbiAgJHRoYXQuYmVmb3JlKCR0aGlzKVxuICAkdGVtcC5iZWZvcmUoJHRoYXQpLnJlbW92ZSgpXG5cbiAgcmV0dXJuICR0aGlzXG59XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVNlbGVjdG9yQ2xhc3NOYW1lcyA9IGNsYXNzTmFtZXNPYmogPT5cbiAgT2JqZWN0LmVudHJpZXMoY2xhc3NOYW1lc09iaikucmVkdWNlKChhY2MsIFtrZXksIHZhbF0pID0+ICh7IC4uLmFjYywgW2Ake2tleX1TZWxlY3RvcmBdOiBgLiR7dmFsfWAgfSksIHt9KVxuXG5leHBvcnQgZGVmYXVsdCB1dGlsc1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucmVuZGVyZWQtZm9ybSAqIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCBidXR0b24sXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIGlucHV0LFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCBzZWxlY3QsXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIHRleHRhcmVhIHtcXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCBpbnB1dCB7XFxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xcbn1cXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgdGV4dGFyZWEge1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCBidXR0b24sXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIGlucHV0LFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCBzZWxlY3QsXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIHRleHRhcmVhIHtcXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuYnRuLWdyb3VwIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuYnRuLWdyb3VwID4gLmJ0biB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBmbG9hdDogbGVmdDtcXG59XFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4tZ3JvdXAgPiAuYnRuOmZpcnN0LWNoaWxkOm5vdCg6bGFzdC1jaGlsZCk6bm90KC5kcm9wZG93bi10b2dnbGUpIHtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuYnRuLWdyb3VwID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpOm5vdCguZHJvcGRvd24tdG9nZ2xlKSB7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbn1cXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmJ0bi1ncm91cCAuYnRuICsgLmJ0bixcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmJ0bi1ncm91cCAuYnRuICsgLmJ0bi1ncm91cCxcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmJ0bi1ncm91cCAuYnRuLWdyb3VwICsgLmJ0bixcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmJ0bi1ncm91cCAuYnRuLWdyb3VwICsgLmJ0bi1ncm91cCB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG59XFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4tZ3JvdXAgPiAuYnRuOmxhc3QtY2hpbGQ6bm90KDpmaXJzdC1jaGlsZCksXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4tZ3JvdXAgPiAuZHJvcGRvd24tdG9nZ2xlOm5vdCg6Zmlyc3QtY2hpbGQpLFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuYnRuLWdyb3VwIC5pbnB1dC1ncm91cCAuZm9ybS1jb250cm9sOmxhc3QtY2hpbGQsXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4tZ3JvdXAgLmlucHV0LWdyb3VwLWFkZG9uOmxhc3QtY2hpbGQsXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4tZ3JvdXAgLmlucHV0LWdyb3VwLWJ0bjpmaXJzdC1jaGlsZCA+IC5idG4tZ3JvdXA6bm90KDpmaXJzdC1jaGlsZCkgPiAuYnRuLFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuYnRuLWdyb3VwIC5pbnB1dC1ncm91cC1idG46Zmlyc3QtY2hpbGQgPiAuYnRuOm5vdCg6Zmlyc3QtY2hpbGQpLFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuYnRuLWdyb3VwIC5pbnB1dC1ncm91cC1idG46bGFzdC1jaGlsZCA+IC5idG4sXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4tZ3JvdXAgLmlucHV0LWdyb3VwLWJ0bjpsYXN0LWNoaWxkID4gLmJ0bi1ncm91cCA+IC5idG4sXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4tZ3JvdXAgLmlucHV0LWdyb3VwLWJ0bjpsYXN0LWNoaWxkID4gLmRyb3Bkb3duLXRvZ2dsZSB7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG59XFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4tZ3JvdXAgPiAuYnRuLmFjdGl2ZSxcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmJ0bi1ncm91cCA+IC5idG46YWN0aXZlLFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuYnRuLWdyb3VwID4gLmJ0bjpmb2N1cyxcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmJ0bi1ncm91cCA+IC5idG46aG92ZXIge1xcbiAgei1pbmRleDogMjtcXG59XFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcGFkZGluZzogNnB4IDEycHg7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjQyODU3MTQzO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuYnRuLmJ0bi1sZyB7XFxuICBwYWRkaW5nOiAxMHB4IDE2cHg7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMS4zMzMzMzMzO1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbn1cXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmJ0bi5idG4tc20ge1xcbiAgcGFkZGluZzogNXB4IDEwcHg7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmJ0bi5idG4teHMge1xcbiAgcGFkZGluZzogMXB4IDVweDtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuYnRuLmFjdGl2ZSwgLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4uYnRuLWFjdGl2ZSwgLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG46YWN0aXZlIHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuaW5wdXQtZ3JvdXAgLmZvcm0tY29udHJvbDpsYXN0LWNoaWxkLFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuaW5wdXQtZ3JvdXAtYWRkb246bGFzdC1jaGlsZCxcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmlucHV0LWdyb3VwLWJ0bjpmaXJzdC1jaGlsZCA+IC5idG4tZ3JvdXA6bm90KDpmaXJzdC1jaGlsZCkgPiAuYnRuLFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuaW5wdXQtZ3JvdXAtYnRuOmZpcnN0LWNoaWxkID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKSxcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmlucHV0LWdyb3VwLWJ0bjpsYXN0LWNoaWxkID4gLmJ0bixcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmlucHV0LWdyb3VwLWJ0bjpsYXN0LWNoaWxkID4gLmJ0bi1ncm91cCA+IC5idG4sXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5pbnB1dC1ncm91cC1idG46bGFzdC1jaGlsZCA+IC5kcm9wZG93bi10b2dnbGUge1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuaW5wdXQtZ3JvdXAgLmZvcm0tY29udHJvbCxcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmlucHV0LWdyb3VwLWFkZG9uLFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuaW5wdXQtZ3JvdXAtYnRuIHtcXG4gIGRpc3BsYXk6IHRhYmxlLWNlbGw7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuaW5wdXQtZ3JvdXAtbGcgPiAuZm9ybS1jb250cm9sLFxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuaW5wdXQtZ3JvdXAtbGcgPiAuaW5wdXQtZ3JvdXAtYWRkb24sXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1idG4gPiAuYnRuIHtcXG4gIGhlaWdodDogNDZweDtcXG4gIHBhZGRpbmc6IDEwcHggMTZweDtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjMzMzMzMzM7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuaW5wdXQtZ3JvdXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogdGFibGU7XFxuICBib3JkZXItY29sbGFwc2U6IHNlcGFyYXRlO1xcbn1cXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmlucHV0LWdyb3VwIC5mb3JtLWNvbnRyb2wge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgei1pbmRleDogMjtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW4tYm90dG9tOiAwO1xcbn1cXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmZvcm0tY29udHJvbCxcXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgb3V0cHV0IHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjQyODU3MTQzO1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCB0ZXh0YXJlYS5mb3JtLWNvbnRyb2wge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG4ucmVuZGVyZWQtZm9ybS5mb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAgLmZvcm0tY29udHJvbCB7XFxuICBoZWlnaHQ6IDM0cHg7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogNnB4IDEycHg7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MztcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5mb3JtLWNvbnRyb2w6Zm9jdXMge1xcbiAgb3V0bGluZTogMDtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KSwgMCAwIDhweCByZ2JhKDEwMiwgMTc1LCAyMzMsIDAuNik7XFxufVxcbi5yZW5kZXJlZC1mb3JtLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCAuZm9ybS1ncm91cCB7XFxuICBtYXJnaW4tbGVmdDogMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG59XFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5idG4sXFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5mb3JtLWNvbnRyb2wge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG59XFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5wdWxsLXJpZ2h0IHtcXG4gIGZsb2F0OiByaWdodDtcXG59XFxuLnJlbmRlcmVkLWZvcm0uZm9ybWJ1aWxkZXItZW1iZWRkZWQtYm9vdHN0cmFwIC5wdWxsLWxlZnQge1xcbiAgZmxvYXQ6IGxlZnQ7XFxufVxcbi5yZW5kZXJlZC1mb3JtIC5mb3JtYnVpbGRlci1yZXF1aXJlZCxcXG4ucmVuZGVyZWQtZm9ybSAucmVxdWlyZWQtYXN0ZXJpc2sge1xcbiAgY29sb3I6ICNjMTAwMDA7XFxufVxcbi5yZW5kZXJlZC1mb3JtIC5mb3JtYnVpbGRlci1jaGVja2JveC1ncm91cCBpbnB1dFt0eXBlPWNoZWNrYm94XSxcXG4ucmVuZGVyZWQtZm9ybSAuZm9ybWJ1aWxkZXItY2hlY2tib3gtZ3JvdXAgaW5wdXRbdHlwZT1yYWRpb10sXFxuLnJlbmRlcmVkLWZvcm0gLmZvcm1idWlsZGVyLXJhZGlvLWdyb3VwIGlucHV0W3R5cGU9Y2hlY2tib3hdLFxcbi5yZW5kZXJlZC1mb3JtIC5mb3JtYnVpbGRlci1yYWRpby1ncm91cCBpbnB1dFt0eXBlPXJhZGlvXSB7XFxuICBtYXJnaW46IDAgNHB4IDAgMDtcXG59XFxuLnJlbmRlcmVkLWZvcm0gLmZvcm1idWlsZGVyLWNoZWNrYm94LWlubGluZSxcXG4ucmVuZGVyZWQtZm9ybSAuZm9ybWJ1aWxkZXItcmFkaW8taW5saW5lIHtcXG4gIG1hcmdpbi1yaWdodDogOHB4O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG59XFxuLnJlbmRlcmVkLWZvcm0gLmZvcm1idWlsZGVyLWNoZWNrYm94LWlubGluZSBsYWJlbCBpbnB1dFt0eXBlPXRleHRdLFxcbi5yZW5kZXJlZC1mb3JtIC5mb3JtYnVpbGRlci1yYWRpby1pbmxpbmUgbGFiZWwgaW5wdXRbdHlwZT10ZXh0XSB7XFxuICBtYXJnaW4tdG9wOiAwO1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAuZm9ybWJ1aWxkZXItY2hlY2tib3gtaW5saW5lOmZpcnN0LWNoaWxkLFxcbi5yZW5kZXJlZC1mb3JtIC5mb3JtYnVpbGRlci1yYWRpby1pbmxpbmU6Zmlyc3QtY2hpbGQge1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAuZm9ybWJ1aWxkZXItYXV0b2NvbXBsZXRlLWxpc3Qge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxuICBib3JkZXItd2lkdGg6IDAgMXB4IDFweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHotaW5kZXg6IDIwO1xcbiAgbWF4LWhlaWdodDogMjAwcHg7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAuZm9ybWJ1aWxkZXItYXV0b2NvbXBsZXRlLWxpc3QgbGkge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIHBhZGRpbmc6IDVweDtcXG4gIG1hcmdpbjogMDtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMjAwbXMgZWFzZS1pbi1vdXQ7XFxufVxcbi5yZW5kZXJlZC1mb3JtIC5mb3JtYnVpbGRlci1hdXRvY29tcGxldGUtbGlzdCBsaTpob3ZlciwgLnJlbmRlcmVkLWZvcm0gLmZvcm1idWlsZGVyLWF1dG9jb21wbGV0ZS1saXN0IGxpLmFjdGl2ZS1vcHRpb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA3NSk7XFxufVxcbi5yZW5kZXJlZC1mb3JtICpbdG9vbHRpcF0ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAqW3Rvb2x0aXBdOmhvdmVyOjphZnRlciB7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuOSk7XFxuICBib3JkZXItcmFkaXVzOiA1cHggNXB4IDVweCAwO1xcbiAgYm90dG9tOiAyM3B4O1xcbiAgY29sb3I6ICNmZmY7XFxuICBjb250ZW50OiBhdHRyKHRvb2x0aXApO1xcbiAgcGFkZGluZzogMTBweCA1cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiA5ODtcXG4gIGxlZnQ6IDJweDtcXG4gIHdpZHRoOiAyMzBweDtcXG4gIHRleHQtc2hhZG93OiBub25lO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNWVtO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAqW3Rvb2x0aXBdOmhvdmVyOjpiZWZvcmUge1xcbiAgYm9yZGVyOiBzb2xpZDtcXG4gIGJvcmRlci1jb2xvcjogIzIyMiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci13aWR0aDogNnB4IDZweCAwO1xcbiAgYm90dG9tOiAxN3B4O1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBsZWZ0OiAycHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiA5OTtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLnJlbmRlcmVkLWZvcm0gLnRvb2x0aXAtZWxlbWVudCB7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kOiAjMDAwO1xcbiAgd2lkdGg6IDE2cHg7XFxuICBoZWlnaHQ6IDE2cHg7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBsaW5lLWhlaWdodDogMTZweDtcXG4gIG1hcmdpbjogMCA1cHg7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcbi5yZW5kZXJlZC1mb3JtIC5rYy10b2dnbGUge1xcbiAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7XFxufVxcbi5yZW5kZXJlZC1mb3JtIC5rYy10b2dnbGUgc3BhbiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogNDhweDtcXG4gIGhlaWdodDogMjRweDtcXG4gIGJhY2tncm91bmQ6ICNlNmU2ZTY7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjY2NjO1xcbiAgcGFkZGluZzogMnB4O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAua2MtdG9nZ2xlIHNwYW46OmFmdGVyLCAucmVuZGVyZWQtZm9ybSAua2MtdG9nZ2xlIHNwYW46OmJlZm9yZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB0b3A6IDA7XFxufVxcbi5yZW5kZXJlZC1mb3JtIC5rYy10b2dnbGUgc3Bhbjo6YWZ0ZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICB3aWR0aDogNTAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgbGVmdDogMDtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sIHdoaXRlIDAlLCAjY2NjIDEwMCUpO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzk5OTk5OTtcXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxMDBtcztcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcXG59XFxuLnJlbmRlcmVkLWZvcm0gLmtjLXRvZ2dsZSBzcGFuOjpiZWZvcmUge1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgdG9wOiAycHg7XFxuICBsZWZ0OiAycHg7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA0cHgpO1xcbiAgaGVpZ2h0OiAxOHB4O1xcbiAgYm94LXNoYWRvdzogMCAwIDFweCAxcHggI2IzYjNiMyBpbnNldDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAua2MtdG9nZ2xlIGlucHV0IHtcXG4gIGhlaWdodDogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB3aWR0aDogMDtcXG4gIG9wYWNpdHk6IDA7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIG1hcmdpbjogMDtcXG59XFxuLnJlbmRlcmVkLWZvcm0gLmtjLXRvZ2dsZSBpbnB1dDpjaGVja2VkICsgc3Bhbjo6YWZ0ZXIge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAua2MtdG9nZ2xlIGlucHV0OmNoZWNrZWQgKyBzcGFuOjpiZWZvcmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzZmYzY2NTtcXG59XFxuLnJlbmRlcmVkLWZvcm0gbGFiZWwge1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG59XFxuLnJlbmRlcmVkLWZvcm0gLmZvcm0tZ3JvdXAgLmZvcm1idWlsZGVyLXJlcXVpcmVkIHtcXG4gIGNvbG9yOiAjYzEwMDAwO1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAub3RoZXItb3B0aW9uOmNoZWNrZWQgKyBsYWJlbCBpbnB1dCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbi5yZW5kZXJlZC1mb3JtIC5vdGhlci12YWwge1xcbiAgbWFyZ2luLWxlZnQ6IDVweDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcbi5yZW5kZXJlZC1mb3JtIC5mb3JtLWNvbnRyb2wubnVtYmVyIHtcXG4gIHdpZHRoOiBhdXRvO1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAuZm9ybS1jb250cm9sW3R5cGU9Y29sb3JdIHtcXG4gIHdpZHRoOiA2MHB4O1xcbiAgcGFkZGluZzogMnB4O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4ucmVuZGVyZWQtZm9ybSAuZm9ybS1jb250cm9sW211bHRpcGxlXSB7XFxuICBoZWlnaHQ6IGF1dG87XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uLy4uL3NyYy9zYXNzL2Zvcm0tcmVuZGVyLnNjc3NcIixcIndlYnBhY2s6Ly8uLy4uL3NyYy9zYXNzL2Jhc2UvX2JzLnNjc3NcIixcIndlYnBhY2s6Ly8uLy4uL3NyYy9zYXNzL2Jhc2UvX2ZpZWxkcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi8uLi9zcmMvc2Fzcy9iYXNlL192YXJpYWJsZXMuc2Nzc1wiLFwid2VicGFjazovLy4vLi4vc3JjL3Nhc3MvX3Rvb2x0aXAuc2Nzc1wiLFwid2VicGFjazovLy4vLi4vc3JjL3Nhc3MvX2tjLXRvZ2dsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUdFO0VBQ0Usc0JBQUE7QUFGSjtBQ0RBOzs7O0VBSUUsb0JBQUE7RUFDQSxrQkFBQTtFQUNBLG9CQUFBO0FER0Y7QUNBQTtFQUNFLG1CQUFBO0FERUY7QUNDQTtFQUNFLGNBQUE7QURDRjtBQ0VBOzs7O0VBSUUsb0JBQUE7RUFDQSxrQkFBQTtFQUNBLG9CQUFBO0FEQUY7QUNHQTtFQUNFLGtCQUFBO0VBQ0EscUJBQUE7RUFDQSxzQkFBQTtBRERGO0FDR0U7RUFDRSxrQkFBQTtFQUNBLFdBQUE7QURESjtBQ0lFO0VBQ0UsMEJBQUE7RUFDQSw2QkFBQTtBREZKO0FDS0U7RUFDRSxn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QkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsbUJBQUE7RUFDQSxxQkFBQTtFQUNBLGtCQUFBO0VBQ0EseUJBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7RUFDQSxzQkFBQTtBTHlRSjtBS3ZRSTtFQUVFLGtCQUFBO0VBQ0EscUJBQUE7RUFDQSxNQUFBO0FMd1FOO0FLclFJO0VBQ0Usa0JBQUE7RUFDQSxXQUFBO0VBQ0EsVUFBQTtFQUNBLFlBQUE7RUFDQSxPQUFBO0VBQ0Esa0JBQUE7RUFDQSwyREFBQTtFQUNBLHlCQUFBO0VBQ0EsMkJBQUE7RUFDQSx3QkFBQTtBTHVRTjtBS3BRSTtFQUNFLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxXQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0VBQ0EscUNBQUE7RUFDQSw2QkFBQTtBTHNRTjtBS2xRRTtFQUNFLFNBQUE7RUFDQSxnQkFBQTtFQUNBLFFBQUE7RUFDQSxVQUFBO0VBQ0Esb0JBQUE7RUFDQSxTQUFBO0FMb1FKO0FLalFNO0VBQ0UsMkJBQUE7QUxtUVI7QUtoUU07RUFDRSx5QkZuREQ7QUhxVFA7QUFuVEU7RUFDRSxtQkFBQTtBQXFUSjtBQWxURTtFQUNFLGNHVEk7QUg2VFI7QUFoVEk7RUFDRSxxQkFBQTtBQWtUTjtBQTlTRTtFQUNFLGdCQUFBO0VBQ0EsYUFBQTtBQWdUSjtBQTVTSTtFQUNFLFdBQUE7QUE4U047QUEzU0k7RUFDRSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHFCQUFBO0FBNlNOO0FBMVNJO0VBQ0UsWUFBQTtBQTRTTlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0ICdiYXNlL3ZhcmlhYmxlcyc7XFxuXFxuLnJlbmRlcmVkLWZvcm0ge1xcbiAgKiB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB9XFxuXFxuICAmLmZvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCB7XFxuICAgIEBpbXBvcnQgJ2Jhc2UvYnMnO1xcbiAgfVxcbiAgQGltcG9ydCAnYmFzZS9maWVsZHMnO1xcbiAgQGltcG9ydCAndG9vbHRpcCc7XFxuICBAaW1wb3J0ICdrYy10b2dnbGUnO1xcblxcbiAgbGFiZWwge1xcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgfVxcblxcbiAgLmZvcm0tZ3JvdXAgLmZvcm1idWlsZGVyLXJlcXVpcmVkIHtcXG4gICAgY29sb3I6ICRlcnJvcjtcXG4gIH1cXG5cXG4gIC5vdGhlci1vcHRpb246Y2hlY2tlZCArIGxhYmVsIHtcXG4gICAgaW5wdXQge1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgfVxcbiAgfVxcblxcbiAgLm90aGVyLXZhbCB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1cHg7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuXFxuICAuZm9ybS1jb250cm9sIHtcXG4gICAgJi5udW1iZXIge1xcbiAgICAgIHdpZHRoOiBhdXRvO1xcbiAgICB9XFxuXFxuICAgICZbdHlwZT0nY29sb3InXSB7XFxuICAgICAgd2lkdGg6IDYwcHg7XFxuICAgICAgcGFkZGluZzogMnB4O1xcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgfVxcblxcbiAgICAmW211bHRpcGxlXSB7XFxuICAgICAgaGVpZ2h0OiBhdXRvO1xcbiAgICB9XFxuICB9XFxufVwiLFwiLy8gTWluaW1hbCBCb290c3RyYXBcXG5idXR0b24sXFxuaW5wdXQsXFxuc2VsZWN0LFxcbnRleHRhcmVhIHtcXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XFxufVxcblxcbmlucHV0IHtcXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XFxufVxcblxcbnRleHRhcmVhIHtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG5idXR0b24sXFxuaW5wdXQsXFxuc2VsZWN0LFxcbnRleHRhcmVhIHtcXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XFxufVxcblxcbi5idG4tZ3JvdXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG5cXG4gICYgPiAuYnRuIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBmbG9hdDogbGVmdDtcXG4gIH1cXG5cXG4gID4gLmJ0bjpmaXJzdC1jaGlsZDpub3QoOmxhc3QtY2hpbGQpOm5vdCguZHJvcGRvd24tdG9nZ2xlKSB7XFxuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xcbiAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMDtcXG4gIH1cXG5cXG4gID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpOm5vdCguZHJvcGRvd24tdG9nZ2xlKSB7XFxuICAgIGJvcmRlci1yYWRpdXM6IDA7XFxuICB9XFxuXFxuICAuYnRuICsgLmJ0bixcXG4gIC5idG4gKyAuYnRuLWdyb3VwLFxcbiAgLmJ0bi1ncm91cCArIC5idG4sXFxuICAuYnRuLWdyb3VwICsgLmJ0bi1ncm91cCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAtMXB4O1xcbiAgfVxcblxcbiAgPiAuYnRuOmxhc3QtY2hpbGQ6bm90KDpmaXJzdC1jaGlsZCksXFxuICA+IC5kcm9wZG93bi10b2dnbGU6bm90KDpmaXJzdC1jaGlsZCksXFxuICAuaW5wdXQtZ3JvdXAgLmZvcm0tY29udHJvbDpsYXN0LWNoaWxkLFxcbiAgLmlucHV0LWdyb3VwLWFkZG9uOmxhc3QtY2hpbGQsXFxuICAuaW5wdXQtZ3JvdXAtYnRuOmZpcnN0LWNoaWxkID4gLmJ0bi1ncm91cDpub3QoOmZpcnN0LWNoaWxkKSA+IC5idG4sXFxuICAuaW5wdXQtZ3JvdXAtYnRuOmZpcnN0LWNoaWxkID4gLmJ0bjpub3QoOmZpcnN0LWNoaWxkKSxcXG4gIC5pbnB1dC1ncm91cC1idG46bGFzdC1jaGlsZCA+IC5idG4sXFxuICAuaW5wdXQtZ3JvdXAtYnRuOmxhc3QtY2hpbGQgPiAuYnRuLWdyb3VwID4gLmJ0bixcXG4gIC5pbnB1dC1ncm91cC1idG46bGFzdC1jaGlsZCA+IC5kcm9wZG93bi10b2dnbGUge1xcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcbiAgfVxcblxcbiAgPiAuYnRuLmFjdGl2ZSxcXG4gID4gLmJ0bjphY3RpdmUsXFxuICA+IC5idG46Zm9jdXMsXFxuICA+IC5idG46aG92ZXIge1xcbiAgICB6LWluZGV4OiAyO1xcbiAgfVxcbn1cXG5cXG4uYnRuIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBhZGRpbmc6IDZweCAxMnB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuXFxuICAmLmJ0bi1sZyB7XFxuICAgIHBhZGRpbmc6IDEwcHggMTZweDtcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcbiAgICBsaW5lLWhlaWdodDogMS4zMzMzMzMzO1xcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICB9XFxuXFxuICAmLmJ0bi1zbSB7XFxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xcbiAgICBmb250LXNpemU6IDEycHg7XFxuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIH1cXG5cXG4gICYuYnRuLXhzIHtcXG4gICAgcGFkZGluZzogMXB4IDVweDtcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcbiAgICBsaW5lLWhlaWdodDogMS41O1xcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICB9XFxuXFxuICAmLmFjdGl2ZSxcXG4gICYuYnRuLWFjdGl2ZSxcXG4gICY6YWN0aXZlIHtcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIH1cXG59XFxuXFxuLmlucHV0LWdyb3VwIC5mb3JtLWNvbnRyb2w6bGFzdC1jaGlsZCxcXG4uaW5wdXQtZ3JvdXAtYWRkb246bGFzdC1jaGlsZCxcXG4uaW5wdXQtZ3JvdXAtYnRuOmZpcnN0LWNoaWxkID4gLmJ0bi1ncm91cDpub3QoOmZpcnN0LWNoaWxkKSA+IC5idG4sXFxuLmlucHV0LWdyb3VwLWJ0bjpmaXJzdC1jaGlsZCA+IC5idG46bm90KDpmaXJzdC1jaGlsZCksXFxuLmlucHV0LWdyb3VwLWJ0bjpsYXN0LWNoaWxkID4gLmJ0bixcXG4uaW5wdXQtZ3JvdXAtYnRuOmxhc3QtY2hpbGQgPiAuYnRuLWdyb3VwID4gLmJ0bixcXG4uaW5wdXQtZ3JvdXAtYnRuOmxhc3QtY2hpbGQgPiAuZHJvcGRvd24tdG9nZ2xlIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAgLmZvcm0tY29udHJvbCxcXG4uaW5wdXQtZ3JvdXAtYWRkb24sXFxuLmlucHV0LWdyb3VwLWJ0biB7XFxuICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAtbGcgPiAuZm9ybS1jb250cm9sLFxcbi5pbnB1dC1ncm91cC1sZyA+IC5pbnB1dC1ncm91cC1hZGRvbixcXG4uaW5wdXQtZ3JvdXAtbGcgPiAuaW5wdXQtZ3JvdXAtYnRuID4gLmJ0biB7XFxuICBoZWlnaHQ6IDQ2cHg7XFxuICBwYWRkaW5nOiAxMHB4IDE2cHg7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBsaW5lLWhlaWdodDogMS4zMzMzMzMzO1xcbn1cXG5cXG4uaW5wdXQtZ3JvdXAge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogdGFibGU7XFxuICBib3JkZXItY29sbGFwc2U6IHNlcGFyYXRlO1xcblxcbiAgLmZvcm0tY29udHJvbCB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgei1pbmRleDogMjtcXG4gICAgZmxvYXQ6IGxlZnQ7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xcbiAgfVxcbn1cXG5cXG4uZm9ybS1jb250cm9sLFxcbm91dHB1dCB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG50ZXh0YXJlYS5mb3JtLWNvbnRyb2wge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG4uZm9ybS1jb250cm9sIHtcXG4gIGhlaWdodDogMzRweDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiA2cHggMTJweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjQyODU3MTQzO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcblxcbiAgJjpmb2N1cyB7XFxuICAgIG91dGxpbmU6IDA7XFxuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KSwgMCAwIDhweCByZ2JhKDEwMiwgMTc1LCAyMzMsIDAuNik7XFxuICB9XFxufVxcblxcbi5mb3JtLWdyb3VwIHtcXG4gIG1hcmdpbi1sZWZ0OiAwcHg7XFxuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xcbn1cXG5cXG4uYnRuLFxcbi5mb3JtLWNvbnRyb2wge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG59XFxuXFxuLnB1bGwtcmlnaHQge1xcbiAgZmxvYXQ6IHJpZ2h0O1xcbn1cXG5cXG4ucHVsbC1sZWZ0IHtcXG4gIGZsb2F0OiBsZWZ0O1xcbn1cIixcIi5mb3JtYnVpbGRlci1yZXF1aXJlZCxcXG4ucmVxdWlyZWQtYXN0ZXJpc2sge1xcbiAgY29sb3I6ICRlcnJvcjtcXG59XFxuXFxuLmZvcm1idWlsZGVyLWNoZWNrYm94LWdyb3VwLFxcbi5mb3JtYnVpbGRlci1yYWRpby1ncm91cCB7XFxuICBpbnB1dFt0eXBlPSdjaGVja2JveCddLFxcbiAgaW5wdXRbdHlwZT0ncmFkaW8nXSB7XFxuICAgIG1hcmdpbjogMCA0cHggMCAwO1xcbiAgfVxcbn1cXG5cXG4uZm9ybWJ1aWxkZXItY2hlY2tib3gtaW5saW5lLFxcbi5mb3JtYnVpbGRlci1yYWRpby1pbmxpbmUge1xcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgbGFiZWwge1xcbiAgICBpbnB1dFt0eXBlPSd0ZXh0J10ge1xcbiAgICAgIG1hcmdpbi10b3A6IDA7XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuLmZvcm1idWlsZGVyLWNoZWNrYm94LWlubGluZTpmaXJzdC1jaGlsZCxcXG4uZm9ybWJ1aWxkZXItcmFkaW8taW5saW5lOmZpcnN0LWNoaWxkIHtcXG4gIHBhZGRpbmctbGVmdDogMDtcXG59XFxuXFxuLmZvcm1idWlsZGVyLWF1dG9jb21wbGV0ZS1saXN0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICRncmV5LWxpZ2h0O1xcbiAgYm9yZGVyLXdpZHRoOiAwIDFweCAxcHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAyMDtcXG4gIG1heC1oZWlnaHQ6IDIwMHB4O1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG5cXG4gIGxpIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAyMDBtcyBlYXNlLWluLW91dDtcXG5cXG4gICAgJjpob3ZlcixcXG4gICAgJi5hY3RpdmUtb3B0aW9uIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkaW5wdXQtYm94LXNoYWRvdy1jb2xvcjtcXG4gICAgfVxcbiAgfVxcbn1cXG5cIixcIiRibGFjazogIzAwMDtcXG4kd2hpdGU6ICNmZmY7XFxuJG9mZi13aGl0ZTogI2ZlZmVmZTtcXG4kZ3JleTogIzY2NjtcXG4kZ3JleS1kYXJrOiAjMjIyO1xcbiRncmV5LWxpZ2h0OiAjY2NjO1xcbiRncmV5LWxpZ2h0LTMwOiBsaWdodGVuKCRncmV5LCAzMCUpO1xcbiRkaXJ0LWdyYXk6ICMyMzI0MWY7XFxuXFxuJHN1Y2Nlc3M6ICMwOGZlMDA7XFxuJGVycm9yOiAjYzEwMDAwO1xcbiRyZW1vdmU6ICNjNjY4NjU7XFxuJGNvcHk6ICM2ZmM2NjU7XFxuJGVkaXQ6ICM2NWFhYzY7XFxuXFxuJGlucHV0LWJvcmRlci1jb2xvcjogI2M1YzVjNTtcXG5cXG4kb3ZlcmxheS1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcbiRlbXB0eS1zdGFnZS1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTtcXG4kaGlkZGVuLWZpZWxkLWJnY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC42KTtcXG4kaW5wdXQtYm94LXNoYWRvdy1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA3NSk7XFxuXFxuJHByaW1hcnk6ICMzMzdhYjc7XFxuXCIsXCIvLyBUT09MVElQICAgLS0tLS0tLS0tLS0tXFxuKlt0b29sdGlwXSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbipbdG9vbHRpcF06aG92ZXI6OmFmdGVyIHtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC45KTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweCA1cHggNXB4IDA7XFxuICBib3R0b206IDIzcHg7XFxuICBjb2xvcjogJHdoaXRlO1xcbiAgY29udGVudDogYXR0cih0b29sdGlwKTtcXG4gIHBhZGRpbmc6IDEwcHggNXB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogOTg7XFxuICBsZWZ0OiAycHg7XFxuICB3aWR0aDogMjMwcHg7XFxuICB0ZXh0LXNoYWRvdzogbm9uZTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjVlbTtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuXFxuKlt0b29sdGlwXTpob3Zlcjo6YmVmb3JlIHtcXG4gIGJvcmRlcjogc29saWQ7XFxuICBib3JkZXItY29sb3I6ICRncmV5LWRhcmsgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItd2lkdGg6IDZweCA2cHggMDtcXG4gIGJvdHRvbTogMTdweDtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgbGVmdDogMnB4O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogOTk7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcblxcbi50b29sdGlwLWVsZW1lbnQge1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIGNvbG9yOiAkd2hpdGU7XFxuICBiYWNrZ3JvdW5kOiAkYmxhY2s7XFxuICB3aWR0aDogMTZweDtcXG4gIGhlaWdodDogMTZweDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGxpbmUtaGVpZ2h0OiAxNnB4O1xcbiAgbWFyZ2luOiAwIDVweDtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XCIsXCIua2MtdG9nZ2xlIHtcXG4gIHBhZGRpbmctbGVmdDogMCAhaW1wb3J0YW50O1xcblxcbiAgc3BhbiB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgd2lkdGg6IDQ4cHg7XFxuICAgIGhlaWdodDogMjRweDtcXG4gICAgYmFja2dyb3VuZDogbGlnaHRlbigkZ3JleSwgNTAlKTtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGxpZ2h0ZW4oJGdyZXksIDQwJSk7XFxuICAgIHBhZGRpbmc6IDJweDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgZmxvYXQ6IGxlZnQ7XFxuICAgIG1hcmdpbi1yaWdodDogNXB4O1xcbiAgICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xcblxcbiAgICAmOjphZnRlcixcXG4gICAgJjo6YmVmb3JlIHtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgIHRvcDogMDtcXG4gICAgfVxcblxcbiAgICAmOjphZnRlciB7XFxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgIGNvbnRlbnQ6ICcnO1xcbiAgICAgIHdpZHRoOiA1MCU7XFxuICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgIGxlZnQ6IDA7XFxuICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sIGxpZ2h0ZW4oJGdyZXktbGlnaHQtMzAsIDMwJSkgMCUsICRncmV5LWxpZ2h0IDEwMCUpO1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGxpZ2h0ZW4oJGdyZXksIDIwJSk7XFxuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDEwMG1zO1xcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTtcXG4gICAgfVxcblxcbiAgICAmOjpiZWZvcmUge1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgICB0b3A6IDJweDtcXG4gICAgICBsZWZ0OiAycHg7XFxuICAgICAgY29udGVudDogJyc7XFxuICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDRweCk7XFxuICAgICAgaGVpZ2h0OiAxOHB4O1xcbiAgICAgIGJveC1zaGFkb3c6IDAgMCAxcHggMXB4IGxpZ2h0ZW4oJGdyZXksIDMwJSkgaW5zZXQ7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIH1cXG4gIH1cXG5cXG4gIGlucHV0IHtcXG4gICAgaGVpZ2h0OiAwO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB3aWR0aDogMDtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIG1hcmdpbjogMDtcXG5cXG4gICAgJjpjaGVja2VkICsgc3BhbiB7XFxuICAgICAgJjo6YWZ0ZXIge1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpO1xcbiAgICAgIH1cXG5cXG4gICAgICAmOjpiZWZvcmUge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvcHk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLyohXG4gKiBtaTE4biAtIGh0dHBzOi8vZ2l0aHViLmNvbS9EcmFnZ2FibGUvbWkxOG5cbiAqIFZlcnNpb246IDAuNC43XG4gKiBBdXRob3I6IEtldmluIENoYXBwZWxsIDxrZXZpbi5iLmNoYXBwZWxsQGdtYWlsLmNvbT4gKGh0dHA6Ly9rZXZpbi1jaGFwcGVsbC5jb20pXG4gKi9cbm1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBvPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLG4pLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9bihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgcj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihyKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIG8gaW4gZSluLmQocixvLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsbykpO3JldHVybiByfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LFwiYVwiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPVwiXCIsbihuLnM9Nyl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sbz1uKDIpLGk9bigxMCkscz1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIGEoZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09cy5jYWxsKGUpfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIG51bGwhPT1lJiZcIm9iamVjdFwiPT09KHZvaWQgMD09PWU/XCJ1bmRlZmluZWRcIjpyKGUpKX1mdW5jdGlvbiBjKGUpe3JldHVyblwiW29iamVjdCBGdW5jdGlvbl1cIj09PXMuY2FsbChlKX1mdW5jdGlvbiBmKGUsdCl7aWYobnVsbCE9PWUmJnZvaWQgMCE9PWUpaWYoXCJvYmplY3RcIiE9PSh2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6cihlKSkmJihlPVtlXSksYShlKSlmb3IodmFyIG49MCxvPWUubGVuZ3RoO248bztuKyspdC5jYWxsKG51bGwsZVtuXSxuLGUpO2Vsc2UgZm9yKHZhciBpIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsaSkmJnQuY2FsbChudWxsLGVbaV0saSxlKX1lLmV4cG9ydHM9e2lzQXJyYXk6YSxpc0FycmF5QnVmZmVyOmZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PXMuY2FsbChlKX0saXNCdWZmZXI6aSxpc0Zvcm1EYXRhOmZ1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBGb3JtRGF0YSYmZSBpbnN0YW5jZW9mIEZvcm1EYXRhfSxpc0FycmF5QnVmZmVyVmlldzpmdW5jdGlvbihlKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJkFycmF5QnVmZmVyLmlzVmlldz9BcnJheUJ1ZmZlci5pc1ZpZXcoZSk6ZSYmZS5idWZmZXImJmUuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ9LGlzU3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfSxpc051bWJlcjpmdW5jdGlvbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZX0saXNPYmplY3Q6dSxpc1VuZGVmaW5lZDpmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZX0saXNEYXRlOmZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBEYXRlXVwiPT09cy5jYWxsKGUpfSxpc0ZpbGU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEZpbGVdXCI9PT1zLmNhbGwoZSl9LGlzQmxvYjpmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQmxvYl1cIj09PXMuY2FsbChlKX0saXNGdW5jdGlvbjpjLGlzU3RyZWFtOmZ1bmN0aW9uKGUpe3JldHVybiB1KGUpJiZjKGUucGlwZSl9LGlzVVJMU2VhcmNoUGFyYW1zOmZ1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBVUkxTZWFyY2hQYXJhbXMmJmUgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXN9LGlzU3RhbmRhcmRCcm93c2VyRW52OmZ1bmN0aW9uKCl7cmV0dXJuKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBuYXZpZ2F0b3J8fFwiUmVhY3ROYXRpdmVcIiE9PW5hdmlnYXRvci5wcm9kdWN0KSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50fSxmb3JFYWNoOmYsbWVyZ2U6ZnVuY3Rpb24gZSgpe3ZhciB0PXt9O2Z1bmN0aW9uIG4obixvKXtcIm9iamVjdFwiPT09cih0W29dKSYmXCJvYmplY3RcIj09PSh2b2lkIDA9PT1uP1widW5kZWZpbmVkXCI6cihuKSk/dFtvXT1lKHRbb10sbik6dFtvXT1ufWZvcih2YXIgbz0wLGk9YXJndW1lbnRzLmxlbmd0aDtvPGk7bysrKWYoYXJndW1lbnRzW29dLG4pO3JldHVybiB0fSxleHRlbmQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBmKHQsZnVuY3Rpb24odCxyKXtlW3JdPW4mJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/byh0LG4pOnR9KSxlfSx0cmltOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL15cXHMqLyxcIlwiKS5yZXBsYWNlKC9cXHMqJC8sXCJcIil9fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiOyhmdW5jdGlvbih0KXt2YXIgcj1uKDApLG89bigxMyksaT17XCJDb250ZW50LVR5cGVcIjpcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwifTtmdW5jdGlvbiBzKGUsdCl7IXIuaXNVbmRlZmluZWQoZSkmJnIuaXNVbmRlZmluZWQoZVtcIkNvbnRlbnQtVHlwZVwiXSkmJihlW1wiQ29udGVudC1UeXBlXCJdPXQpfXZhciBhPXthZGFwdGVyOmZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFhNTEh0dHBSZXF1ZXN0P2U9bigzKTp2b2lkIDAhPT10JiYoZT1uKDMpKSxlfSgpLHRyYW5zZm9ybVJlcXVlc3Q6W2Z1bmN0aW9uKGUsdCl7cmV0dXJuIG8odCxcIkNvbnRlbnQtVHlwZVwiKSxyLmlzRm9ybURhdGEoZSl8fHIuaXNBcnJheUJ1ZmZlcihlKXx8ci5pc0J1ZmZlcihlKXx8ci5pc1N0cmVhbShlKXx8ci5pc0ZpbGUoZSl8fHIuaXNCbG9iKGUpP2U6ci5pc0FycmF5QnVmZmVyVmlldyhlKT9lLmJ1ZmZlcjpyLmlzVVJMU2VhcmNoUGFyYW1zKGUpPyhzKHQsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOFwiKSxlLnRvU3RyaW5nKCkpOnIuaXNPYmplY3QoZSk/KHModCxcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiKSxKU09OLnN0cmluZ2lmeShlKSk6ZX1dLHRyYW5zZm9ybVJlc3BvbnNlOltmdW5jdGlvbihlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl0cnl7ZT1KU09OLnBhcnNlKGUpfWNhdGNoKGUpe31yZXR1cm4gZX1dLHRpbWVvdXQ6MCx4c3JmQ29va2llTmFtZTpcIlhTUkYtVE9LRU5cIix4c3JmSGVhZGVyTmFtZTpcIlgtWFNSRi1UT0tFTlwiLG1heENvbnRlbnRMZW5ndGg6LTEsdmFsaWRhdGVTdGF0dXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTIwMCYmZTwzMDB9LGhlYWRlcnM6e2NvbW1vbjp7QWNjZXB0OlwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qXCJ9fX07ci5mb3JFYWNoKFtcImRlbGV0ZVwiLFwiZ2V0XCIsXCJoZWFkXCJdLGZ1bmN0aW9uKGUpe2EuaGVhZGVyc1tlXT17fX0pLHIuZm9yRWFjaChbXCJwb3N0XCIsXCJwdXRcIixcInBhdGNoXCJdLGZ1bmN0aW9uKGUpe2EuaGVhZGVyc1tlXT1yLm1lcmdlKGkpfSksZS5leHBvcnRzPWF9KS5jYWxsKHRoaXMsbigxMikpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciBuPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxyPTA7cjxuLmxlbmd0aDtyKyspbltyXT1hcmd1bWVudHNbcl07cmV0dXJuIGUuYXBwbHkodCxuKX19fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigwKSxvPW4oMTQpLGk9bigxNikscz1uKDE3KSxhPW4oMTgpLHU9big0KSxjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5idG9hJiZ3aW5kb3cuYnRvYS5iaW5kKHdpbmRvdyl8fG4oMTkpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCxmKXt2YXIgbD1lLmRhdGEscD1lLmhlYWRlcnM7ci5pc0Zvcm1EYXRhKGwpJiZkZWxldGUgcFtcIkNvbnRlbnQtVHlwZVwiXTt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3QsaD1cIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLGc9ITE7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5YRG9tYWluUmVxdWVzdHx8XCJ3aXRoQ3JlZGVudGlhbHNcImluIGR8fGEoZS51cmwpfHwoZD1uZXcgd2luZG93LlhEb21haW5SZXF1ZXN0LGg9XCJvbmxvYWRcIixnPSEwLGQub25wcm9ncmVzcz1mdW5jdGlvbigpe30sZC5vbnRpbWVvdXQ9ZnVuY3Rpb24oKXt9KSxlLmF1dGgpe3ZhciBtPWUuYXV0aC51c2VybmFtZXx8XCJcIix5PWUuYXV0aC5wYXNzd29yZHx8XCJcIjtwLkF1dGhvcml6YXRpb249XCJCYXNpYyBcIitjKG0rXCI6XCIreSl9aWYoZC5vcGVuKGUubWV0aG9kLnRvVXBwZXJDYXNlKCksaShlLnVybCxlLnBhcmFtcyxlLnBhcmFtc1NlcmlhbGl6ZXIpLCEwKSxkLnRpbWVvdXQ9ZS50aW1lb3V0LGRbaF09ZnVuY3Rpb24oKXtpZihkJiYoND09PWQucmVhZHlTdGF0ZXx8ZykmJigwIT09ZC5zdGF0dXN8fGQucmVzcG9uc2VVUkwmJjA9PT1kLnJlc3BvbnNlVVJMLmluZGV4T2YoXCJmaWxlOlwiKSkpe3ZhciBuPVwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzXCJpbiBkP3MoZC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSk6bnVsbCxyPXtkYXRhOmUucmVzcG9uc2VUeXBlJiZcInRleHRcIiE9PWUucmVzcG9uc2VUeXBlP2QucmVzcG9uc2U6ZC5yZXNwb25zZVRleHQsc3RhdHVzOjEyMjM9PT1kLnN0YXR1cz8yMDQ6ZC5zdGF0dXMsc3RhdHVzVGV4dDoxMjIzPT09ZC5zdGF0dXM/XCJObyBDb250ZW50XCI6ZC5zdGF0dXNUZXh0LGhlYWRlcnM6bixjb25maWc6ZSxyZXF1ZXN0OmR9O28odCxmLHIpLGQ9bnVsbH19LGQub25lcnJvcj1mdW5jdGlvbigpe2YodShcIk5ldHdvcmsgRXJyb3JcIixlLG51bGwsZCkpLGQ9bnVsbH0sZC5vbnRpbWVvdXQ9ZnVuY3Rpb24oKXtmKHUoXCJ0aW1lb3V0IG9mIFwiK2UudGltZW91dCtcIm1zIGV4Y2VlZGVkXCIsZSxcIkVDT05OQUJPUlRFRFwiLGQpKSxkPW51bGx9LHIuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSl7dmFyIHY9bigyMCksdz0oZS53aXRoQ3JlZGVudGlhbHN8fGEoZS51cmwpKSYmZS54c3JmQ29va2llTmFtZT92LnJlYWQoZS54c3JmQ29va2llTmFtZSk6dm9pZCAwO3cmJihwW2UueHNyZkhlYWRlck5hbWVdPXcpfWlmKFwic2V0UmVxdWVzdEhlYWRlclwiaW4gZCYmci5mb3JFYWNoKHAsZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT1sJiZcImNvbnRlbnQtdHlwZVwiPT09dC50b0xvd2VyQ2FzZSgpP2RlbGV0ZSBwW3RdOmQuc2V0UmVxdWVzdEhlYWRlcih0LGUpfSksZS53aXRoQ3JlZGVudGlhbHMmJihkLndpdGhDcmVkZW50aWFscz0hMCksZS5yZXNwb25zZVR5cGUpdHJ5e2QucmVzcG9uc2VUeXBlPWUucmVzcG9uc2VUeXBlfWNhdGNoKHQpe2lmKFwianNvblwiIT09ZS5yZXNwb25zZVR5cGUpdGhyb3cgdH1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9uRG93bmxvYWRQcm9ncmVzcyYmZC5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIixlLm9uRG93bmxvYWRQcm9ncmVzcyksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5vblVwbG9hZFByb2dyZXNzJiZkLnVwbG9hZCYmZC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsZS5vblVwbG9hZFByb2dyZXNzKSxlLmNhbmNlbFRva2VuJiZlLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbihlKXtkJiYoZC5hYm9ydCgpLGYoZSksZD1udWxsKX0pLHZvaWQgMD09PWwmJihsPW51bGwpLGQuc2VuZChsKX0pfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMTUpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixvLGkpe3ZhciBzPW5ldyBFcnJvcihlKTtyZXR1cm4gcihzLHQsbixvLGkpfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4hKCFlfHwhZS5fX0NBTkNFTF9fKX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiByKGUpe3RoaXMubWVzc2FnZT1lfXIucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJDYW5jZWxcIisodGhpcy5tZXNzYWdlP1wiOiBcIit0aGlzLm1lc3NhZ2U6XCJcIil9LHIucHJvdG90eXBlLl9fQ0FOQ0VMX189ITAsZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt0Ll9fZXNNb2R1bGU9ITAsdC5JMThOPXZvaWQgMDt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxyJiZlKHQsciksdH19KCksaT1uKDgpLHM9e2V4dGVuc2lvbjpcIi5sYW5nXCIsbG9jYXRpb246XCJhc3NldHMvbGFuZy9cIixsYW5nczpbXCJlbi1VU1wiXSxsb2NhbGU6XCJlbi1VU1wiLG92ZXJyaWRlOnt9fSxhPXQuSTE4Tj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06czshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMubGFuZ3M9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLmxvYWRlZD1bXSx0aGlzLnByb2Nlc3NDb25maWcodCl9cmV0dXJuIGUucHJvdG90eXBlLnByb2Nlc3NDb25maWc9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPU9iamVjdC5hc3NpZ24oe30scyxlKSxyPW4ubG9jYXRpb24sbz1mdW5jdGlvbihlLHQpe3ZhciBuPXt9O2Zvcih2YXIgciBpbiBlKXQuaW5kZXhPZihyKT49MHx8T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJihuW3JdPWVbcl0pO3JldHVybiBufShuLFtcImxvY2F0aW9uXCJdKSxpPXIucmVwbGFjZSgvXFwvPyQvLFwiL1wiKTt0aGlzLmNvbmZpZz1PYmplY3QuYXNzaWduKHt9LHtsb2NhdGlvbjppfSxvKTt2YXIgYT10aGlzLmNvbmZpZyx1PWEub3ZlcnJpZGUsYz1hLnByZWxvYWRlZCxmPXZvaWQgMD09PWM/e306YyxsPU9iamVjdC5lbnRyaWVzKHRoaXMubGFuZ3MpLmNvbmNhdChPYmplY3QuZW50cmllcyh1fHxmKSk7dGhpcy5sYW5ncz1sLnJlZHVjZShmdW5jdGlvbihlLG4pe3ZhciByPW5bMF0sbz1uWzFdO3JldHVybiBlW3JdPXQuYXBwbHlMYW5ndWFnZS5jYWxsKHQscixvKSxlfSx7fSksdGhpcy5sb2NhbGU9dGhpcy5jb25maWcubG9jYWxlfHx0aGlzLmNvbmZpZy5sYW5nc1swXX0sZS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wcm9jZXNzQ29uZmlnLmNhbGwodGhpcyxPYmplY3QuYXNzaWduKHt9LHRoaXMuY29uZmlnLGUpKSx0aGlzLnNldEN1cnJlbnQodGhpcy5sb2NhbGUpfSxlLnByb3RvdHlwZS5hZGRMYW5ndWFnZT1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307dD1cInN0cmluZ1wiPT10eXBlb2YgdD90aGlzLnByb2Nlc3NGaWxlLmNhbGwodGhpcyx0KTp0LHRoaXMuYXBwbHlMYW5ndWFnZS5jYWxsKHRoaXMsZSx0KSx0aGlzLmNvbmZpZy5sYW5ncy5wdXNoKFwibG9jYWxlXCIpfSxlLnByb3RvdHlwZS5nZXRWYWx1ZT1mdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5sb2NhbGU7cmV0dXJuIHRoaXMubGFuZ3NbdF0mJnRoaXMubGFuZ3NbdF1bZV18fHRoaXMuZ2V0RmFsbGJhY2tWYWx1ZShlKX0sZS5wcm90b3R5cGUuZ2V0RmFsbGJhY2tWYWx1ZT1mdW5jdGlvbihlKXt2YXIgdD1PYmplY3QudmFsdWVzKHRoaXMubGFuZ3MpLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHRbZV19KTtyZXR1cm4gdCYmdFtlXX0sZS5wcm90b3R5cGUubWFrZVNhZmU9ZnVuY3Rpb24oZSl7dmFyIHQ9e1wie1wiOlwiXFxcXHtcIixcIn1cIjpcIlxcXFx9XCIsXCJ8XCI6XCJcXFxcfFwifTtyZXR1cm4gZT1lLnJlcGxhY2UoL1xce3xcXH18XFx8L2csZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KSxuZXcgUmVnRXhwKGUsXCJnXCIpfSxlLnByb3RvdHlwZS5wdXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5jdXJyZW50W2VdPXR9LGUucHJvdG90eXBlLmdldD1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuZ2V0VmFsdWUoZSk7aWYobil7dmFyIG89bi5tYXRjaCgvXFx7W159XSs/XFx9L2cpLGk9dm9pZCAwO2lmKHQmJm8paWYoXCJvYmplY3RcIj09PSh2b2lkIDA9PT10P1widW5kZWZpbmVkXCI6cih0KSkpZm9yKHZhciBzPTA7czxvLmxlbmd0aDtzKyspaT1vW3NdLnN1YnN0cmluZygxLG9bc10ubGVuZ3RoLTEpLG49bi5yZXBsYWNlKHRoaXMubWFrZVNhZmUob1tzXSksdFtpXXx8XCJcIik7ZWxzZSBuPW4ucmVwbGFjZSgvXFx7W159XSs/XFx9L2csdCk7cmV0dXJuIG59fSxlLnByb3RvdHlwZS5mcm9tRmlsZT1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj1lLnNwbGl0KFwiXFxuXCIpLHI9e30sbz0wO288bi5sZW5ndGg7bysrKSh0PW5bb10ubWF0Y2goL14oLis/KSAqPz0gKj8oW15cXG5dKykvKSkmJihyW3RbMV1dPXRbMl0ucmVwbGFjZSgvXlxccyt8XFxzKyQvLFwiXCIpKTtyZXR1cm4gcn0sZS5wcm90b3R5cGUucHJvY2Vzc0ZpbGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZnJvbUZpbGUoZS5yZXBsYWNlKC9cXG5cXG4vZyxcIlxcblwiKSl9LGUucHJvdG90eXBlLmxvYWRMYW5nPWZ1bmN0aW9uKGUpe3ZhciB0PSEoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0pfHxhcmd1bWVudHNbMV0sbj10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyLG8pe2lmKC0xIT09bi5sb2FkZWQuaW5kZXhPZihlKSYmdClyZXR1cm4gbi5hcHBseUxhbmd1YWdlLmNhbGwobixuLmxhbmdzW2VdKSxyKG4ubGFuZ3NbZV0pO3ZhciBzPVtuLmNvbmZpZy5sb2NhdGlvbixlLG4uY29uZmlnLmV4dGVuc2lvbl0uam9pbihcIlwiKTtyZXR1cm4oMCxpLmdldCkocykudGhlbihmdW5jdGlvbih0KXt2YXIgbz10LmRhdGEsaT1uLnByb2Nlc3NGaWxlKG8pO3JldHVybiBuLmFwcGx5TGFuZ3VhZ2UuY2FsbChuLGUsaSksbi5sb2FkZWQucHVzaChlKSxyKG4ubGFuZ3NbZV0pfSkuY2F0Y2goZnVuY3Rpb24oKXt2YXIgdD1uLmFwcGx5TGFuZ3VhZ2UuY2FsbChuLGUpO3IodCl9KX0pfSxlLnByb3RvdHlwZS5hcHBseUxhbmd1YWdlPWZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fSxuPXRoaXMuY29uZmlnLm92ZXJyaWRlW2VdfHx7fSxyPXRoaXMubGFuZ3NbZV18fHt9O3JldHVybiB0aGlzLmxhbmdzW2VdPU9iamVjdC5hc3NpZ24oe30scix0LG4pLHRoaXMubGFuZ3NbZV19LGUucHJvdG90eXBlLnNldEN1cnJlbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOlwiZW4tVVNcIjtyZXR1cm4gdGhpcy5sb2FkTGFuZyh0KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIGUubG9jYWxlPXQsZS5jdXJyZW50PWUubGFuZ3NbdF0sZS5jdXJyZW50fSl9LG8oZSxbe2tleTpcImdldExhbmdzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uZmlnLmxhbmdzfX1dKSxlfSgpO3QuZGVmYXVsdD1uZXcgYX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1uKDkpfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigwKSxvPW4oMiksaT1uKDExKSxzPW4oMSk7ZnVuY3Rpb24gYShlKXt2YXIgdD1uZXcgaShlKSxuPW8oaS5wcm90b3R5cGUucmVxdWVzdCx0KTtyZXR1cm4gci5leHRlbmQobixpLnByb3RvdHlwZSx0KSxyLmV4dGVuZChuLHQpLG59dmFyIHU9YShzKTt1LkF4aW9zPWksdS5jcmVhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGEoci5tZXJnZShzLGUpKX0sdS5DYW5jZWw9big2KSx1LkNhbmNlbFRva2VuPW4oMjYpLHUuaXNDYW5jZWw9big1KSx1LmFsbD1mdW5jdGlvbihlKXtyZXR1cm4gUHJvbWlzZS5hbGwoZSl9LHUuc3ByZWFkPW4oMjcpLGUuZXhwb3J0cz11LGUuZXhwb3J0cy5kZWZhdWx0PXV9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9mdW5jdGlvbiByKGUpe3JldHVybiEhZS5jb25zdHJ1Y3RvciYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5jb25zdHJ1Y3Rvci5pc0J1ZmZlciYmZS5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihlKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWUmJihyKGUpfHxmdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnJlYWRGbG9hdExFJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnNsaWNlJiZyKGUuc2xpY2UoMCwwKSl9KGUpfHwhIWUuX2lzQnVmZmVyKX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDEpLG89bigwKSxpPW4oMjEpLHM9bigyMik7ZnVuY3Rpb24gYShlKXt0aGlzLmRlZmF1bHRzPWUsdGhpcy5pbnRlcmNlcHRvcnM9e3JlcXVlc3Q6bmV3IGkscmVzcG9uc2U6bmV3IGl9fWEucHJvdG90eXBlLnJlcXVlc3Q9ZnVuY3Rpb24oZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPW8ubWVyZ2Uoe3VybDphcmd1bWVudHNbMF19LGFyZ3VtZW50c1sxXSkpLChlPW8ubWVyZ2Uocix7bWV0aG9kOlwiZ2V0XCJ9LHRoaXMuZGVmYXVsdHMsZSkpLm1ldGhvZD1lLm1ldGhvZC50b0xvd2VyQ2FzZSgpO3ZhciB0PVtzLHZvaWQgMF0sbj1Qcm9taXNlLnJlc29sdmUoZSk7Zm9yKHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbihlKXt0LnVuc2hpZnQoZS5mdWxmaWxsZWQsZS5yZWplY3RlZCl9KSx0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QucHVzaChlLmZ1bGZpbGxlZCxlLnJlamVjdGVkKX0pO3QubGVuZ3RoOyluPW4udGhlbih0LnNoaWZ0KCksdC5zaGlmdCgpKTtyZXR1cm4gbn0sby5mb3JFYWNoKFtcImRlbGV0ZVwiLFwiZ2V0XCIsXCJoZWFkXCIsXCJvcHRpb25zXCJdLGZ1bmN0aW9uKGUpe2EucHJvdG90eXBlW2VdPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHRoaXMucmVxdWVzdChvLm1lcmdlKG58fHt9LHttZXRob2Q6ZSx1cmw6dH0pKX19KSxvLmZvckVhY2goW1wicG9zdFwiLFwicHV0XCIsXCJwYXRjaFwiXSxmdW5jdGlvbihlKXthLnByb3RvdHlwZVtlXT1mdW5jdGlvbih0LG4scil7cmV0dXJuIHRoaXMucmVxdWVzdChvLm1lcmdlKHJ8fHt9LHttZXRob2Q6ZSx1cmw6dCxkYXRhOm59KSl9fSksZS5leHBvcnRzPWF9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcixvLGk9ZS5leHBvcnRzPXt9O2Z1bmN0aW9uIHMoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGEoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gdShlKXtpZihyPT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dChlLDApO2lmKChyPT09c3x8IXIpJiZzZXRUaW1lb3V0KXJldHVybiByPXNldFRpbWVvdXQsc2V0VGltZW91dChlLDApO3RyeXtyZXR1cm4gcihlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gci5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gci5jYWxsKHRoaXMsZSwwKX19fSFmdW5jdGlvbigpe3RyeXtyPVwiZnVuY3Rpb25cIj09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpzfWNhdGNoKGUpe3I9c310cnl7bz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OmF9Y2F0Y2goZSl7bz1hfX0oKTt2YXIgYyxmPVtdLGw9ITEscD0tMTtmdW5jdGlvbiBkKCl7bCYmYyYmKGw9ITEsYy5sZW5ndGg/Zj1jLmNvbmNhdChmKTpwPS0xLGYubGVuZ3RoJiZoKCkpfWZ1bmN0aW9uIGgoKXtpZighbCl7dmFyIGU9dShkKTtsPSEwO2Zvcih2YXIgdD1mLmxlbmd0aDt0Oyl7Zm9yKGM9ZixmPVtdOysrcDx0OyljJiZjW3BdLnJ1bigpO3A9LTEsdD1mLmxlbmd0aH1jPW51bGwsbD0hMSxmdW5jdGlvbihlKXtpZihvPT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQoZSk7aWYoKG89PT1hfHwhbykmJmNsZWFyVGltZW91dClyZXR1cm4gbz1jbGVhclRpbWVvdXQsY2xlYXJUaW1lb3V0KGUpO3RyeXtvKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gby5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIG8uY2FsbCh0aGlzLGUpfX19KGUpfX1mdW5jdGlvbiBnKGUsdCl7dGhpcy5mdW49ZSx0aGlzLmFycmF5PXR9ZnVuY3Rpb24gbSgpe31pLm5leHRUaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXRbbi0xXT1hcmd1bWVudHNbbl07Zi5wdXNoKG5ldyBnKGUsdCkpLDEhPT1mLmxlbmd0aHx8bHx8dShoKX0sZy5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX0saS50aXRsZT1cImJyb3dzZXJcIixpLmJyb3dzZXI9ITAsaS5lbnY9e30saS5hcmd2PVtdLGkudmVyc2lvbj1cIlwiLGkudmVyc2lvbnM9e30saS5vbj1tLGkuYWRkTGlzdGVuZXI9bSxpLm9uY2U9bSxpLm9mZj1tLGkucmVtb3ZlTGlzdGVuZXI9bSxpLnJlbW92ZUFsbExpc3RlbmVycz1tLGkuZW1pdD1tLGkucHJlcGVuZExpc3RlbmVyPW0saS5wcmVwZW5kT25jZUxpc3RlbmVyPW0saS5saXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuW119LGkuYmluZGluZz1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX0saS5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn0saS5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9LGkudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDApO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3IuZm9yRWFjaChlLGZ1bmN0aW9uKG4scil7ciE9PXQmJnIudG9VcHBlckNhc2UoKT09PXQudG9VcHBlckNhc2UoKSYmKGVbdF09bixkZWxldGUgZVtyXSl9KX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDQpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbil7dmFyIG89bi5jb25maWcudmFsaWRhdGVTdGF0dXM7bi5zdGF0dXMmJm8mJiFvKG4uc3RhdHVzKT90KHIoXCJSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlIFwiK24uc3RhdHVzLG4uY29uZmlnLG51bGwsbi5yZXF1ZXN0LG4pKTplKG4pfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbixyLG8pe3JldHVybiBlLmNvbmZpZz10LG4mJihlLmNvZGU9biksZS5yZXF1ZXN0PXIsZS5yZXNwb25zZT1vLGV9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigwKTtmdW5jdGlvbiBvKGUpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoZSkucmVwbGFjZSgvJTQwL2dpLFwiQFwiKS5yZXBsYWNlKC8lM0EvZ2ksXCI6XCIpLnJlcGxhY2UoLyUyNC9nLFwiJFwiKS5yZXBsYWNlKC8lMkMvZ2ksXCIsXCIpLnJlcGxhY2UoLyUyMC9nLFwiK1wiKS5yZXBsYWNlKC8lNUIvZ2ksXCJbXCIpLnJlcGxhY2UoLyU1RC9naSxcIl1cIil9ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtpZighdClyZXR1cm4gZTt2YXIgaTtpZihuKWk9bih0KTtlbHNlIGlmKHIuaXNVUkxTZWFyY2hQYXJhbXModCkpaT10LnRvU3RyaW5nKCk7ZWxzZXt2YXIgcz1bXTtyLmZvckVhY2godCxmdW5jdGlvbihlLHQpe251bGwhPT1lJiZ2b2lkIDAhPT1lJiYoci5pc0FycmF5KGUpP3QrPVwiW11cIjplPVtlXSxyLmZvckVhY2goZSxmdW5jdGlvbihlKXtyLmlzRGF0ZShlKT9lPWUudG9JU09TdHJpbmcoKTpyLmlzT2JqZWN0KGUpJiYoZT1KU09OLnN0cmluZ2lmeShlKSkscy5wdXNoKG8odCkrXCI9XCIrbyhlKSl9KSl9KSxpPXMuam9pbihcIiZcIil9cmV0dXJuIGkmJihlKz0oLTE9PT1lLmluZGV4T2YoXCI/XCIpP1wiP1wiOlwiJlwiKStpKSxlfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMCksbz1bXCJhZ2VcIixcImF1dGhvcml6YXRpb25cIixcImNvbnRlbnQtbGVuZ3RoXCIsXCJjb250ZW50LXR5cGVcIixcImV0YWdcIixcImV4cGlyZXNcIixcImZyb21cIixcImhvc3RcIixcImlmLW1vZGlmaWVkLXNpbmNlXCIsXCJpZi11bm1vZGlmaWVkLXNpbmNlXCIsXCJsYXN0LW1vZGlmaWVkXCIsXCJsb2NhdGlvblwiLFwibWF4LWZvcndhcmRzXCIsXCJwcm94eS1hdXRob3JpemF0aW9uXCIsXCJyZWZlcmVyXCIsXCJyZXRyeS1hZnRlclwiLFwidXNlci1hZ2VudFwiXTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQsbixpLHM9e307cmV0dXJuIGU/KHIuZm9yRWFjaChlLnNwbGl0KFwiXFxuXCIpLGZ1bmN0aW9uKGUpe2lmKGk9ZS5pbmRleE9mKFwiOlwiKSx0PXIudHJpbShlLnN1YnN0cigwLGkpKS50b0xvd2VyQ2FzZSgpLG49ci50cmltKGUuc3Vic3RyKGkrMSkpLHQpe2lmKHNbdF0mJm8uaW5kZXhPZih0KT49MClyZXR1cm47c1t0XT1cInNldC1jb29raWVcIj09PXQ/KHNbdF0/c1t0XTpbXSkuY29uY2F0KFtuXSk6c1t0XT9zW3RdK1wiLCBcIituOm59fSkscyk6c319LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDApO2UuZXhwb3J0cz1yLmlzU3RhbmRhcmRCcm93c2VyRW52KCk/ZnVuY3Rpb24oKXt2YXIgZSx0PS8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtmdW5jdGlvbiBvKGUpe3ZhciByPWU7cmV0dXJuIHQmJihuLnNldEF0dHJpYnV0ZShcImhyZWZcIixyKSxyPW4uaHJlZiksbi5zZXRBdHRyaWJ1dGUoXCJocmVmXCIscikse2hyZWY6bi5ocmVmLHByb3RvY29sOm4ucHJvdG9jb2w/bi5wcm90b2NvbC5yZXBsYWNlKC86JC8sXCJcIik6XCJcIixob3N0Om4uaG9zdCxzZWFyY2g6bi5zZWFyY2g/bi5zZWFyY2gucmVwbGFjZSgvXlxcPy8sXCJcIik6XCJcIixoYXNoOm4uaGFzaD9uLmhhc2gucmVwbGFjZSgvXiMvLFwiXCIpOlwiXCIsaG9zdG5hbWU6bi5ob3N0bmFtZSxwb3J0Om4ucG9ydCxwYXRobmFtZTpcIi9cIj09PW4ucGF0aG5hbWUuY2hhckF0KDApP24ucGF0aG5hbWU6XCIvXCIrbi5wYXRobmFtZX19cmV0dXJuIGU9byh3aW5kb3cubG9jYXRpb24uaHJlZiksZnVuY3Rpb24odCl7dmFyIG49ci5pc1N0cmluZyh0KT9vKHQpOnQ7cmV0dXJuIG4ucHJvdG9jb2w9PT1lLnByb3RvY29sJiZuLmhvc3Q9PT1lLmhvc3R9fSgpOmZ1bmN0aW9uKCl7cmV0dXJuITB9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcigpe3RoaXMubWVzc2FnZT1cIlN0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3RlclwifXIucHJvdG90eXBlPW5ldyBFcnJvcixyLnByb3RvdHlwZS5jb2RlPTUsci5wcm90b3R5cGUubmFtZT1cIkludmFsaWRDaGFyYWN0ZXJFcnJvclwiLGUuZXhwb3J0cz1mdW5jdGlvbihlKXtmb3IodmFyIHQsbixvPVN0cmluZyhlKSxpPVwiXCIscz0wLGE9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO28uY2hhckF0KDB8cyl8fChhPVwiPVwiLHMlMSk7aSs9YS5jaGFyQXQoNjMmdD4+OC1zJTEqOCkpe2lmKChuPW8uY2hhckNvZGVBdChzKz0uNzUpKT4yNTUpdGhyb3cgbmV3IHI7dD10PDw4fG59cmV0dXJuIGl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHI9bigwKTtlLmV4cG9ydHM9ci5pc1N0YW5kYXJkQnJvd3NlckVudigpP3t3cml0ZTpmdW5jdGlvbihlLHQsbixvLGkscyl7dmFyIGE9W107YS5wdXNoKGUrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KHQpKSxyLmlzTnVtYmVyKG4pJiZhLnB1c2goXCJleHBpcmVzPVwiK25ldyBEYXRlKG4pLnRvR01UU3RyaW5nKCkpLHIuaXNTdHJpbmcobykmJmEucHVzaChcInBhdGg9XCIrbyksci5pc1N0cmluZyhpKSYmYS5wdXNoKFwiZG9tYWluPVwiK2kpLCEwPT09cyYmYS5wdXNoKFwic2VjdXJlXCIpLGRvY3VtZW50LmNvb2tpZT1hLmpvaW4oXCI7IFwiKX0scmVhZDpmdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cChcIihefDtcXFxccyopKFwiK2UrXCIpPShbXjtdKilcIikpO3JldHVybiB0P2RlY29kZVVSSUNvbXBvbmVudCh0WzNdKTpudWxsfSxyZW1vdmU6ZnVuY3Rpb24oZSl7dGhpcy53cml0ZShlLFwiXCIsRGF0ZS5ub3coKS04NjRlNSl9fTp7d3JpdGU6ZnVuY3Rpb24oKXt9LHJlYWQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0scmVtb3ZlOmZ1bmN0aW9uKCl7fX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDApO2Z1bmN0aW9uIG8oKXt0aGlzLmhhbmRsZXJzPVtdfW8ucHJvdG90eXBlLnVzZT1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmhhbmRsZXJzLnB1c2goe2Z1bGZpbGxlZDplLHJlamVjdGVkOnR9KSx0aGlzLmhhbmRsZXJzLmxlbmd0aC0xfSxvLnByb3RvdHlwZS5lamVjdD1mdW5jdGlvbihlKXt0aGlzLmhhbmRsZXJzW2VdJiYodGhpcy5oYW5kbGVyc1tlXT1udWxsKX0sby5wcm90b3R5cGUuZm9yRWFjaD1mdW5jdGlvbihlKXtyLmZvckVhY2godGhpcy5oYW5kbGVycyxmdW5jdGlvbih0KXtudWxsIT09dCYmZSh0KX0pfSxlLmV4cG9ydHM9b30sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMCksbz1uKDIzKSxpPW4oNSkscz1uKDEpLGE9bigyNCksdT1uKDI1KTtmdW5jdGlvbiBjKGUpe2UuY2FuY2VsVG9rZW4mJmUuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpfWUuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gYyhlKSxlLmJhc2VVUkwmJiFhKGUudXJsKSYmKGUudXJsPXUoZS5iYXNlVVJMLGUudXJsKSksZS5oZWFkZXJzPWUuaGVhZGVyc3x8e30sZS5kYXRhPW8oZS5kYXRhLGUuaGVhZGVycyxlLnRyYW5zZm9ybVJlcXVlc3QpLGUuaGVhZGVycz1yLm1lcmdlKGUuaGVhZGVycy5jb21tb258fHt9LGUuaGVhZGVyc1tlLm1ldGhvZF18fHt9LGUuaGVhZGVyc3x8e30pLHIuZm9yRWFjaChbXCJkZWxldGVcIixcImdldFwiLFwiaGVhZFwiLFwicG9zdFwiLFwicHV0XCIsXCJwYXRjaFwiLFwiY29tbW9uXCJdLGZ1bmN0aW9uKHQpe2RlbGV0ZSBlLmhlYWRlcnNbdF19KSwoZS5hZGFwdGVyfHxzLmFkYXB0ZXIpKGUpLnRoZW4oZnVuY3Rpb24odCl7cmV0dXJuIGMoZSksdC5kYXRhPW8odC5kYXRhLHQuaGVhZGVycyxlLnRyYW5zZm9ybVJlc3BvbnNlKSx0fSxmdW5jdGlvbih0KXtyZXR1cm4gaSh0KXx8KGMoZSksdCYmdC5yZXNwb25zZSYmKHQucmVzcG9uc2UuZGF0YT1vKHQucmVzcG9uc2UuZGF0YSx0LnJlc3BvbnNlLmhlYWRlcnMsZS50cmFuc2Zvcm1SZXNwb25zZSkpKSxQcm9taXNlLnJlamVjdCh0KX0pfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByPW4oMCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gci5mb3JFYWNoKG4sZnVuY3Rpb24obil7ZT1uKGUsdCl9KSxlfX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4vXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QoZSl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/ZS5yZXBsYWNlKC9cXC8rJC8sXCJcIikrXCIvXCIrdC5yZXBsYWNlKC9eXFwvKy8sXCJcIik6ZX19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcj1uKDYpO2Z1bmN0aW9uIG8oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiKTt2YXIgdDt0aGlzLnByb21pc2U9bmV3IFByb21pc2UoZnVuY3Rpb24oZSl7dD1lfSk7dmFyIG49dGhpcztlKGZ1bmN0aW9uKGUpe24ucmVhc29ufHwobi5yZWFzb249bmV3IHIoZSksdChuLnJlYXNvbikpfSl9by5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZD1mdW5jdGlvbigpe2lmKHRoaXMucmVhc29uKXRocm93IHRoaXMucmVhc29ufSxvLnNvdXJjZT1mdW5jdGlvbigpe3ZhciBlO3JldHVybnt0b2tlbjpuZXcgbyhmdW5jdGlvbih0KXtlPXR9KSxjYW5jZWw6ZX19LGUuZXhwb3J0cz1vfSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZS5hcHBseShudWxsLHQpfX19XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSnRhVEU0Ymk1dGFXNHVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJbjA9IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1szXS51c2VbMV0hLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLnVzZVsyXSEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzNdIS4vZm9ybS1yZW5kZXIuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHtcImF0dHJpYnV0ZXNcIjp7XCJjbGFzc1wiOlwiZm9ybUJ1aWxkZXItaW5qZWN0ZWQtc3R5bGVcIn19O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJpbXBvcnQgbWkxOG4gZnJvbSAnbWkxOG4nXG5pbXBvcnQgdXRpbHMsIHsgcGFyc2VYTUwsIGZvckVhY2ggfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IHsgcmVtb3ZlIH0gZnJvbSAnLi9kb20nXG5pbXBvcnQgZXZlbnRzIGZyb20gJy4vZXZlbnRzJ1xuaW1wb3J0IGxheW91dCBmcm9tICcuL2xheW91dCdcbmltcG9ydCBjb250cm9sIGZyb20gJy4vY29udHJvbCdcbmltcG9ydCAnLi9jb250cm9sL2luZGV4J1xuaW1wb3J0IHsgZGVmYXVsdEkxOG4gfSBmcm9tICcuL2NvbmZpZydcbmltcG9ydCAnLi4vc2Fzcy9mb3JtLXJlbmRlci5zY3NzJ1xuaW1wb3J0IHsgc2V0U2FuaXRpemVyQ29uZmlnIH0gZnJvbSAnLi9zYW5pdGl6ZXInXG5pbXBvcnQgY3VzdG9tQ29udHJvbHMgZnJvbSAnLi9jdXN0b21Db250cm9scydcblxuLyoqXG4gKiBGb3JtUmVuZGVyIENsYXNzXG4gKi9cbmNsYXNzIEZvcm1SZW5kZXIge1xuICAvKipcbiAgICogQ3JlYXRlICYgY29uZmlndXJlIGEgbmV3IEZvcm1SZW5kZXIgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhbiBvYmplY3QgaGFzaCBvZiBzdXBwb3J0ZWQgb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgLy8gaW5pdGlhbGlzZSBkZWZhdWx0cyAmIG9wdGlvbnNcbiAgICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICAgIGxheW91dDogbGF5b3V0LCAvLyBieSBkZWZhdWx0IHVzZSB0aGUgbGF5b3V0IGNsYXNzLCBidXQgc3VwcG9ydCBhIGNoaWxkIGNsYXNzIGJlaW5nIGRlZmluZWQgJiBwYXNzZWQgYXMgYW4gb3B0aW9uXG4gICAgICBsYXlvdXRUZW1wbGF0ZXM6IHt9LCAvLyBhbGxvdyBjdXN0b20gb3ZlcnJpZGUgbGF5b3V0IHRlbXBsYXRlcyB0byBiZSBkZWZpbmVkXG4gICAgICBjb250cm9sczoge30sIC8vIGN1c3RvbSBjb250cm9sc1xuICAgICAgY29udHJvbENvbmZpZzoge30sIC8vIGFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiBmb3IgY29udHJvbHNcbiAgICAgIGNvbnRhaW5lcjogZmFsc2UsIC8vIHN0cmluZyBzZWxlY3RvciBvciBOb2RlIGVsZW1lbnRcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICBkaXNhYmxlSFRNTExhYmVsczogZmFsc2UsXG4gICAgICBmb3JtRGF0YTogW10sXG4gICAgICBpMThuOiBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0STE4biksXG4gICAgICBtZXNzYWdlczoge1xuICAgICAgICBmb3JtUmVuZGVyZWQ6ICdGb3JtIFJlbmRlcmVkJyxcbiAgICAgICAgbm9Gb3JtRGF0YTogJ05vIGZvcm0gZGF0YS4nLFxuICAgICAgICBvdGhlcjogJ090aGVyJyxcbiAgICAgICAgc2VsZWN0Q29sb3I6ICdTZWxlY3QgQ29sb3InLFxuICAgICAgICBpbnZhbGlkQ29udHJvbDogJ0ludmFsaWQgY29udHJvbCcsXG4gICAgICB9LFxuICAgICAgb25SZW5kZXI6ICgpID0+IHt9LFxuICAgICAgcmVuZGVyOiB0cnVlLFxuICAgICAgc2FuaXRpemVyT3B0aW9uczoge1xuICAgICAgICBjbG9iYmVyaW5nUHJvdGVjdGlvbjoge1xuICAgICAgICAgIGRvY3VtZW50OiB0cnVlLFxuICAgICAgICAgIGZvcm06IGZhbHNlLFxuICAgICAgICAgIG5hbWVzcGFjZUF0dHJpYnV0ZXM6IHRydWUsIC8vY2xvYmJlcmVkIG5hbWVzIHdpbGwgYmUgcHJlZml4ZWQgd2l0aCB1c2VyLWNvbnRlbnQtXG4gICAgICAgIH0sXG4gICAgICAgIGJhY2tlbmRPcmRlcjogWydkb21wdXJpZnknLCdzYW5pdGl6ZXInLCdmYWxsYmFjayddLFxuXG4gICAgICB9LFxuICAgICAgdGVtcGxhdGVzOiB7fSwgLy8gY3VzdG9tIGlubGluZSBkZWZpbmVkIHRlbXBsYXRlc1xuICAgICAgbm90aWZ5OiB7XG4gICAgICAgIGVycm9yOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBlcnJvciA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICAgIH0sXG4gICAgICAgIHN1Y2Nlc3M6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHN1Y2Nlc3MgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHN1Y2Nlc3MpXG4gICAgICAgIH0sXG4gICAgICAgIHdhcm5pbmc6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHdhcm5pbmcgPT4ge1xuICAgICAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zID0galF1ZXJ5LmV4dGVuZCh0cnVlLCBkZWZhdWx0cywgb3B0aW9ucylcbiAgICB0aGlzLmluc3RhbmNlQ29udGFpbmVycyA9IFtdXG5cbiAgICAvL092ZXJyaWRlIGFueSBzYW5pdGl6ZXIgY29uZmlndXJhdGlvblxuICAgIHNldFNhbml0aXplckNvbmZpZyh0aGlzLm9wdGlvbnMuc2FuaXRpemVyT3B0aW9ucylcblxuICAgIGlmICghbWkxOG4uY3VycmVudCkge1xuICAgICAgbWkxOG4uaW5pdCh0aGlzLm9wdGlvbnMuaTE4bilcbiAgICB9XG5cbiAgICAvLyBwYXJzZSBhbnkgcGFzc2VkIGZvcm1EYXRhXG4gICAgaWYgKHRoaXMub3B0aW9ucy5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5vcHRpb25zLmZvcm1EYXRhID0gdGhpcy5wYXJzZUZvcm1EYXRhKHRoaXMub3B0aW9ucy5mb3JtRGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcHRpb25zLmZvcm1EYXRhID0gW11cbiAgICB9XG5cbiAgICAvLyBhYmlsaXR5IGZvciBjb250cm9scyB0byBoYXZlIHRoZWlyIG93biBjb25maWd1cmF0aW9uIC8gb3B0aW9ucyBvZiB0aGUgZm9ybWF0IGNvbnRyb2wgaWRlbnRpZmllciAodHlwZSwgb3IgdHlwZS5zdWJ0eXBlKToge29wdGlvbnN9XG4gICAgY29udHJvbC5jb250cm9sQ29uZmlnID0gb3B0aW9ucy5jb250cm9sQ29uZmlnIHx8IHt9XG5cbiAgICAvLyBsb2FkIGluIGFueSBjdXN0b20gc3BlY2lmaWVkIGNvbnRyb2xzLCBvciBwcmVsb2FkZWQgcGx1Z2luIGNvbnRyb2xzXG4gICAgY29udHJvbC5sb2FkQ3VzdG9tKG9wdGlvbnMuY29udHJvbHMpXG5cbiAgICAvLyByZWdpc3RlciBhbnkgcGFzc2VkIGN1c3RvbSB0ZW1wbGF0ZXNcbiAgICB0aGlzLnRlbXBsYXRlZENvbnRyb2xzID0gbmV3IGN1c3RvbUNvbnRyb2xzKHRoaXMub3B0aW9ucy50ZW1wbGF0ZXMpXG5cbiAgICAvKipcbiAgICAgKiBFeHRlbmQgRWxlbWVudCBwcm90b3R5cGUgdG8gYWxsb3cgdXMgdG8gYXBwZW5kIGZpZWxkc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZmllbGRzIGFycmF5IG9mIGVsZW1lbnRzXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiBFbGVtZW50LnByb3RvdHlwZS5hcHBlbmRGb3JtRmllbGRzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBFbGVtZW50LnByb3RvdHlwZS5hcHBlbmRGb3JtRmllbGRzID0gZnVuY3Rpb24gKGZpZWxkcykge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZmllbGRzKSkge1xuICAgICAgICAgIGZpZWxkcyA9IFtmaWVsZHNdXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVuZGVyZWRGb3JtV3JhcCA9IHV0aWxzLm1hcmt1cCgnZGl2JywgZmllbGRzLCB7XG4gICAgICAgICAgY2xhc3NOYW1lOiAncmVuZGVyZWQtZm9ybSBmb3JtYnVpbGRlci1lbWJlZGRlZC1ib290c3RyYXAnLFxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHJlbmRlcmVkRm9ybVdyYXApXG5cbiAgICAgICAgZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgIC8vIERldGVybWluZSBpZiByb3dzIGFyZSBiZWluZyB1c2VkLiBJZiBzbywgY3JlYXRlIHRoZSByb3cgYW5kIGFwcGVuZCB0byBpdHMgcm93LXtncm91cH1cbiAgICAgICAgICAvLyBJZiB0aGUgZmllbGRzIGhhdmUgcm93LSwgY3JlYXRlICYgYXBwZW5kIHRvIHRoZSBhcHByb3ByaWF0ZSByb3dcbiAgICAgICAgICBjb25zdCBbcm93R3JvdXBdID0gZmllbGQuY2xhc3NOYW1lLm1hdGNoKC9yb3ctKFteXFxzXSspLykgfHwgW11cbiAgICAgICAgICBpZiAocm93R3JvdXApIHtcbiAgICAgICAgICAgIGNvbnN0IHJvd0lEID0gdGhpcy5pZCA/IGAke3RoaXMuaWR9LXJvdy0ke3Jvd0dyb3VwfWAgOiBgcm93LSR7cm93R3JvdXB9YFxuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGlzIHJvd0lEIGlzIGNyZWF0ZWQgeWV0IG9yIG5vdC5cbiAgICAgICAgICAgIGxldCByb3dHcm91cE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyb3dJRClcbiAgICAgICAgICAgIGlmICghcm93R3JvdXBOb2RlKSB7XG4gICAgICAgICAgICAgIHJvd0dyb3VwTm9kZSA9IHV0aWxzLm1hcmt1cCgnZGl2JywgbnVsbCwgeyBpZDogcm93SUQsIGNsYXNzTmFtZTogJ3JvdycgfSlcbiAgICAgICAgICAgICAgcmVuZGVyZWRGb3JtV3JhcC5hcHBlbmRDaGlsZChyb3dHcm91cE5vZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dHcm91cE5vZGUuYXBwZW5kQ2hpbGQoZmllbGQpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFwcGVuZCB3aXRob3V0IHJvd1xuICAgICAgICAgICAgcmVuZGVyZWRGb3JtV3JhcC5hcHBlbmRDaGlsZChmaWVsZClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWVsZC5kaXNwYXRjaEV2ZW50KGV2ZW50cy5maWVsZFJlbmRlcmVkKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dGVuZCBFbGVtZW50IHByb3RvdHlwZSB0byByZW1vdmUgY29udGVudFxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgRWxlbWVudC5wcm90b3R5cGUuZW1wdHlDb250YWluZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIEVsZW1lbnQucHJvdG90eXBlLmVtcHR5Q29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpc1xuICAgICAgICB3aGlsZSAoZWxlbWVudC5sYXN0Q2hpbGQpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1lbnQubGFzdENoaWxkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFuIHVwIHBhc3NlZCBvYmplY3QgY29uZmlndXJhdGlvbiB0byBwcmVwYXJlIGZvciB1c2Ugd2l0aCB0aGUgbWFya3VwIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmaWVsZCAtIG9iamVjdCBvZiBmaWVsZCBjb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbaW5zdGFuY2VJbmRleF0gLSBpbnN0YW5jZSBpbmRleFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IHNhbml0aXplZCBmaWVsZCBvYmplY3RcbiAgICovXG4gIHNhbml0aXplRmllbGQoZmllbGQsIGluc3RhbmNlSW5kZXgpIHtcbiAgICBsZXQgc2FuaXRpemVkRmllbGQgPSBPYmplY3QuYXNzaWduKHt9LCBmaWVsZClcbiAgICBpZiAoaW5zdGFuY2VJbmRleCkge1xuICAgICAgc2FuaXRpemVkRmllbGQuaWQgPSBmaWVsZC5pZCAmJiBgJHtmaWVsZC5pZH0tJHtpbnN0YW5jZUluZGV4fWBcbiAgICAgIHNhbml0aXplZEZpZWxkLm5hbWUgPSBmaWVsZC5uYW1lICYmIGAke2ZpZWxkLm5hbWV9LSR7aW5zdGFuY2VJbmRleH1gXG4gICAgfVxuICAgIHNhbml0aXplZEZpZWxkLmNsYXNzTmFtZSA9IEFycmF5LmlzQXJyYXkoZmllbGQuY2xhc3NOYW1lKVxuICAgICAgPyB1dGlscy51bmlxdWUoZmllbGQuY2xhc3NOYW1lLmpvaW4oJyAnKS5zcGxpdCgnICcpKS5qb2luKCcgJylcbiAgICAgIDogZmllbGQuY2xhc3NOYW1lIHx8IGZpZWxkLmNsYXNzIHx8IG51bGxcbiAgICBkZWxldGUgc2FuaXRpemVkRmllbGQuY2xhc3NcbiAgICBpZiAoZmllbGQudmFsdWVzKSB7XG4gICAgICBzYW5pdGl6ZWRGaWVsZC52YWx1ZXMgPSBmaWVsZC52YWx1ZXMubWFwKG9wdGlvbiA9PiB1dGlscy50cmltT2JqKG9wdGlvbikpXG4gICAgfVxuICAgIHNhbml0aXplZEZpZWxkID0gdXRpbHMudHJpbU9iaihzYW5pdGl6ZWRGaWVsZClcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmaWVsZC51c2VyRGF0YSkgJiYgZmllbGQudXNlckRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICBzYW5pdGl6ZWRGaWVsZC51c2VyRGF0YSA9IFtdIC8vU3BlY2lhbCBoYW5kbGVyIGZvciBhbGxvd2luZyB1c2VyRGF0YSB0byBiZSBlbXB0eVxuICAgIH1cbiAgICByZXR1cm4gc2FuaXRpemVkRmllbGRcbiAgfVxuXG4gIC8qKlxuICAgKiBwYXJzZXMgYGNvbnRhaW5lcmAgb3B0aW9uIG9yIHJldHVybnMgZWxlbWVudFxuICAgKiBAcGFyYW0gIHtPYmplY3R8c3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBwYXJzZWRFbGVtZW50XG4gICAqL1xuICBnZXRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICBlbGVtZW50ID0gdGhpcy5vcHRpb25zLmNvbnRhaW5lciB8fCBlbGVtZW50XG4gICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBqUXVlcnkpIHtcbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpXG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cblxuICAvKipcbiAgICogTWFpbiByZW5kZXIgbWV0aG9kIHdoaWNoIHByb2R1Y2VzIHRoZSBmb3JtIGZyb20gcGFzc2VkIGNvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBhbiBodG1sIGVsZW1lbnQgdG8gcmVuZGVyIHRoZSBmb3JtIGludG8gKG9wdGlvbmFsKVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5zdGFuY2VJbmRleCAtIGluc3RhbmNlIGluZGV4XG4gICAqIEByZXR1cm4ge09iamVjdH0gcmVuZGVyZWQgZm9ybVxuICAgKi9cbiAgcmVuZGVyKGVsZW1lbnQgPSBudWxsLCBpbnN0YW5jZUluZGV4ID0gMCkge1xuICAgIGNvbnN0IGZvcm1SZW5kZXIgPSB0aGlzXG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9uc1xuICAgIGVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnQoZWxlbWVudClcblxuICAgIGNvbnN0IHJ1bkNhbGxiYWNrcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvcHRzLm9uUmVuZGVyKSB7XG4gICAgICAgIG9wdHMub25SZW5kZXIoKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJlZ2luIHRoZSBjb3JlIHBsdWdpblxuICAgIGNvbnN0IHJlbmRlcmVkID0gW11cblxuICAgIC8vIGluc3RhbnRpYXRlIHRoZSBsYXlvdXQgY2xhc3MgJiBsb29wIHRocm91Z2ggdGhlIGZpZWxkIGNvbmZpZ3VyYXRpb25cbiAgICBjb25zdCBlbmdpbmUgPSBuZXcgb3B0cy5sYXlvdXQob3B0cy5sYXlvdXRUZW1wbGF0ZXMsIGZhbHNlLCBvcHRzLmRpc2FibGVIVE1MTGFiZWxzLCBvcHRzLmNvbnRyb2xDb25maWcpXG4gICAgaWYgKG9wdHMuZm9ybURhdGEubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdHMuZm9ybURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZmllbGREYXRhID0gb3B0cy5mb3JtRGF0YVtpXVxuICAgICAgICBjb25zdCBzYW5pdGl6ZWRGaWVsZCA9IHRoaXMuc2FuaXRpemVGaWVsZChmaWVsZERhdGEsIGluc3RhbmNlSW5kZXgpXG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIHRoZSBjb250cm9sIGNsYXNzIGZvciB0aGlzIHR5cGUsIGFuZCB0aGVuIHByb2Nlc3MgaXQgdGhyb3VnaCB0aGUgbGF5b3V0IGVuZ2luZVxuICAgICAgICBjb25zdCBjb250cm9sQ2xhc3MgPSB0aGlzLnRlbXBsYXRlZENvbnRyb2xzLmdldENsYXNzKGZpZWxkRGF0YS50eXBlKSB8fCBjb250cm9sLmdldENsYXNzKGZpZWxkRGF0YS50eXBlLCBmaWVsZERhdGEuc3VidHlwZSlcbiAgICAgICAgY29uc3QgZmllbGQgPSBlbmdpbmUuYnVpbGQoY29udHJvbENsYXNzLCBzYW5pdGl6ZWRGaWVsZClcblxuICAgICAgICByZW5kZXJlZC5wdXNoKGZpZWxkKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvcHRzLm5vdGlmeS53YXJuaW5nKG9wdHMubWVzc2FnZXMubm9Gb3JtRGF0YSlcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdGhpcy5pbnN0YW5jZUNvbnRhaW5lcnNbaW5zdGFuY2VJbmRleF0gPSBlbGVtZW50XG4gICAgfVxuXG4gICAgLy8gaWYgcmVuZGVyaW5nLCBpbmplY3QgdGhlIGZpZWxkcyBpbnRvIHRoZSBzcGVjaWZpZWQgd3JhcHBlciBjb250YWluZXIvZWxlbWVudFxuICAgIGlmIChvcHRzLnJlbmRlciAmJiBlbGVtZW50KSB7XG4gICAgICBlbGVtZW50LmVtcHR5Q29udGFpbmVyKClcbiAgICAgIGVsZW1lbnQuYXBwZW5kRm9ybUZpZWxkcyhyZW5kZXJlZClcblxuICAgICAgcnVuQ2FsbGJhY2tzKClcbiAgICAgIG9wdHMubm90aWZ5LnN1Y2Nlc3Mob3B0cy5tZXNzYWdlcy5mb3JtUmVuZGVyZWQpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8qKlxuICAgICAgICogUmV0cmlldmUgdGhlIGh0bWwgbWFya3VwIGZvciBhIHBhc3NlZCBhcnJheSBvZiBEb21FbGVtZW50c1xuICAgICAgICogQHBhcmFtIHtBcnJheX0gZmllbGRzIC0gYXJyYXkgb2YgZG9tIGVsZW1lbnRzXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGZpZWxkcyBodG1sXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGV4cG9ydE1hcmt1cCA9IGZpZWxkcyA9PiBmaWVsZHMubWFwKGVsZW0gPT4gZWxlbS5pbm5lckhUTUwpLmpvaW4oJycpXG4gICAgICBmb3JtUmVuZGVyLm1hcmt1cCA9IGV4cG9ydE1hcmt1cChyZW5kZXJlZClcbiAgICB9XG5cbiAgICBpZiAob3B0cy5kaXNhYmxlSW5qZWN0ZWRTdHlsZSA9PT0gdHJ1ZSkge1xuICAgICAgY29uc3Qgc3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZm9ybUJ1aWxkZXItaW5qZWN0ZWQtc3R5bGUnKVxuICAgICAgZm9yRWFjaChzdHlsZVRhZ3MsIGkgPT4gcmVtb3ZlKHN0eWxlVGFnc1tpXSkpXG4gICAgfSBlbHNlIGlmIChvcHRzLmRpc2FibGVJbmplY3RlZFN0eWxlID09PSAnYm9vdHN0cmFwJyAmJiBvcHRzLnJlbmRlciAmJiBlbGVtZW50KSB7XG4gICAgICBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Zvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCcpLml0ZW0oMCk/LmNsYXNzTGlzdC5yZW1vdmUoJ2Zvcm1idWlsZGVyLWVtYmVkZGVkLWJvb3RzdHJhcCcpXG4gICAgfVxuICAgIHJldHVybiBmb3JtUmVuZGVyXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIGEgc2luZ2xlIGNvbnRyb2wgLyBmaWVsZFxuICAgKiBFeHBlY3RzIG9ubHkgYSBzaW5nbGUgZmllbGQgY29uZmlndXJhdGlvbiB0byBiZSBzZXQgaW4gb3B0LmZvcm1EYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0gYW4gb3B0aW9uYWwgRE9NIGVsZW1lbnQgdG8gcmVuZGVyIHRoZSBmaWVsZCBpbnRvIC0gaWYgbm90IHNwZWNpZmllZCB3aWxsIGp1c3QgcmV0dXJuIHRoZSByZW5kZXJlZCBmaWVsZCAtIG5vdGUgaWYgeW91IGRvIHRoaXMgeW91IHdpbGwgbmVlZCB0byBtYW51YWxseSBjYWxsIGVsZW1lbnQuZGlzcGF0Y2hFdmVudCgnZmllbGRSZW5kZXJlZCcpIG9uIHRoZSByZXR1cm5lZCBlbGVtZW50IHdoZW4gaXQgaXMgcmVuZGVyZWQgaW50byB0aGUgRE9NXG4gICAqIEByZXR1cm4ge09iamVjdH0gdGhlIGZvcm1SZW5kZXIgb2JqZWN0XG4gICAqL1xuICByZW5kZXJDb250cm9sKGVsZW1lbnQgPSBudWxsKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9uc1xuICAgIGNvbnN0IGZpZWxkRGF0YSA9IG9wdHMuZm9ybURhdGFcbiAgICBpZiAoIWZpZWxkRGF0YSB8fCBBcnJheS5pc0FycmF5KGZpZWxkRGF0YSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RvIHJlbmRlciBhIHNpbmdsZSBlbGVtZW50LCBwbGVhc2Ugc3BlY2lmeSBhIHNpbmdsZSBvYmplY3Qgb2YgZm9ybURhdGEgZm9yIHRoZSBmaWVsZCBpbiBxdWVzdGlvbicsXG4gICAgICApXG4gICAgfVxuICAgIGNvbnN0IHNhbml0aXplZEZpZWxkID0gdGhpcy5zYW5pdGl6ZUZpZWxkKGZpZWxkRGF0YSlcblxuICAgIC8vIGRldGVybWluZSB0aGUgY29udHJvbCBjbGFzcyBmb3IgdGhpcyB0eXBlLCBhbmQgdGhlbiBidWlsZCBpdFxuICAgIGNvbnN0IGVuZ2luZSA9IG5ldyBvcHRzLmxheW91dCgpXG4gICAgY29uc3QgY29udHJvbENsYXNzID0gdGhpcy50ZW1wbGF0ZWRDb250cm9scy5nZXRDbGFzcyhmaWVsZERhdGEudHlwZSkgfHwgY29udHJvbC5nZXRDbGFzcyhmaWVsZERhdGEudHlwZSwgZmllbGREYXRhLnN1YnR5cGUpXG4gICAgY29uc3QgZm9yY2VUZW1wbGF0ZSA9IG9wdHMuZm9yY2VUZW1wbGF0ZSB8fCAnaGlkZGVuJyAvLyBzdXBwb3J0IHRoZSBhYmlsaXR5IHRvIG92ZXJyaWRlIHdoYXQgbGF5b3V0IHRlbXBsYXRlIHRoZSBjb250cm9sIGlzIHJlbmRlcmVkIHVzaW5nLiBUaGlzIGNhbiBiZSB1c2VkIHRvIG91dHB1dCB0aGUgd2hvbGUgcm93IChpbmNsdWRpbmcgbGFiZWwsIGhlbHAgZXRjKSB1c2luZyB0aGUgc3RhbmRhcmQgdGVtcGxhdGVzIGlmIGRlc2lyZWQuXG4gICAgY29uc3QgZmllbGQgPSBlbmdpbmUuYnVpbGQoY29udHJvbENsYXNzLCBzYW5pdGl6ZWRGaWVsZCwgZm9yY2VUZW1wbGF0ZSlcbiAgICBlbGVtZW50LmFwcGVuZEZvcm1GaWVsZHMoZmllbGQpXG4gICAgb3B0cy5ub3RpZnkuc3VjY2VzcyhvcHRzLm1lc3NhZ2VzLmZvcm1SZW5kZXJlZClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB1c2VyIGVudGVyZWQgZGF0YVxuICAgKiBAcmV0dXJuIHtPYmplY3RbXX1cbiAgICovXG4gIGdldCB1c2VyRGF0YSgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zXG4gICAgY29uc3QgZGVmaW5lZEZpZWxkcyA9IG9wdGlvbnMuZm9ybURhdGEuc2xpY2UoKVxuXG4gICAgLy8gc2F2ZSB0aW55TUNFIGVkaXRvcnNcbiAgICBkZWZpbmVkRmllbGRzXG4gICAgICAuZmlsdGVyKGZpZWxkRGF0YSA9PiBmaWVsZERhdGEuc3VidHlwZSA9PT0gJ3RpbnltY2UnKVxuICAgICAgLmZvckVhY2goZmllbGREYXRhID0+IHdpbmRvdy50aW55bWNlLmdldChmaWVsZERhdGEubmFtZSkuc2F2ZSgpKVxuXG4gICAgdGhpcy5pbnN0YW5jZUNvbnRhaW5lcnMuZm9yRWFjaChjb250YWluZXIgPT4ge1xuICAgICAgY29uc3QgdXNlckRhdGFNYXAgPSAkKCdzZWxlY3QsIGlucHV0LCB0ZXh0YXJlYScsIGNvbnRhaW5lcilcbiAgICAgICAgLnNlcmlhbGl6ZUFycmF5KClcbiAgICAgICAgLnJlZHVjZSgoYWNjLCB7IG5hbWUsIHZhbHVlIH0pID0+IHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKCdbXScsICcnKVxuICAgICAgICAgIGlmIChhY2NbbmFtZV0pIHtcbiAgICAgICAgICAgIGFjY1tuYW1lXS5wdXNoKHZhbHVlKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2NbbmFtZV0gPSBbdmFsdWVdXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgfSwge30pXG5cbiAgICAgIGNvbnN0IGRlZmluZWRGaWVsZHNMZW5ndGggPSBkZWZpbmVkRmllbGRzLmxlbmd0aFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWZpbmVkRmllbGRzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGVmaW5lZEZpZWxkID0gZGVmaW5lZEZpZWxkc1tpXVxuICAgICAgICAvLyBTa2lwIGZpZWxkcyB0aGF0IGhhdmUgbm8gbmFtZS0tTGlrZWx5IHRoZXNlIGFyZSBmaWVsZHMgdGhhdCBkbyBub3QgaG9sZCBkYXRhKGgxLHApXG4gICAgICAgIGlmIChkZWZpbmVkRmllbGQubmFtZSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZVxuICAgICAgICAvLyBTa2lwIGRpc2FibGVkIGZpZWxkcyAtLSBUaGlzIHdpbGwgbm90IGhhdmUgdXNlciBkYXRhIGF2YWlsYWJsZVxuICAgICAgICBpZiAoZGVmaW5lZEZpZWxkLmRpc2FibGVkKSBjb250aW51ZVxuXG4gICAgICAgIGRlZmluZWRGaWVsZC51c2VyRGF0YSA9IHVzZXJEYXRhTWFwW2RlZmluZWRGaWVsZC5uYW1lXSA/PyBbXVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gZGVmaW5lZEZpZWxkc1xuICB9XG5cbiAgLyoqIENsZWFyIGFsbCByZW5kZXJlZCBmaWVsZHMgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5pbnN0YW5jZUNvbnRhaW5lcnMuZm9yRWFjaChjb250YWluZXIgPT4ge1xuICAgICAgLy8gY2xlYXIgdGlueU1DRSBlZGl0b3JzXG4gICAgICB0aGlzLm9wdGlvbnMuZm9ybURhdGFcbiAgICAgICAgLnNsaWNlKClcbiAgICAgICAgLmZpbHRlcihmaWVsZERhdGEgPT4gZmllbGREYXRhLnN1YnR5cGUgPT09ICd0aW55bWNlJylcbiAgICAgICAgLmZvckVhY2goZmllbGREYXRhID0+IHdpbmRvdy50aW55bWNlLmdldChmaWVsZERhdGEubmFtZSkuc2V0Q29udGVudCgnJykpXG5cbiAgICAgIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYScpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICBpZiAoWydjaGVja2JveCcsICdyYWRpbyddLmluY2x1ZGVzKGlucHV0LnR5cGUpKSB7XG4gICAgICAgICAgaW5wdXQuY2hlY2tlZCA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5wdXQudmFsdWUgPSAnJ1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgLyoqXG4gICAqIGVuc3VyZSBmb3JtRGF0YSBpcyBjb3JyZWN0IHR5cGVcbiAgICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBmb3JtRGF0YVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGZvcm1EYXRhXG4gICAqL1xuICBwYXJzZUZvcm1EYXRhKGZvcm1EYXRhKSB7XG4gICAgY29uc3Qgc2V0RGF0YSA9IHtcbiAgICAgIHhtbDogZm9ybURhdGEgPT4gcGFyc2VYTUwoZm9ybURhdGEpLFxuICAgICAganNvbjogZm9ybURhdGEgPT4gd2luZG93LkpTT04ucGFyc2UoZm9ybURhdGEpLFxuICAgIH1cbiAgICBpZiAodHlwZW9mIGZvcm1EYXRhICE9PSAnb2JqZWN0Jykge1xuICAgICAgZm9ybURhdGEgPSBzZXREYXRhW3RoaXMub3B0aW9ucy5kYXRhVHlwZV0oZm9ybURhdGEpIHx8IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiBmb3JtRGF0YVxuICB9XG59XG5cbjsoZnVuY3Rpb24gKCQpIHtcbiAgbGV0IGZvcm1SZW5kZXJGb3Jtc1xuICBjb25zdCBtZXRob2RzID0ge1xuICAgIGluaXQ6IChmb3Jtcywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICBmb3JtUmVuZGVyRm9ybXMgPSBmb3Jtc1xuICAgICAgbWV0aG9kcy5pbnN0YW5jZSA9IG5ldyBGb3JtUmVuZGVyKG9wdGlvbnMpXG4gICAgICBmb3Jtcy5lYWNoKGluZGV4ID0+IG1ldGhvZHMuaW5zdGFuY2UucmVuZGVyKGZvcm1zW2luZGV4XSwgaW5kZXgpKVxuXG4gICAgICByZXR1cm4gbWV0aG9kcy5pbnN0YW5jZVxuICAgIH0sXG4gICAgdXNlckRhdGE6ICgpID0+IG1ldGhvZHMuaW5zdGFuY2UgJiYgbWV0aG9kcy5pbnN0YW5jZS51c2VyRGF0YSxcbiAgICBjbGVhcjogKCkgPT4gbWV0aG9kcy5pbnN0YW5jZSAmJiBtZXRob2RzLmluc3RhbmNlLmNsZWFyKCksXG4gICAgc2V0RGF0YTogZm9ybURhdGEgPT4ge1xuICAgICAgaWYgKG1ldGhvZHMuaW5zdGFuY2UpIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBtZXRob2RzLmluc3RhbmNlXG4gICAgICAgIGluc3RhbmNlLm9wdGlvbnMuZm9ybURhdGEgPSBpbnN0YW5jZS5wYXJzZUZvcm1EYXRhKGZvcm1EYXRhKVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiAoZm9ybURhdGEsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgaWYgKG1ldGhvZHMuaW5zdGFuY2UpIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBtZXRob2RzLmluc3RhbmNlXG4gICAgICAgIGlmICghZm9ybURhdGEpIHtcbiAgICAgICAgICBmb3JtRGF0YSA9IGluc3RhbmNlLm9wdGlvbnMuZm9ybURhdGFcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgaW5zdGFuY2Uub3B0aW9ucywgb3B0aW9ucywgeyBmb3JtRGF0YTogaW5zdGFuY2UucGFyc2VGb3JtRGF0YShmb3JtRGF0YSkgfSlcbiAgICAgICAgZm9ybVJlbmRlckZvcm1zLmVhY2goaW5kZXggPT4gbWV0aG9kcy5pbnN0YW5jZS5yZW5kZXIoZm9ybVJlbmRlckZvcm1zW2luZGV4XSwgaW5kZXgpKVxuICAgICAgfVxuICAgIH0sXG4gICAgaHRtbDogKCkgPT4gZm9ybVJlbmRlckZvcm1zLm1hcChpbmRleCA9PiBmb3JtUmVuZGVyRm9ybXNbaW5kZXhdKS5odG1sKCksXG4gIH1cblxuICAkLmZuLmZvcm1SZW5kZXIgPSBmdW5jdGlvbiAobWV0aG9kT3JPcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgICBpZiAobWV0aG9kc1ttZXRob2RPck9wdGlvbnNdKSB7XG4gICAgICByZXR1cm4gbWV0aG9kc1ttZXRob2RPck9wdGlvbnNdLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gbWV0aG9kcy5pbml0KHRoaXMsIG1ldGhvZE9yT3B0aW9ucylcbiAgICAgIE9iamVjdC5hc3NpZ24obWV0aG9kcywgaW5zdGFuY2UpXG4gICAgICByZXR1cm4gaW5zdGFuY2VcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcmVuZGVycyBhbiBpbmRpdmlkdWFsIGZpZWxkIGludG8gdGhlIGN1cnJlbnQgZWxlbWVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIGRhdGEgc3RydWN0dXJlIGZvciBhIHNpbmdsZSBmaWVsZCBvdXRwdXQgZnJvbSBmb3JtQnVpbGRlclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbmFsIHN1YnNldCBvZiBmb3JtUmVuZGVyIG9wdGlvbnMgLSBkb2Vzbid0IHN1cHBvcnQgY29udGFpbmVyIG9yIG90aGVyIGZvcm0gcmVuZGVyaW5nIGJhc2VkIG9wdGlvbnMuXG4gICAqIEByZXR1cm4ge0RPTUVsZW1lbnR9IHRoZSByZW5kZXJlZCBmaWVsZFxuICAgKi9cbiAgJC5mbi5jb250cm9sUmVuZGVyID0gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICAgIG9wdGlvbnMuZm9ybURhdGEgPSBkYXRhXG4gICAgb3B0aW9ucy5kYXRhVHlwZSA9IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJyA/ICdqc29uJyA6ICd4bWwnXG4gICAgY29uc3QgZm9ybVJlbmRlciA9IG5ldyBGb3JtUmVuZGVyKG9wdGlvbnMpXG4gICAgY29uc3QgJGVsZW1zID0gdGhpc1xuICAgICRlbGVtcy5lYWNoKGkgPT4gZm9ybVJlbmRlci5yZW5kZXJDb250cm9sKCRlbGVtc1tpXSkpXG4gICAgcmV0dXJuICRlbGVtc1xuICB9XG59KShqUXVlcnkpXG4iXSwibmFtZXMiOlsibWkxOG4iLCJub29wIiwiYWRkTGFuZ3VhZ2UiLCJGQl9FTl9VUyIsImRlZmF1bHRPcHRpb25zIiwiYWN0aW9uQnV0dG9ucyIsImFsbG93U3RhZ2VTb3J0IiwiYXBwZW5kIiwiY29udHJvbE9yZGVyIiwiY29udHJvbFBvc2l0aW9uIiwiZGF0YVR5cGUiLCJkZWZhdWx0RmllbGRzIiwiZGlzYWJsZWRBY3Rpb25CdXR0b25zIiwiZGlzYWJsZWRBdHRycyIsImRpc2FibGVkRmllbGRCdXR0b25zIiwiZGlzYWJsZWRTdWJ0eXBlcyIsImRpc2FibGVGaWVsZHMiLCJkaXNhYmxlSFRNTExhYmVscyIsImRpc2FibGVJbmplY3RlZFN0eWxlIiwiZWRpdE9uQWRkIiwiZmllbGRzIiwiZmllbGRSZW1vdmVXYXJuIiwiZmllbGRFZGl0Q29udGFpbmVyIiwiaW5wdXRTZXRzIiwibm90aWZ5IiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwic3VjY2VzcyIsIndhcm5pbmciLCJ3YXJuIiwib25BZGRGaWVsZCIsImZpZWxkSWQiLCJmaWVsZERhdGEiLCJvbkFkZEZpZWxkQWZ0ZXIiLCJvbkFkZE9wdGlvbiIsIm9iaiIsIm9uQ2xlYXJBbGwiLCJvbkNsb3NlRmllbGRFZGl0Iiwib25PcGVuRmllbGRFZGl0Iiwib25TYXZlIiwicGVyc2lzdERlZmF1bHRGaWVsZHMiLCJwcmVwZW5kIiwicmVwbGFjZUZpZWxkcyIsInJvbGVzIiwic2FuaXRpemVyT3B0aW9ucyIsImNsb2JiZXJpbmdQcm90ZWN0aW9uIiwiZG9jdW1lbnQiLCJmb3JtIiwiYmFja2VuZE9yZGVyIiwic2Nyb2xsVG9GaWVsZE9uQWRkIiwic2hvd0FjdGlvbkJ1dHRvbnMiLCJzb3J0YWJsZUNvbnRyb2xzIiwic3RpY2t5Q29udHJvbHMiLCJlbmFibGUiLCJvZmZzZXQiLCJ0b3AiLCJib3R0b20iLCJyaWdodCIsInN1YnR5cGVzIiwidGVtcGxhdGVzIiwidHlwZVVzZXJBdHRycyIsInR5cGVVc2VyRGlzYWJsZWRBdHRycyIsInR5cGVVc2VyRXZlbnRzIiwiZGVmYXVsdEdyaWRDb2x1bW5DbGFzcyIsImNhbmNlbEdyaWRNb2RlRGlzdGFuY2UiLCJlbmFibGVDb2x1bW5JbnNlcnRNZW51IiwiZW5hYmxlRW5oYW5jZWRCb290c3RyYXBHcmlkIiwic3R5bGVzIiwiYnRuIiwiZGVmYXVsdEkxOG4iLCJsb2NhdGlvbiIsImluc3RhbmNlQ29uZmlnIiwiZ3JpZENsYXNzTmFtZXMiLCJyb3dXcmFwcGVyQ2xhc3MiLCJjb2xXcmFwcGVyQ2xhc3MiLCJ0bXBSb3dQbGFjZWhvbGRlckNsYXNzIiwiaW52aXNpYmxlUm93UGxhY2Vob2xkZXJDbGFzcyIsImRlZmF1bHRUaW1lb3V0IiwiZGVmYXVsdEZpZWxkU2VsZWN0b3IiLCJjYW1lbENhc2UiLCJwYXJzZWRIdG1sIiwibWFya3VwIiwiZ2V0U3R5bGVzIiwiZ2V0U2NyaXB0cyIsImlzQ2FjaGVkIiwiY29udHJvbCIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwicHJldmlldyIsInJhd0NvbmZpZyIsImpRdWVyeSIsImV4dGVuZCIsImlzUHJldmlldyIsInJlcXVpcmVkIiwicHJvcGVydGllcyIsInByb3AiLCJpZCIsIm5hbWUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ0eXBlIiwiZGVzY3JpcHRpb24iLCJ0aXRsZSIsImNvbnRyb2xDb25maWciLCJjbGFzc0lkIiwic3VidHlwZSIsImNsYXNzQ29uZmlnIiwiZGlzYWJsZWQiLCJjb25maWd1cmUiLCJkZWZpbml0aW9uIiwicmVnaXN0ZXIiLCJ0eXBlcyIsImNvbnRyb2xDbGFzcyIsInBhcmVudFR5cGUiLCJwcmVmaXgiLCJjbGFzc1JlZ2lzdGVyIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5kZXhPZiIsImdldFJlZ2lzdGVyZWQiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZmlsdGVyIiwia2V5IiwiZ2V0UmVnaXN0ZXJlZFN1YnR5cGVzIiwiaGFzT3duUHJvcGVydHkiLCJzcGxpdCIsInB1c2giLCJnZXRDbGFzcyIsImxvb2t1cCIsImxvYWRDdXN0b20iLCJjb250cm9scyIsImNvbnRyb2xDbGFzc2VzIiwiY29uY2F0Iiwid2luZG93IiwiZmJDb250cm9scyIsImZiQ29udHJvbHNMb2FkZWQiLCJsb2FkQ29udHJvbCIsImFyZ3MiLCJkZWYiLCJpMThuIiwibG9jYWxlIiwiZGVmYXVsdCIsImxvb2t1cENhbWVsIiwidmFsdWUiLCJtYXBwZWQiLCJnZXQiLCJhY3RpdmUiLCJpbmFjdGl2ZSIsImxhYmVsIiwiaWNvbiIsImJ1aWxkIiwiX3RoaXMkY29uZmlnIiwiZGF0YSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9leGNsdWRlZCIsIm9uIiwiZXZlbnRUeXBlIiwiZXZlbnRzIiwicHJlcmVuZGVyIiwiZWxlbWVudCIsInJlbmRlciIsImV2dCIsIm9uUmVuZGVyIiwiY3NzIiwianMiLCJkb25lIiwibWVzc2FnZSIsIkVycm9yIiwidGFnIiwiY29udGVudCIsImF0dHJpYnV0ZXMiLCJodG1sIiwic3RyIiwiY29udHJvbEF1dG9jb21wbGV0ZSIsInJlcXVpcmVWYWxpZE9wdGlvbiIsInZhbHVlcyIsImtleWJvYXJkTmF2IiwiZSIsImxpc3QiLCJ0YXJnZXQiLCJuZXh0U2libGluZyIsImhpZGRlbkZpZWxkIiwiYWN0aXZlT3B0aW9uIiwiZ2V0QWN0aXZlT3B0aW9uIiwia2V5Q29kZU1hcFZhbHMiLCJwcmV2aW91cyIsImdldFByZXZpb3VzT3B0aW9uIiwic2VsZWN0T3B0aW9uIiwibmV4dCIsImdldE5leHRPcHRpb24iLCJpbm5lckhUTUwiLCJnZXRBdHRyaWJ1dGUiLCJzdHlsZSIsImRpc3BsYXkiLCJzaG93TGlzdCIsImhpZGVMaXN0IiwiaXNPcHRpb25WYWxpZCIsInByZXZlbnREZWZhdWx0Iiwia2V5Q29kZU1hcCIsIk1hcCIsImRpcmVjdGlvbiIsImtleUNvZGUiLCJmYXV4RXZlbnRzIiwiZm9jdXMiLCJmaWx0ZXJlZE9wdGlvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNlbGVjdGVkT3B0aW9uIiwiYmx1ciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJibHVyVGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJpbnB1dCIsImZhdXhBdHRycyIsImFzc2lnbiIsImF1dG9jb21wbGV0ZSIsImhpZGRlbkF0dHJzIiwiZmllbGQiLCJvcHRpb25zIiwibWFwIiwib3B0aW9uRGF0YSIsImNsaWNrIiwicGFyZW50RWxlbWVudCIsInByZXZpb3VzU2libGluZyIsImNsYXNzTmFtZSIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY3VycmVudCIsImkiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJ2YWxpZFZhbHVlIiwidXNlckRhdGEiLCIkZWwiLCIkIiwiJG9wdGlvbnMiLCJwcmVTZWxlY3RlZE9wdGlvbiIsImZpbmQiLCJlYWNoIiwiYXR0ciIsInByZXYiLCJ2YWwiLCJjb250cm9sQnV0dG9uIiwibGF5b3V0IiwiY29udHJvbEN1c3RvbSIsInRlbXBsYXRlIiwiY3VzdG9tIiwiYmluZCIsImNvbnRyb2xIaWRkZW4iLCJjb250cm9sUGFyYWdyYXBoIiwiY29udHJvbFNlbGVjdCIsImNvbnRyb2xUZXh0IiwiY29udHJvbFRleHRhcmVhIiwiY29udHJvbFRpbnltY2UiLCJjb250cm9sUXVpbGwiLCJ1dGlscyIsImF0dHJzIiwidHlwZU1hcCIsInBhcmFncmFwaCIsImhlYWRlciIsInRyaW1PYmoiLCJtaW5TZWxlY3Rpb25SZXF1aXJlZCIsInBsYWNlaG9sZGVyIiwiaW5saW5lIiwib3RoZXIiLCJ0b2dnbGUiLCJvcHRpb25UeXBlIiwicmVwbGFjZSIsImlzU2VsZWN0IiwibXVsdGlwbGUiLCJzZWxmIiwiZGVmYXVsdE9uUmVuZGVyIiwiZ3JvdXBSZXF1aXJlZCIsInNlbGVjdGVkIiwib3B0aW9uIiwib3B0aW9uQXR0cnMiLCJfZXhjbHVkZWQyIiwibyIsImNyZWF0ZVRleHROb2RlIiwibGFiZWxDb250ZW50cyIsIndyYXBwZXJDbGFzcyIsImNoZWNrZWQiLCJsYWJlbEF0dHJzIiwiZm9yIiwib3V0cHV0IiwidW5zaGlmdCIsIndyYXBwZXIiLCJfZGF0YSRjbGFzc05hbWUiLCJvdGhlck9wdGlvbkF0dHJzIiwib3RoZXJWYWxBdHRycyIsIm90aGVySW5wdXQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJpbWFyeUlucHV0Iiwib3RoZXJJbnB1dHMiLCJpbnB1dExhYmVsIiwiZG9tIiwiY2hlY2tib3hlcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2V0VmFsaWRpdHkiLCJjaGVja2JveCIsImlzVmFsaWQiLCJtaW5SZXEiLCJzZXRDdXN0b21WYWxpZGl0eSIsInRvZ2dsZVJlcXVpcmVkIiwiZm9yRWFjaCIsImNhbGwiLCJjYiIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInRvZ2dsZVZhbGlkIiwic29tZSIsInNlbGVjdGVkT3B0aW9ucyIsInNsaWNlIiwiZW5kc1dpdGgiLCJjb250YWlucyIsInNwbGljZSIsIm90aGVyVmFsIiwicXVlcnlTZWxlY3RvciIsImRhdGUiLCJmaWxlIiwiaW5wdXRDb25maWciLCJ0ZXh0YXJlYSIsInN0b3BQcm9wYWdhdGlvbiIsImRlZmF1bHRDbGFzc0NvbmZpZyIsImRlZmF1bHRFZGl0b3JDb25maWciLCJtb2R1bGVzIiwidG9vbGJhciIsInRoZW1lIiwiY3VzdG9tQ2xhc3NDb25maWciLCJjdXN0b21FZGl0b3JDb25maWciLCJzcGxpdE9iamVjdCIsIl9vYmplY3RTcHJlYWQiLCJlZGl0b3JDb25maWciLCJEZWx0YSIsIlF1aWxsIiwiaW1wb3J0IiwiZmJFZGl0b3JzIiwicXVpbGwiLCJlZGl0b3IiLCJpbnN0YW5jZSIsInNldENvbnRlbnRzIiwiSlNPTiIsInBhcnNlIiwiZGVsdGEiLCJjb21wb3NlIiwidGlueW1jZSIsImVkaXRvck9wdGlvbnMiLCJoZWlnaHQiLCJwYXN0ZV9kYXRhX2ltYWdlcyIsInBsdWdpbnMiLCJyZWFkb25seSIsIm9sZEluc3QiLCJyZW1vdmVkUGx1Z2lucyIsIk51bWJlciIsIm1ham9yVmVyc2lvbiIsInBsdWdpbiIsInVuZGVmaW5lZCIsImNvcGllZERhdGEiLCJsYXN0Rm9ybUJ1aWxkZXJDb3BpZWRUaW55TUNFIiwiYWZ0ZXJJbml0IiwiaW5zdCIsInNldENvbnRlbnQiLCJpbml0IiwidGhlbiIsImN1c3RvbUNvbnRyb2xzIiwiY3VzdG9tUmVnaXN0ZXIiLCJ0ZW1wbGF0ZUNvbnRyb2xSZWdpc3RlciIsIl90aGlzIiwidGVtcGxhdGVOYW1lIiwidGVtcGxhdGVDb250cm9sIiwiY3VzdG9tQ29udHJvbCIsImRhdGF0eXBlIiwiY2xhc3MiLCJfdGhpcyR0ZW1wbGF0ZUNvbnRyb2wiLCJfdGhpcyR0ZW1wbGF0ZUNvbnRyb2wyIiwiaW5zdGFuY2VEb20iLCJkZWZhdWx0U3VidHlwZXMiLCJ0ZXh0IiwiYnV0dG9uIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZW1wdHkiLCJmaXJzdENoaWxkIiwiZWxlbXMiLCJ0ZXJtIiwic2hvdyIsImZpbHRlcmVkRWxlbXMiLCJyZXZlcnNlIiwidHh0IiwidGV4dENvbnRlbnQiLCJ0b0xvd2VyQ2FzZSIsIm9wdGlvbkZpZWxkcyIsIm9wdGlvbkZpZWxkc1JlZ0V4IiwiUmVnRXhwIiwiam9pbiIsIkRvbSIsImZvcm1JRCIsIl9kZWZpbmVQcm9wZXJ0eSIsIm5vZGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjcmVhdGVOZXdFdmVudCIsImV2ZW50TmFtZSIsImV2ZW50IiwiRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImxvYWRlZCIsInZpZXdEYXRhIiwidXNlckRlY2xpbmVkIiwibW9kYWxDbG9zZWQiLCJtb2RhbE9wZW5lZCIsImZvcm1TYXZlZCIsImZpZWxkQWRkZWQiLCJmaWVsZFJlbW92ZWQiLCJmaWVsZFJlbmRlcmVkIiwiZmllbGRFZGl0T3BlbmVkIiwiZmllbGRFZGl0Q2xvc2VkIiwic3RhZ2VFbXB0aWVkIiwiZ2V0QWxsR3JpZFJlbGF0ZWRDbGFzc2VzIiwicHJvY2Vzc0NsYXNzTmFtZSIsImNsYXNzZXMiLCJpdGVtIiwiX3ByZXZpZXciLCJfZGlzYWJsZUhUTUxMYWJlbHMiLCJfY29udHJvbENvbmZpZyIsImhlbHAiLCJhcHBlbmRDaGlsZCIsIm5vTGFiZWwiLCJoaWRkZW4iLCJyZW5kZXJDb250cm9sIiwiZm9yY2VUZW1wbGF0ZSIsIm5hbWVBdHRyIiwiY29udHJvbEluc3RhbmNlIiwidG1wRmllbGQiLCJjaGlsZEVsZW1lbnRDb3VudCIsImNoaWxkcmVuIiwiZnJvbSIsImVsZW1lbnRUZW1wbGF0ZSIsImlzVGVtcGxhdGUiLCJwcm9jZXNzVGVtcGxhdGUiLCJsYWJlbFRleHQiLCJ0b29sdGlwIiwiX2xlbiIsImFyZ3VtZW50cyIsIl9rZXkiLCJwcm9jZXNzZWQiLCJqcXVlcnkiLCJzYW5pdGl6ZXJDb25maWciLCJuYW1lc3BhY2VBdHRyaWJ1dGVzIiwiYmFja2VuZHMiLCJzYW5pdGl6ZXIiLCJTYW5pdGl6ZXIiLCJkb21wdXJpZnkiLCJET01QdXJpZnkiLCJwdXJpZnkiLCJzZXRDb25maWciLCJTQU5JVElaRV9ET00iLCJBRERfQVRUUiIsImZhbGxiYWNrIiwic2V0U2FuaXRpemVyQ29uZmlnIiwiaW1wbGVtZW50YXRpb24iLCJiYWNrZW5kIiwiaXNQb3RlbnRpYWxseURhbmdlcm91c0F0dHJpYnV0ZSIsImF0dHJOYW1lIiwiYXR0clZhbHVlIiwiYXR0ck5hbWVMYyIsInN0YXJ0c1dpdGgiLCJpbmNsdWRlcyIsInRyaW0iLCJmYWxsYmFja1Nhbml0aXplciIsImNvbnRleHQiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJiYXNlIiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJoZWFkIiwiZXhjbHVkZV90YWdzIiwicGFyc2VIVE1MIiwiYWRkQmFjayIsIm5pbmRleCIsIm5vZGVOYW1lIiwidGFnTmFtZSIsImF0dHJpYnV0ZSIsInJlbW92ZUF0dHIiLCJ0bXAiLCJhdHRyaWJ1dGVXaWxsQ2xvYmJlciIsImNoZWNrX2RvYyIsImNoZWNrX2Zvcm0iLCJzYW5pdGl6ZU5hbWVkQXR0cmlidXRlIiwic2FuaXRpemVEb21DbG9iYmVyaW5nIiwicHJvdGVjdGVkVHlwZXMiLCJoYXNBdHRyaWJ1dGUiLCJzYW5pdGl6ZXJzQ2FsbGJhY2tzIiwicHVyaWZpZXIiLCJzdXBwb3J0ZWQiLCJpc1N1cHBvcnRlZCIsInNhbml0aXplIiwic2V0SFRNTCIsInNldEVsZW1lbnRDb250ZW50IiwiYXNUZXh0IiwicHJveHlFbGVtIiwicGVyZm9ybWVkQnkiLCJmYkxvYWRlZCIsInJlbW92ZUZhbHNlIiwic3RydWN0dXJlZENsb25lIiwieG1sUmVtb3ZlIiwidmFsaWRBdHRyIiwiaW52YWxpZCIsInhtbEF0dHJTdHJpbmciLCJlbnRyaWVzIiwiX3JlZiIsImh5cGhlbkNhc2UiLCJhdHRyU3RyaW5nIiwiX3JlZjIiLCJzYWZlQXR0ciIsIkJvb2xlYW4iLCJzYWZlQXR0ck5hbWUiLCJ2YWxTdHJpbmciLCJlc2NhcGVBdHRyIiwidG9TdHJpbmciLCJmbGF0dGVuQXJyYXkiLCJhcnIiLCJyZWR1Y2UiLCJhY2MiLCIkMSIsIm0iLCJ3IiwidG9VcHBlckNhc2UiLCJiaW5kRXZlbnRzIiwibGVwb2NoIiwiY291bnRlciIsImVwb2NoIiwiRGF0ZSIsIm5vdyIsImdldENvbnRlbnRUeXBlIiwiTm9kZSIsIkhUTUxFbGVtZW50IiwidHlwZUNvbmRpdGlvbiIsImNvbnRlbnRUeXBlIiwiYXBwZW5kQ29udGVudCIsInN0cmluZyIsIm9iamVjdCIsImFycmF5IiwiZnVuY3Rpb24iLCJhdHRyVmFsIiwidW5pcXVlIiwieG1sUGFyc2VBdHRycyIsImVsZW0iLCJtYXRjaCIsInhtbFBhcnNlT3B0aW9ucyIsInhtbFBhcnNlVXNlckRhdGEiLCJwYXJzZVhNTCIsInhtbFN0cmluZyIsInBhcnNlciIsIkRPTVBhcnNlciIsInhtbCIsInBhcnNlRnJvbVN0cmluZyIsImZvcm1EYXRhIiwiZXNjYXBlRWxlbWVudCIsImVzY2FwZUh0bWwiLCJyZXBsYWNlVGFnIiwiZXNjYXBlQXR0cnMiLCJjYWxsYmFjayIsInNjb3BlIiwicG9zIiwicmVtb3ZlRnJvbUFycmF5IiwiaW5kZXgiLCJzY3JpcHRTY3IiLCJwYXRoIiwiX2FyciIsInNyYyIsImNhY2hlIiwidXJsIiwiYWpheCIsIkRlZmVycmVkIiwiZGVmZXJyZWQiLCJyZXNvbHZlIiwid2hlbiIsImV2ZXJ5IiwicyIsImxpbmsiLCJyZWwiLCJhcHBlbmRUbyIsImNhcGl0YWxpemUiLCJtZXJnZSIsIm9iajEiLCJvYmoyIiwibWVyZ2VkT2JqIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJlbCIsImV2dHMiLCJjbG9zZXN0IiwiY2xzIiwibW9iaWxlQ2xhc3MiLCJhIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInZlbmRvciIsIm9wZXJhIiwic2FmZW5hbWUiLCJmb3JjZU51bWJlciIsInN1YnRyYWN0IiwiaW5zZXJ0U3R5bGUiLCJzcmNzIiwicHJvbWlzZXMiLCJfcmVmMyIsIlByb21pc2UiLCJmb3JtZW9TdHlsZSIsImluc2VydEJlZm9yZSIsImFsbCIsInJlbW92ZVN0eWxlIiwiZ2V0RWxlbWVudEJ5SWQiLCJib290c3RyYXBDb2x1bW5SZWdleCIsIngiLCJ0aXRsZUNhc2UiLCJsb3dlcnMiLCJsb3dlciIsInJlZ2V4IiwiY2hhckF0Iiwid29yZCIsImZpcnN0TnVtYmVyT3JVbmRlZmluZWQiLCJyZWNvbnN0cnVjdE9iaiIsImluaXRpYWxPYmoiLCJyZXN1bHQiLCJrZXB0IiwicmVzdCIsImZuIiwic3dhcFdpdGgiLCJ0aGF0IiwiJHRoaXMiLCIkdGhhdCIsIiR0ZW1wIiwiYmVmb3JlIiwiZ2VuZXJhdGVTZWxlY3RvckNsYXNzTmFtZXMiLCJjbGFzc05hbWVzT2JqIiwiX3JlZjQiLCJGb3JtUmVuZGVyIiwiZGVmYXVsdHMiLCJsYXlvdXRUZW1wbGF0ZXMiLCJjb250YWluZXIiLCJtZXNzYWdlcyIsImZvcm1SZW5kZXJlZCIsIm5vRm9ybURhdGEiLCJzZWxlY3RDb2xvciIsImludmFsaWRDb250cm9sIiwiaW5zdGFuY2VDb250YWluZXJzIiwicGFyc2VGb3JtRGF0YSIsInRlbXBsYXRlZENvbnRyb2xzIiwiRWxlbWVudCIsInByb3RvdHlwZSIsImFwcGVuZEZvcm1GaWVsZHMiLCJyZW5kZXJlZEZvcm1XcmFwIiwicm93R3JvdXAiLCJyb3dJRCIsInJvd0dyb3VwTm9kZSIsImRpc3BhdGNoRXZlbnQiLCJlbXB0eUNvbnRhaW5lciIsImxhc3RDaGlsZCIsInNhbml0aXplRmllbGQiLCJpbnN0YW5jZUluZGV4Iiwic2FuaXRpemVkRmllbGQiLCJnZXRFbGVtZW50IiwiZm9ybVJlbmRlciIsIm9wdHMiLCJydW5DYWxsYmFja3MiLCJyZW5kZXJlZCIsImVuZ2luZSIsImV4cG9ydE1hcmt1cCIsInN0eWxlVGFncyIsImRlZmluZWRGaWVsZHMiLCJzYXZlIiwidXNlckRhdGFNYXAiLCJzZXJpYWxpemVBcnJheSIsImRlZmluZWRGaWVsZHNMZW5ndGgiLCJfdXNlckRhdGFNYXAkZGVmaW5lZEYiLCJkZWZpbmVkRmllbGQiLCJjbGVhciIsInNldERhdGEiLCJqc29uIiwiZm9ybVJlbmRlckZvcm1zIiwibWV0aG9kcyIsImZvcm1zIiwibWV0aG9kT3JPcHRpb25zIiwiYXBwbHkiLCJjb250cm9sUmVuZGVyIiwiJGVsZW1zIl0sInNvdXJjZVJvb3QiOiIifQ==