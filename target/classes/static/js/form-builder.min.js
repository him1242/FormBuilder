(function ($) { "use strict";
/*!
 * jQuery formBuilder: https://formbuilder.online/
 * Version: 3.19.7
 * Author: Kevin Chappell <kevin.b.chappell@gmail.com>
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../src/js/config.js":
/*!***************************!*\
  !*** ../src/js/config.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultFieldSelector: function() { return /* binding */ defaultFieldSelector; },
/* harmony export */   defaultI18n: function() { return /* binding */ defaultI18n; },
/* harmony export */   defaultOptions: function() { return /* binding */ defaultOptions; },
/* harmony export */   defaultTimeout: function() { return /* binding */ defaultTimeout; },
/* harmony export */   gridClassNames: function() { return /* binding */ gridClassNames; },
/* harmony export */   instanceConfig: function() { return /* binding */ instanceConfig; },
/* harmony export */   styles: function() { return /* binding */ styles; }
/* harmony export */ });
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mi18n */ "../node_modules/mi18n/dist/mi18n.min.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mi18n__WEBPACK_IMPORTED_MODULE_0__);

const noop = () => null;
mi18n__WEBPACK_IMPORTED_MODULE_0___default().addLanguage('en-US', {"NATIVE_NAME":"English (US)","ENGLISH_NAME":"English","addOption":"Add Option +","allFieldsRemoved":"All fields were removed.","allowMultipleFiles":"Allow users to upload multiple files","autocomplete":"Autocomplete","button":"Button","cannotBeEmpty":"This field cannot be empty","checkboxGroup":"Checkbox Group","checkbox":"Checkbox","checkboxes":"Checkboxes","className":"Class","clearAllMessage":"Are you sure you want to clear all fields?","clear":"Clear","close":"Close","content":"Content","copy":"Copy To Clipboard","copyButton":"&#43;","copyButtonTooltip":"Copy","dateField":"Date Field","description":"Help Text","descriptionField":"Description","devMode":"Developer Mode","editNames":"Edit Names","editorTitle":"Form Elements","editXML":"Edit XML","enableOther":"Enable &quot;Other&quot;","enableOtherMsg":"Let users enter an unlisted option","fieldDeleteWarning":"false","fieldVars":"Field Variables","fieldNonEditable":"This field cannot be edited.","fieldRemoveWarning":"Are you sure you want to remove this field?","fileUpload":"File Upload","formUpdated":"Form Updated","getStarted":"Drag a field from the right to this area","header":"Header","hide":"Edit","hidden":"Hidden Input","inline":"Inline","inlineDesc":"Display {type} inline","label":"Label","labelEmpty":"Field Label cannot be empty","limitRole":"Limit access to one or more of the following roles:","mandatory":"Mandatory","maxlength":"Max Length","minOptionMessage":"This field requires a minimum of 2 options","minSelectionRequired":"Minimum {min} selections required","multipleFiles":"Multiple Files","name":"Name","no":"No","noFieldsToClear":"There are no fields to clear","number":"Number","off":"Off","on":"On","option":"Option","optionCount":"Option {count}","options":"Options","optional":"optional","optionLabelPlaceholder":"Label","optionValuePlaceholder":"Value","optionEmpty":"Option value required","other":"Other","paragraph":"Paragraph","placeholder":"Placeholder","placeholders.value":"Value","placeholders.label":"Label","placeholders.email":"Enter your email","placeholders.className":"space separated classes","placeholders.password":"Enter your password","preview":"Preview","radioGroup":"Radio Group","radio":"Radio","removeMessage":"Remove Element","removeOption":"Remove Option","remove":"&#215;","required":"Required","requireValidOption":"Only accept a pre-defined Option","richText":"Rich Text Editor","roles":"Access","rows":"Rows","save":"Save","selectOptions":"Options","select":"Select","selectColor":"Select Color","selectionsMessage":"Allow Multiple Selections","size":"Size","size.xs":"Extra Small","size.sm":"Small","size.m":"Default","size.lg":"Large","style":"Style","styles.btn.default":"Default","styles.btn.danger":"Danger","styles.btn.info":"Info","styles.btn.primary":"Primary","styles.btn.success":"Success","styles.btn.warning":"Warning","subtype":"Type","text":"Text Field","textArea":"Text Area","toggle":"Toggle","warning":"Warning!","value":"Value","viewJSON":"[{&hellip;}]","viewXML":"&lt;/&gt;","yes":"Yes"});
const defaultOptions = {
  actionButtons: [],
  allowStageSort: true,
  append: false,
  controlOrder: ['autocomplete', 'button', 'checkbox-group', 'checkbox', 'date', 'file', 'header', 'hidden', 'number', 'paragraph', 'radio-group', 'select', 'text', 'textarea'],
  controlPosition: 'right',
  dataType: 'json',
  defaultFields: [],
  disabledActionButtons: [],
  disabledAttrs: [],
  disabledFieldButtons: {},
  disabledSubtypes: {},
  disableFields: [],
  disableHTMLLabels: false,
  disableInjectedStyle: false,
  editOnAdd: false,
  fields: [],
  fieldRemoveWarn: false,
  fieldEditContainer: null,
  inputSets: [],
  notify: {
    error: error => {
      console.log(error);
    },
    success: success => {
      console.log(success);
    },
    warning: warning => {
      console.warn(warning);
    }
  },
  onAddField: (fieldId, fieldData) => fieldData,
  onAddFieldAfter: (fieldId, fieldData) => fieldData,
  onAddOption: obj => obj,
  onClearAll: noop,
  onCloseFieldEdit: noop,
  onOpenFieldEdit: noop,
  onSave: noop,
  persistDefaultFields: false,
  prepend: false,
  replaceFields: [],
  roles: {
    'adm': 'Administrator',
    'man': 'Manager'
  },
  sanitizerOptions: {
    clobberingProtection: {
      document: false,
      form: false
    },
    backendOrder: []
  },
  scrollToFieldOnAdd: true,
  showActionButtons: true,
  sortableControls: false,
  stickyControls: {
    enable: true,
    offset: {
      top: 5,
      bottom: 'auto',
      right: 'auto'
    }
  },
  subtypes: {},
  templates: {},
  typeUserAttrs: {},
  typeUserDisabledAttrs: {},
  typeUserEvents: {},
  defaultGridColumnClass: 'col-md-12',
  cancelGridModeDistance: 100,
  enableColumnInsertMenu: false,
  enableEnhancedBootstrapGrid: false
};
const styles = {
  btn: ['default', 'danger', 'info', 'primary', 'success', 'warning']
};
const defaultI18n = {
  location: 'assets/lang/'
};
const instanceConfig = {};
const gridClassNames = {
  rowWrapperClass: 'rowWrapper',
  colWrapperClass: 'colWrapper',
  tmpRowPlaceholderClass: 'tempRowWrapper',
  invisibleRowPlaceholderClass: 'invisibleRowPlaceholder'
};
const defaultTimeout = 333;
const defaultFieldSelector = 'li.form-field';

/***/ }),

/***/ "../src/js/control.js":
/*!****************************!*\
  !*** ../src/js/control.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ control; }
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "../src/js/utils.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mi18n */ "../node_modules/mi18n/dist/mi18n.min.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(mi18n__WEBPACK_IMPORTED_MODULE_1__);
const _excluded = ["label", "type"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }


class control {
  constructor(config, preview) {
    this.rawConfig = jQuery.extend({}, config);
    config = jQuery.extend({}, config);
    this.preview = preview;
    delete config.isPreview;
    if (this.preview) {
      delete config.required;
    }
    const properties = ['label', 'description', 'subtype', 'required', 'disabled'];
    for (const prop of properties) {
      this[prop] = config[prop];
      delete config[prop];
    }
    if (!config.id) {
      if (config.name) {
        config.id = config.name;
      } else {
        config.id = 'control-' + Math.floor(Math.random() * 10000000 + 1);
      }
    }
    this.id = config.id;
    this.type = config.type;
    if (this.description) {
      config.title = this.description;
    }
    if (!control.controlConfig) {
      control.controlConfig = {};
    }
    const classId = this.subtype ? this.type + '.' + this.subtype : this.type;
    this.classConfig = jQuery.extend({}, control.controlConfig[this.type] || {}, control.controlConfig[classId] || {});
    if (this.subtype) {
      config.type = this.subtype;
    }
    if (this.required) {
      config['required'] = 'required';
      config['aria-required'] = 'true';
    }
    if (this.disabled) {
      config['disabled'] = 'disabled';
    }
    this.config = config;
    this.configure();
  }
  static get definition() {
    return {};
  }
  static register(types, controlClass, parentType) {
    const prefix = parentType ? parentType + '.' : '';
    if (!control.classRegister) {
      control.classRegister = {};
    }
    if (!Array.isArray(types)) {
      types = [types];
    }
    for (const type of types) {
      if (type.indexOf('.') !== -1) {
        control.error(`Ignoring type ${type}. Cannot use the character '.' in a type name.`);
        continue;
      }
      control.classRegister[prefix + type] = controlClass;
    }
  }
  static getRegistered(type) {
    if (type === void 0) {
      type = false;
    }
    const types = Object.keys(control.classRegister);
    if (!types.length) {
      return types;
    }
    return types.filter(key => {
      if (type) {
        return key.indexOf(type + '.') > -1;
      }
      return key.indexOf('.') === -1;
    });
  }
  static getRegisteredSubtypes() {
    const types = {};
    for (const key in control.classRegister) {
      if (control.classRegister.hasOwnProperty(key)) {
        const [type, subtype] = key.split('.');
        if (!subtype) {
          continue;
        }
        if (!types[type]) {
          types[type] = [];
        }
        types[type].push(subtype);
      }
    }
    return types;
  }
  static getClass(type, subtype) {
    const lookup = subtype ? type + '.' + subtype : type;
    const controlClass = control.classRegister[lookup] || control.classRegister[type];
    if (!controlClass) {
      return control.error('Invalid control type. (Type: ' + type + ', Subtype: ' + subtype + '). Please ensure you have registered it, and imported it correctly.');
    }
    return controlClass;
  }
  static loadCustom(controls) {
    let controlClasses = [];
    if (controls) {
      controlClasses = controlClasses.concat(controls);
    }
    if (window.fbControls) {
      controlClasses = controlClasses.concat(window.fbControls);
    }
    if (!this.fbControlsLoaded) {
      for (const loadControl of controlClasses) {
        loadControl(control, control.classRegister);
      }
      this.fbControlsLoaded = true;
    }
  }
  static mi18n(lookup, args) {
    const def = this.definition;
    let i18n = def.i18n || {};
    const locale = (mi18n__WEBPACK_IMPORTED_MODULE_1___default().locale);
    i18n = i18n[locale] || i18n.default || i18n;
    const lookupCamel = this.camelCase(lookup);
    const value = typeof i18n == 'object' ? i18n[lookupCamel] || i18n[lookup] : i18n;
    if (value) {
      return value;
    }
    let mapped = def.mi18n;
    if (typeof mapped === 'object') {
      mapped = mapped[lookupCamel] || mapped[lookup];
    }
    if (!mapped) {
      mapped = lookupCamel;
    }
    return mi18n__WEBPACK_IMPORTED_MODULE_1___default().get(mapped, args);
  }
  static active(type) {
    return !Array.isArray(this.definition.inactive) || this.definition.inactive.indexOf(type) === -1;
  }
  static label(type) {
    return this.mi18n(type);
  }
  static icon(type) {
    const def = this.definition;
    if (def && typeof def.icon === 'object') {
      return def.icon[type];
    }
    return def.icon;
  }
  configure() {}
  build() {
    const _this$config = this.config,
      {
        label,
        type
      } = _this$config,
      data = _objectWithoutProperties(_this$config, _excluded);
    return this.markup(type, (0,_utils__WEBPACK_IMPORTED_MODULE_0__.parsedHtml)(label), data);
  }
  on(eventType) {
    const events = {
      prerender: element => element,
      render: evt => {
        const onRender = () => {
          if (this.onRender) {
            this.onRender(evt);
          }
        };
        if (this.css) {
          (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getStyles)(this.css);
        }
        if (this.js && !(0,_utils__WEBPACK_IMPORTED_MODULE_0__.isCached)(this.js)) {
          (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getScripts)(this.js).done(onRender);
        } else {
          onRender(evt);
        }
      }
    };
    return eventType ? events[eventType] : events;
  }
  static error(message) {
    throw new Error(message);
  }
  markup(tag, content, attributes) {
    if (content === void 0) {
      content = '';
    }
    if (attributes === void 0) {
      attributes = {};
    }
    this.element = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.markup)(tag, content, attributes);
    return this.element;
  }
  parsedHtml(html) {
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.parsedHtml)(html);
  }
  static camelCase(str) {
    return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.camelCase)(str);
  }
}

/***/ }),

/***/ "../src/js/control/autocomplete.js":
/*!*****************************************!*\
  !*** ../src/js/control/autocomplete.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlAutocomplete; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dom */ "../src/js/dom.js");
const _excluded = ["values", "type"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }


class controlAutocomplete extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get definition() {
    return {
      mi18n: {
        requireValidOption: 'requireValidOption'
      }
    };
  }
  build() {
    const _this$config = this.config,
      {
        values,
        type
      } = _this$config,
      data = _objectWithoutProperties(_this$config, _excluded);
    const keyboardNav = e => {
      const list = e.target.nextSibling.nextSibling;
      const hiddenField = e.target.nextSibling;
      const activeOption = this.getActiveOption(list);
      const keyCodeMapVals = [[38, () => {
        const previous = this.getPreviousOption(activeOption);
        if (previous) {
          this.selectOption(list, previous);
        }
      }], [40, () => {
        const next = this.getNextOption(activeOption);
        if (next) {
          this.selectOption(list, next);
        }
      }], [13, () => {
        if (activeOption) {
          e.target.value = activeOption.innerHTML;
          hiddenField.value = activeOption.getAttribute('value');
          if (list.style.display === 'none') {
            this.showList(list, activeOption);
          } else {
            this.hideList(list);
          }
        } else {
          if (this.config.requireValidOption) {
            if (!this.isOptionValid(list, e.target.value)) {
              e.target.value = '';
              e.target.nextSibling.value = '';
            }
          }
        }
        e.preventDefault();
      }], [27, () => {
        this.hideList(list);
      }]];
      const keyCodeMap = new Map(keyCodeMapVals);
      let direction = keyCodeMap.get(e.keyCode);
      if (!direction) {
        direction = () => false;
      }
      return direction();
    };
    const fauxEvents = {
      focus: evt => {
        const list = evt.target.nextSibling.nextSibling;
        const filteredOptions = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.filter)(list.querySelectorAll('li'), evt.target.value);
        evt.target.addEventListener('keydown', keyboardNav);
        if (evt.target.value.length > 0) {
          const selectedOption = filteredOptions.length > 0 ? filteredOptions[filteredOptions.length - 1] : null;
          this.showList(list, selectedOption);
        }
      },
      blur: evt => {
        evt.target.removeEventListener('keydown', keyboardNav);
        const blurTimeout = setTimeout(() => {
          evt.target.nextSibling.nextSibling.style.display = 'none';
          clearTimeout(blurTimeout);
        }, 200);
        if (this.config.requireValidOption) {
          const list = evt.target.nextSibling.nextSibling;
          if (!this.isOptionValid(list, evt.target.value)) {
            evt.target.value = '';
            evt.target.nextSibling.value = '';
          }
        }
      },
      input: evt => {
        const list = evt.target.nextSibling.nextSibling;
        const hiddenField = evt.target.nextSibling;
        hiddenField.value = evt.target.value;
        const filteredOptions = (0,_dom__WEBPACK_IMPORTED_MODULE_1__.filter)(list.querySelectorAll('li'), evt.target.value);
        if (filteredOptions.length == 0) {
          this.hideList(list);
        } else {
          let activeOption = this.getActiveOption(list);
          if (!activeOption) {
            activeOption = filteredOptions[filteredOptions.length - 1];
          }
          this.showList(list, activeOption);
        }
      }
    };
    const fauxAttrs = Object.assign({}, data, {
      id: `${data.id}-input`,
      autocomplete: 'off',
      events: fauxEvents
    });
    const hiddenAttrs = Object.assign({}, data, {
      type: 'hidden'
    });
    delete fauxAttrs.name;
    const field = [this.markup('input', null, fauxAttrs), this.markup('input', null, hiddenAttrs)];
    const options = values.map(optionData => {
      const label = optionData.label;
      const config = {
        events: {
          click: evt => {
            const list = evt.target.parentElement;
            const field = list.previousSibling.previousSibling;
            field.value = optionData.label;
            field.nextSibling.value = optionData.value;
            this.hideList(list);
          }
        },
        value: optionData.value
      };
      return this.markup('li', label, config);
    });
    field.push(this.markup('ul', options, {
      id: `${data.id}-list`,
      className: `formbuilder-${type}-list`
    }));
    return field;
  }
  hideList(list) {
    this.selectOption(list, null);
    list.style.display = 'none';
  }
  showList(list, selectedOption) {
    this.selectOption(list, selectedOption);
    list.style.display = 'block';
    list.style.width = list.parentElement.offsetWidth + 'px';
  }
  getActiveOption(list) {
    const activeOption = list.getElementsByClassName('active-option')[0];
    if (activeOption && activeOption.style.display !== 'none') {
      return activeOption;
    }
    return null;
  }
  getPreviousOption(current) {
    let previous = current;
    do {
      previous = previous ? previous.previousSibling : null;
    } while (previous != null && previous.style.display === 'none');
    return previous;
  }
  getNextOption(current) {
    let next = current;
    do {
      next = next ? next.nextSibling : null;
    } while (next != null && next.style.display === 'none');
    return next;
  }
  selectOption(list, selectedOption) {
    const options = list.querySelectorAll('li');
    for (let i = 0; i < options.length; i++) {
      options[i].classList.remove('active-option');
    }
    if (selectedOption) {
      selectedOption.classList.add('active-option');
    }
  }
  isOptionValid(list, value) {
    const options = list.querySelectorAll('li');
    let validValue = false;
    for (let i = 0; i < options.length; i++) {
      if (options[i].innerHTML === value) {
        validValue = true;
        break;
      }
    }
    return validValue;
  }
  onRender(evt) {
    if (this.config.userData) {
      const $el = $('#' + this.config.name);
      const $options = $el.next();
      const preSelectedOption = this.config.userData[0];
      let selectedOption = null;
      $options.find('li').each(function () {
        if ($(this).attr('value') === preSelectedOption) {
          selectedOption = $(this).get(0);
          return;
        }
      });
      if (selectedOption === null) {
        if (this.config.requireValidOption) {
          return;
        } else {
          $el.prev().val(this.config.userData[0]);
          return;
        }
      }
      $el.prev().val(selectedOption.innerHTML);
      $el.val(selectedOption.getAttribute('value'));
      const list = $el.next().get(0);
      if (list.style.display === 'none') {
        this.showList(list, selectedOption);
      } else {
        this.hideList(list);
      }
    }
    return evt;
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('autocomplete', controlAutocomplete);

/***/ }),

/***/ "../src/js/control/button.js":
/*!***********************************!*\
  !*** ../src/js/control/button.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlButton; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");

class controlButton extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  build() {
    return {
      field: this.markup('button', this.label, this.config),
      layout: 'noLabel'
    };
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('button', controlButton);
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['button', 'submit', 'reset'], controlButton, 'button');

/***/ }),

/***/ "../src/js/control/custom.js":
/*!***********************************!*\
  !*** ../src/js/control/custom.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlCustom; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");

class controlCustom extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(config, preview, template) {
    super(config, preview);
    this.template = template;
  }
  build() {
    let custom = this.template;
    if (!custom) {
      return _control__WEBPACK_IMPORTED_MODULE_0__["default"].error(`Invalid custom control type '${this.type}'. Please ensure you have registered it correctly as a template option.`);
    }
    const fieldData = Object.assign(this.config);
    const properties = ['label', 'description', 'subtype', 'id', 'preview', 'required', 'title', 'aria-required', 'type'];
    for (const prop of properties) {
      fieldData[prop] = this.config[prop] || this[prop];
    }
    custom = custom.bind(this);
    custom = custom(fieldData);
    if (custom.js) {
      this.js = custom.js;
    }
    if (custom.css) {
      this.css = custom.css;
    }
    this.onRender = custom.onRender;
    return {
      field: custom.field,
      layout: custom.layout
    };
  }
}

/***/ }),

/***/ "../src/js/control/hidden.js":
/*!***********************************!*\
  !*** ../src/js/control/hidden.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlHidden; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");

class controlHidden extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  build() {
    this.field = this.markup('input', null, this.config);
    return {
      field: this.field,
      layout: 'hidden'
    };
  }
  onRender() {
    if (this.config.userData) {
      $(this.field).val(this.config.userData[0]);
    }
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('hidden', controlHidden);

/***/ }),

/***/ "../src/js/control/index.js":
/*!**********************************!*\
  !*** ../src/js/control/index.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _autocomplete__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./autocomplete */ "../src/js/control/autocomplete.js");
/* harmony import */ var _button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./button */ "../src/js/control/button.js");
/* harmony import */ var _custom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./custom */ "../src/js/control/custom.js");
/* harmony import */ var _hidden__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hidden */ "../src/js/control/hidden.js");
/* harmony import */ var _paragraph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./paragraph */ "../src/js/control/paragraph.js");
/* harmony import */ var _select__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./select */ "../src/js/control/select.js");
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./text */ "../src/js/control/text.js");
/* harmony import */ var _textarea__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./textarea */ "../src/js/control/textarea.js");
/* harmony import */ var _textarea_tinymce__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./textarea.tinymce */ "../src/js/control/textarea.tinymce.js");
/* harmony import */ var _textarea_quill__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./textarea.quill */ "../src/js/control/textarea.quill.js");










/* harmony default export */ __webpack_exports__["default"] = ({
  controlAutocomplete: _autocomplete__WEBPACK_IMPORTED_MODULE_0__["default"],
  controlButton: _button__WEBPACK_IMPORTED_MODULE_1__["default"],
  controlCustom: _custom__WEBPACK_IMPORTED_MODULE_2__["default"],
  controlHidden: _hidden__WEBPACK_IMPORTED_MODULE_3__["default"],
  controlParagraph: _paragraph__WEBPACK_IMPORTED_MODULE_4__["default"],
  controlSelect: _select__WEBPACK_IMPORTED_MODULE_5__["default"],
  controlText: _text__WEBPACK_IMPORTED_MODULE_6__["default"],
  controlTextarea: _textarea__WEBPACK_IMPORTED_MODULE_7__["default"],
  controlTinymce: _textarea_tinymce__WEBPACK_IMPORTED_MODULE_8__["default"],
  controlQuill: _textarea_quill__WEBPACK_IMPORTED_MODULE_9__["default"]
});

/***/ }),

/***/ "../src/js/control/paragraph.js":
/*!**************************************!*\
  !*** ../src/js/control/paragraph.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlParagraph; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "../src/js/utils.js");
const _excluded = ["type"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }


class controlParagraph extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  build() {
    const _this$config = this.config,
      {
        type
      } = _this$config,
      attrs = _objectWithoutProperties(_this$config, _excluded);
    let tag = type;
    const typeMap = {
      paragraph: 'p',
      header: this.subtype
    };
    if (typeMap[type]) {
      tag = typeMap[type];
    }
    return {
      field: this.markup(tag, _utils__WEBPACK_IMPORTED_MODULE_1__["default"].parsedHtml(this.label), attrs),
      layout: 'noLabel'
    };
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['paragraph', 'header'], controlParagraph);
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['p', 'address', 'blockquote', 'canvas', 'output'], controlParagraph, 'paragraph');
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'], controlParagraph, 'header');

/***/ }),

/***/ "../src/js/control/select.js":
/*!***********************************!*\
  !*** ../src/js/control/select.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlSelect; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "../src/js/utils.js");
const _excluded = ["values", "value", "placeholder", "type", "inline", "other", "toggle"],
  _excluded2 = ["label"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }


class controlSelect extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get definition() {
    return {
      inactive: ['checkbox'],
      mi18n: {
        minSelectionRequired: 'minSelectionRequired'
      }
    };
  }
  build() {
    const options = [];
    const _this$config = this.config,
      {
        values,
        value,
        placeholder,
        type,
        inline,
        other,
        toggle
      } = _this$config,
      data = _objectWithoutProperties(_this$config, _excluded);
    const optionType = type.replace('-group', '');
    const isSelect = type === 'select';
    if (data.multiple || type === 'checkbox-group') {
      data.name = data.name + '[]';
    }
    if (type === 'checkbox-group' && data.required) {
      const self = this;
      const defaultOnRender = this.onRender.bind(this);
      this.onRender = function () {
        defaultOnRender();
        self.groupRequired();
      };
    }
    delete data.title;
    if (values) {
      if (placeholder && isSelect) {
        options.push(this.markup('option', placeholder, {
          disabled: true,
          selected: true,
          value: ''
        }));
      }
      for (let i = 0; i < values.length; i++) {
        let option = values[i];
        if (typeof option === 'string') {
          option = {
            label: option,
            value: option
          };
        }
        const {
            label = ''
          } = option,
          optionAttrs = _objectWithoutProperties(option, _excluded2);
        optionAttrs.id = `${data.id}-${i}`;
        if (!optionAttrs.selected || placeholder) {
          delete optionAttrs.selected;
        }
        if (typeof value !== 'undefined' && optionAttrs.value === value) {
          optionAttrs.selected = true;
        }
        if (isSelect) {
          const o = this.markup('option', document.createTextNode(label), optionAttrs);
          options.push(o);
        } else {
          const labelContents = [label];
          let wrapperClass = `formbuilder-${optionType}`;
          if (inline) {
            wrapperClass += '-inline';
          }
          optionAttrs.type = optionType;
          if (optionAttrs.selected) {
            optionAttrs.checked = 'checked';
            delete optionAttrs.selected;
          }
          const input = this.markup('input', null, Object.assign({}, data, optionAttrs));
          const labelAttrs = {
            for: optionAttrs.id
          };
          let output = [input, this.markup('label', labelContents, labelAttrs)];
          if (toggle) {
            labelAttrs.className = 'kc-toggle';
            labelContents.unshift(input, this.markup('span'));
            output = this.markup('label', labelContents, labelAttrs);
          }
          const wrapper = this.markup('div', output, {
            className: wrapperClass
          });
          options.push(wrapper);
        }
      }
      if (!isSelect && other) {
        var _data$className;
        const otherOptionAttrs = {
          id: `${data.id}-other`,
          className: `${(_data$className = data.className) !== null && _data$className !== void 0 ? _data$className : ''} other-option`,
          value: ''
        };
        let wrapperClass = `formbuilder-${optionType}`;
        if (inline) {
          wrapperClass += '-inline';
        }
        const optionAttrs = Object.assign({}, data, otherOptionAttrs);
        optionAttrs.type = optionType;
        const otherValAttrs = {
          type: 'text',
          events: {
            input: evt => {
              const otherInput = evt.target;
              const other = otherInput.parentElement.previousElementSibling;
              other.value = otherInput.value;
            }
          },
          id: `${otherOptionAttrs.id}-value`,
          className: 'other-val'
        };
        const primaryInput = this.markup('input', null, optionAttrs);
        const otherInputs = [document.createTextNode(_control__WEBPACK_IMPORTED_MODULE_0__["default"].mi18n('other')), this.markup('input', null, otherValAttrs)];
        const inputLabel = this.markup('label', otherInputs, {
          for: optionAttrs.id
        });
        const wrapper = this.markup('div', [primaryInput, inputLabel], {
          className: wrapperClass
        });
        options.push(wrapper);
      }
    }
    if (type == 'select') {
      this.dom = this.markup(optionType, options, (0,_utils__WEBPACK_IMPORTED_MODULE_1__.trimObj)(data, true));
    } else {
      this.dom = this.markup('div', options, {
        className: type
      });
    }
    return this.dom;
  }
  groupRequired() {
    const checkboxes = this.element.getElementsByTagName('input');
    const setValidity = (checkbox, isValid) => {
      const minReq = _control__WEBPACK_IMPORTED_MODULE_0__["default"].mi18n('minSelectionRequired', 1);
      if (!isValid) {
        checkbox.setCustomValidity(minReq);
      } else {
        checkbox.setCustomValidity('');
      }
    };
    const toggleRequired = (checkboxes, isValid) => {
      [].forEach.call(checkboxes, cb => {
        if (isValid) {
          cb.removeAttribute('required');
        } else {
          cb.setAttribute('required', 'required');
        }
        setValidity(cb, isValid);
      });
    };
    const toggleValid = () => {
      const isValid = [].some.call(checkboxes, cb => cb.checked);
      toggleRequired(checkboxes, isValid);
    };
    for (let i = checkboxes.length - 1; i >= 0; i--) {
      checkboxes[i].addEventListener('change', toggleValid);
    }
    toggleValid();
  }
  onRender() {
    if (this.config.userData) {
      const selectedOptions = this.config.userData.slice();
      if (this.config.type === 'select') {
        $(this.dom).val(selectedOptions).prop('selected', true);
      } else if (this.config.type.endsWith('-group')) {
        if (this.config.type === 'checkbox-group') {
          this.dom.querySelectorAll('input[type=checkbox]').forEach(input => {
            input.removeAttribute('checked');
          });
        }
        this.dom.querySelectorAll('input').forEach(input => {
          if (input.classList.contains('other-val')) {
            return;
          }
          for (let i = 0; i < selectedOptions.length; i++) {
            if (input.value === selectedOptions[i]) {
              input.setAttribute('checked', 'checked');
              selectedOptions.splice(i, 1);
              break;
            }
          }
          if (input.id.endsWith('-other') && selectedOptions.length > 0) {
            const otherVal = this.dom.querySelector(`#${input.id}-value`);
            input.setAttribute('checked', 'checked');
            otherVal.value = input.value = selectedOptions[0];
            otherVal.style.display = 'inline-block';
          }
        });
      }
    }
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['select', 'checkbox-group', 'radio-group', 'checkbox'], controlSelect);

/***/ }),

/***/ "../src/js/control/text.js":
/*!*********************************!*\
  !*** ../src/js/control/text.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlText; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");

class controlText extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get definition() {
    return {
      mi18n: {
        date: 'dateField',
        file: 'fileUpload'
      }
    };
  }
  build() {
    let {
      name
    } = this.config;
    name = this.config.multiple ? `${name}[]` : name;
    const inputConfig = Object.assign({}, this.config, {
      name
    });
    this.dom = this.markup('input', null, inputConfig);
    return this.dom;
  }
  onRender() {
    if (this.config.userData) {
      $(this.dom).val(this.config.userData[0]);
    }
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['text', 'file', 'date', 'number'], controlText);
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['text', 'password', 'email', 'color', 'tel'], controlText, 'text');
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['date', 'time', 'datetime-local'], controlText, 'date');
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register(['number', 'range'], controlText, 'number');

/***/ }),

/***/ "../src/js/control/textarea.js":
/*!*************************************!*\
  !*** ../src/js/control/textarea.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlTextarea; }
/* harmony export */ });
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../control */ "../src/js/control.js");
const _excluded = ["value"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

class controlTextarea extends _control__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get definition() {
    return {
      mi18n: {
        textarea: 'textArea'
      }
    };
  }
  build() {
    const _this$config = this.config,
      {
        value = ''
      } = _this$config,
      attrs = _objectWithoutProperties(_this$config, _excluded);
    delete attrs['type'];
    this.field = this.markup('textarea', this.parsedHtml(value), attrs);
    return this.field;
  }
  onRender() {
    if (this.config.userData) {
      $(this.field).val(this.config.userData[0]);
    }
  }
  on(eventType) {
    if (eventType == 'prerender' && this.preview) {
      return element => {
        if (this.field) {
          element = this.field;
        }
        $(element).on('mousedown', e => {
          e.stopPropagation();
        });
      };
    }
    return super.on(eventType);
  }
}
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('textarea', controlTextarea);
_control__WEBPACK_IMPORTED_MODULE_0__["default"].register('textarea', controlTextarea, 'textarea');

/***/ }),

/***/ "../src/js/control/textarea.quill.js":
/*!*******************************************!*\
  !*** ../src/js/control/textarea.quill.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlQuill; }
/* harmony export */ });
/* harmony import */ var _textarea__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textarea */ "../src/js/control/textarea.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ "../src/js/utils.js");
const _excluded = ["value"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


class controlQuill extends _textarea__WEBPACK_IMPORTED_MODULE_0__["default"] {
  configure() {
    const defaultClassConfig = {
      js: 'https://cdn.quilljs.com/1.2.4/quill.js',
      css: 'https://cdn.quilljs.com/1.2.4/quill.snow.css'
    };
    const defaultEditorConfig = {
      modules: {
        toolbar: [[{
          header: [1, 2, false]
        }], ['bold', 'italic', 'underline'], ['code-block']]
      },
      placeholder: this.config.placeholder || '',
      theme: 'snow'
    };
    const [customClassConfig, customEditorConfig] = _utils__WEBPACK_IMPORTED_MODULE_1__["default"].splitObject(this.classConfig, ['css', 'js']);
    Object.assign(this, _objectSpread(_objectSpread({}, defaultClassConfig), customClassConfig));
    this.editorConfig = _objectSpread(_objectSpread({}, defaultEditorConfig), customEditorConfig);
  }
  build() {
    const _this$config = this.config,
      {
        value = ''
      } = _this$config,
      attrs = _objectWithoutProperties(_this$config, _excluded);
    delete attrs['type'];
    this.field = this.markup('div', null, attrs);
    if (this.field.classList.contains('form-control')) {
      this.field.classList.remove('form-control');
    }
    return this.field;
  }
  onRender(evt) {
    const value = this.config.value || '';
    const Delta = window.Quill.import('delta');
    window.fbEditors.quill[this.id] = {};
    const editor = window.fbEditors.quill[this.id];
    editor.instance = new window.Quill(this.field, this.editorConfig);
    editor.data = new Delta();
    if (value) {
      editor.instance.setContents(window.JSON.parse(this.parsedHtml(value)));
    }
    editor.instance.on('text-change', function (delta) {
      editor.data = editor.data.compose(delta);
    });
    return evt;
  }
}
_textarea__WEBPACK_IMPORTED_MODULE_0__["default"].register('quill', controlQuill, 'textarea');

/***/ }),

/***/ "../src/js/control/textarea.tinymce.js":
/*!*********************************************!*\
  !*** ../src/js/control/textarea.tinymce.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ controlTinymce; }
/* harmony export */ });
/* harmony import */ var _textarea__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./textarea */ "../src/js/control/textarea.js");
const _excluded = ["value"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

class controlTinymce extends _textarea__WEBPACK_IMPORTED_MODULE_0__["default"] {
  configure() {
    this.js = [];
    if (!window.tinymce) {
      this.js.push('https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.9.11/tinymce.min.js');
    }
    if (this.classConfig.js) {
      let js = this.classConfig.js;
      if (!Array.isArray(js)) {
        js = new Array(js);
      }
      this.js = this.js.concat(js);
      delete this.classConfig.js;
    }
    if (this.classConfig.css) {
      this.css = this.classConfig.css;
    }
    this.editorOptions = {
      height: 250,
      paste_data_images: true,
      plugins: ['advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'print', 'preview', 'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen', 'insertdatetime', 'media', 'table', 'contextmenu', 'paste', 'code'],
      toolbar: 'undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | table'
    };
  }
  build() {
    const _this$config = this.config,
      {
        value = ''
      } = _this$config,
      attrs = _objectWithoutProperties(_this$config, _excluded);
    delete attrs['type'];
    this.field = this.markup('textarea', this.parsedHtml(value), attrs);
    if (attrs.disabled) {
      this.editorOptions.readonly = true;
    }
    return this.field;
  }
  onRender() {
    const oldInst = window.tinymce.get(this.id);
    if (oldInst) {
      window.tinymce.remove(oldInst);
    }
    const options = jQuery.extend(this.editorOptions, this.classConfig);
    options.target = this.field;
    const removedPlugins = [];
    if (Number(window.tinymce.majorVersion) >= 5) {
      removedPlugins.push('contextmenu');
    }
    if (Number(window.tinymce.majorVersion) >= 6) {
      removedPlugins.push('paste', 'print');
    }
    options.plugins = options.plugins.filter(plugin => {
      return removedPlugins.indexOf(plugin) === -1;
    });
    const userData = this.config.userData ? this.parsedHtml(this.config.userData[0]) : undefined;
    const copiedData = window.lastFormBuilderCopiedTinyMCE ? this.parsedHtml(window.lastFormBuilderCopiedTinyMCE) : undefined;
    window.lastFormBuilderCopiedTinyMCE = null;
    const afterInit = function (inst) {
      if (copiedData) {
        inst[0].setContent(copiedData);
      } else if (userData) {
        inst[0].setContent(userData);
      }
    };
    setTimeout(() => {
      window.tinymce.init(options).then(afterInit);
    }, 0);
  }
}
_textarea__WEBPACK_IMPORTED_MODULE_0__["default"].register('tinymce', controlTinymce, 'textarea');

/***/ }),

/***/ "../src/js/controls.js":
/*!*****************************!*\
  !*** ../src/js/controls.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ Controls; }
/* harmony export */ });
/* harmony import */ var _control_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./control/index */ "../src/js/control/index.js");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../src/js/control.js");
/* harmony import */ var _customControls__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./customControls */ "../src/js/customControls.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "../src/js/utils.js");
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dom */ "../src/js/dom.js");
/* harmony import */ var _fonts_config_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../fonts/config.json */ "../src/fonts/config.json");
/* harmony import */ var storage_available__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! storage-available */ "../node_modules/storage-available/storage-available.js");
/* harmony import */ var storage_available__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(storage_available__WEBPACK_IMPORTED_MODULE_6__);







const css_prefix_text = _fonts_config_json__WEBPACK_IMPORTED_MODULE_5__.css_prefix_text;
class Controls {
  constructor(opts, d) {
    this.opts = opts;
    this.dom = d.controls;
    this.getRegistered = _control__WEBPACK_IMPORTED_MODULE_1__["default"].getRegistered;
    this.init();
  }
  init() {
    this.setupControls();
    this.appendControls();
  }
  setupControls() {
    const opts = this.opts;
    _control__WEBPACK_IMPORTED_MODULE_1__["default"].loadCustom(opts.controls);
    this.custom = new _customControls__WEBPACK_IMPORTED_MODULE_2__["default"](opts.templates, opts.fields);
    const registeredControls = _control__WEBPACK_IMPORTED_MODULE_1__["default"].getRegistered();
    const customFields = this.custom.getRegistered();
    if (customFields) {
      jQuery.merge(registeredControls, customFields);
    }
    this.registeredSubtypes = _control__WEBPACK_IMPORTED_MODULE_1__["default"].getRegisteredSubtypes();
    if (opts.sortableControls) {
      this.dom.classList.add('sort-enabled');
    }
    this.controlList = [];
    this.allControls = {};
    for (let i = 0; i < registeredControls.length; i++) {
      const type = registeredControls[i];
      let custom = this.custom.lookup(type);
      let controlClass;
      if (custom) {
        controlClass = custom.class;
      } else {
        custom = {};
        controlClass = _control__WEBPACK_IMPORTED_MODULE_1__["default"].getClass(type);
        if (!controlClass || !controlClass.active(type)) {
          continue;
        }
      }
      const icon = custom.icon || controlClass.icon(type);
      let label = custom.label || controlClass.label(type);
      const iconClassName = !icon ? custom.iconClassName || `${css_prefix_text + type.replace(/-[\d]{4}$/, '')}` : '';
      if (icon) {
        label = `<span class="control-icon">${icon}</span>${label}`;
      }
      const newFieldControl = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('li', (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('span', label), {
        className: `${iconClassName} input-control input-control-${i}`
      });
      newFieldControl.dataset.type = type;
      this.controlList.push(type);
      this.allControls[type] = newFieldControl;
    }
    if (opts.inputSets.length) {
      opts.inputSets.forEach((set, i) => {
        let {
          name,
          label
        } = set;
        name = name || (0,_utils__WEBPACK_IMPORTED_MODULE_3__.hyphenCase)(label);
        if (set.icon) {
          label = `<span class="control-icon">${set.icon}</span>${label}`;
        }
        const inputSet = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('li', (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('span', label), {
          className: `input-set-control input-set-${i}`
        });
        inputSet.dataset.type = name;
        this.controlList.push(name);
        this.allControls[name] = inputSet;
      });
    }
  }
  orderFields(controls) {
    const opts = this.opts;
    const controlOrder = opts.controlOrder.concat(controls);
    let fieldOrder;
    if (storage_available__WEBPACK_IMPORTED_MODULE_6___default()('sessionStorage')) {
      if (opts.sortableControls) {
        fieldOrder = window.sessionStorage.getItem('fieldOrder');
      } else {
        window.sessionStorage.removeItem('fieldOrder');
      }
    }
    if (!fieldOrder) {
      fieldOrder = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.unique)(controlOrder);
    } else {
      fieldOrder = window.JSON.parse(fieldOrder);
      fieldOrder = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.unique)(fieldOrder.concat(controls));
      fieldOrder = Object.keys(fieldOrder).map(i => fieldOrder[i]);
    }
    fieldOrder.forEach(field => {
      const randomKey = new RegExp('-[\\d]{4}$');
      if (field.match(randomKey)) {
        const baseFieldIndex = fieldOrder.indexOf(field.replace(randomKey, ''));
        if (baseFieldIndex !== -1) {
          fieldOrder.splice(fieldOrder.indexOf(field), 1);
          fieldOrder.splice(baseFieldIndex + 1, fieldOrder.indexOf(field), field);
        }
      }
    });
    if (opts.disableFields.length) {
      fieldOrder = fieldOrder.filter(type => !opts.disableFields.includes(type));
    }
    return fieldOrder.filter(Boolean);
  }
  appendControls() {
    const fragment = document.createDocumentFragment();
    (0,_dom__WEBPACK_IMPORTED_MODULE_4__.empty)(this.dom);
    this.orderFields(this.controlList).forEach(controlKey => {
      const control = this.allControls[controlKey];
      if (control) {
        fragment.appendChild(control);
      }
    });
    this.dom.appendChild(fragment);
  }
  getClass(type, subtype) {
    return this.custom.getClass(type) || _control__WEBPACK_IMPORTED_MODULE_1__["default"].getClass(type, subtype);
  }
}

/***/ }),

/***/ "../src/js/customControls.js":
/*!***********************************!*\
  !*** ../src/js/customControls.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ customControls; }
/* harmony export */ });
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mi18n */ "../node_modules/mi18n/dist/mi18n.min.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mi18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../src/js/control.js");
/* harmony import */ var _control_custom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./control/custom */ "../src/js/control/custom.js");



class customControls {
  constructor(templates, fields) {
    if (templates === void 0) {
      templates = {};
    }
    if (fields === void 0) {
      fields = [];
    }
    this.customRegister = {};
    this.templateControlRegister = {};
    this.def = {
      icon: {},
      i18n: {}
    };
    this.register(templates, fields);
  }
  register(templates, fields) {
    if (templates === void 0) {
      templates = {};
    }
    if (fields === void 0) {
      fields = [];
    }
    const locale = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().locale);
    if (!this.def.i18n[locale]) {
      this.def.i18n[locale] = {};
    }
    const _this = this;
    Object.keys(templates).forEach(templateName => {
      const templateControl = function (config, preview) {
        this.customControl = new _control_custom__WEBPACK_IMPORTED_MODULE_2__["default"](config, preview, templates[templateName]);
        this.build = function () {
          return this.customControl.build();
        };
        this.on = function (eventType) {
          return this.customControl.on(eventType);
        };
      };
      templateControl.definition = {};
      templateControl.label = type => _this.label(type);
      templateControl.icon = type => _this.icon(type);
      this.templateControlRegister[templateName] = templateControl;
    });
    for (const field of fields) {
      let type = field.type;
      field.attrs = field.attrs || {};
      if (!type) {
        if (!field.attrs.type) {
          _control__WEBPACK_IMPORTED_MODULE_1__["default"].error('Ignoring invalid custom field definition. Please specify a type property.');
          continue;
        }
        type = field.attrs.type;
      }
      let lookup = field.subtype || type;
      if (!templates[type]) {
        const controlClass = _control__WEBPACK_IMPORTED_MODULE_1__["default"].getClass(type, field.subtype);
        if (!controlClass) {
          super.error('Error while registering custom field: ' + type + (field.subtype ? ':' + field.subtype : '') + '. Unable to find any existing defined control or template for rendering.');
          continue;
        }
        lookup = field.datatype ? field.datatype : `${type}-${Math.floor(Math.random() * 9000 + 1000)}`;
        this.customRegister[lookup] = jQuery.extend(field, {
          type: type,
          class: controlClass
        });
      } else {
        const controlClass = this.templateControlRegister[type];
        controlClass.definition = field;
        this.customRegister[lookup] = jQuery.extend(field, {
          type: type,
          class: controlClass
        });
      }
      this.def.i18n[locale][lookup] = field.label;
      this.def.icon[lookup] = field.icon;
    }
  }
  label(type) {
    const def = this.definition;
    let i18n = def.i18n || {};
    const locale = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().locale);
    i18n = i18n[locale] || i18n.default || i18n;
    const lookupCamel = _control__WEBPACK_IMPORTED_MODULE_1__["default"].camelCase(type);
    const value = typeof i18n == 'object' ? i18n[lookupCamel] || i18n[type] : i18n;
    if (value) {
      return value;
    } else {
      let mapped = def.mi18n;
      if (typeof mapped === 'object') {
        mapped = mapped[lookupCamel] || mapped[type];
      }
      if (!mapped) {
        mapped = lookupCamel;
      }
      return mi18n__WEBPACK_IMPORTED_MODULE_0___default().get(mapped);
    }
  }
  get definition() {
    return {};
  }
  icon(type) {
    const def = this.definition;
    if (def && typeof def.icon === 'object') {
      return def.icon[type];
    }
    return def.icon;
  }
  getRegistered(type) {
    if (type === void 0) {
      type = false;
    }
    if (type) {
      var _this$templateControl;
      return (_this$templateControl = this.templateControlRegister[type]) !== null && _this$templateControl !== void 0 ? _this$templateControl : undefined;
    }
    return Object.keys(this.customRegister);
  }
  getClass(type) {
    var _this$templateControl2;
    return (_this$templateControl2 = this.templateControlRegister[type]) !== null && _this$templateControl2 !== void 0 ? _this$templateControl2 : undefined;
  }
  lookup(lookup) {
    return this.customRegister[lookup];
  }
}

/***/ }),

/***/ "../src/js/data.js":
/*!*************************!*\
  !*** ../src/js/data.js ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Data: function() { return /* binding */ Data; },
/* harmony export */   availablefields: function() { return /* binding */ availablefields; },
/* harmony export */   instanceData: function() { return /* binding */ instanceData; }
/* harmony export */ });
const instanceData = {};
class Data {
  constructor(formID) {
    this.formData = {};
    this.formID = formID;
    instanceData[formID] = this;
  }
}
const availablefields = {};

/***/ }),

/***/ "../src/js/dom.js":
/*!************************!*\
  !*** ../src/js/dom.js ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ Dom; },
/* harmony export */   defaultSubtypes: function() { return /* binding */ defaultSubtypes; },
/* harmony export */   empty: function() { return /* binding */ empty; },
/* harmony export */   filter: function() { return /* binding */ filter; },
/* harmony export */   instanceDom: function() { return /* binding */ instanceDom; },
/* harmony export */   optionFields: function() { return /* binding */ optionFields; },
/* harmony export */   optionFieldsRegEx: function() { return /* binding */ optionFieldsRegEx; },
/* harmony export */   remove: function() { return /* binding */ remove; }
/* harmony export */ });
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const instanceDom = {};
const defaultSubtypes = {
  text: ['text', 'password', 'email', 'color', 'tel'],
  header: ['h1', 'h2', 'h3'],
  button: ['button', 'submit', 'reset'],
  paragraph: ['p', 'address', 'blockquote', 'canvas', 'output'],
  textarea: ['textarea', 'quill']
};
const remove = element => {
  if (element.parentNode) {
    element.parentNode.removeChild(element);
  }
};
const empty = element => {
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
  return element;
};
const filter = function (elems, term, show) {
  if (show === void 0) {
    show = true;
  }
  const filteredElems = [];
  let toggle = ['none', 'block'];
  if (show) {
    toggle = toggle.reverse();
  }
  for (let i = elems.length - 1; i >= 0; i--) {
    const txt = elems[i].textContent.toLowerCase();
    if (txt.indexOf(term.toLowerCase()) !== -1) {
      elems[i].style.display = toggle[0];
      filteredElems.push(elems[i]);
    } else {
      elems[i].style.display = toggle[1];
    }
  }
  return filteredElems;
};
const optionFields = ['select', 'checkbox-group', 'checkbox', 'radio-group', 'autocomplete'];
const optionFieldsRegEx = new RegExp(`(${optionFields.join('|')})`);
class Dom {
  constructor(formID) {
    _defineProperty(this, "stage", void 0);
    _defineProperty(this, "controls", void 0);
    _defineProperty(this, "formActions", void 0);
    _defineProperty(this, "editorWrap", void 0);
    this.optionFields = optionFields;
    this.optionFieldsRegEx = optionFieldsRegEx;
    this.subtypes = defaultSubtypes;
    this.empty = empty;
    this.filter = filter;
    instanceDom[formID] = this;
    return instanceDom[formID];
  }
  onRender(node, cb) {
    if (!node.parentElement) {
      window.requestAnimationFrame(() => this.onRender(node, cb));
    } else {
      cb(node);
    }
  }
}

/***/ }),

/***/ "../src/js/events.js":
/*!***************************!*\
  !*** ../src/js/events.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function createNewEvent(eventName) {
  let event;
  if (typeof Event === 'function') {
    event = new Event(eventName);
  } else {
    event = document.createEvent('Event');
    event.initEvent(eventName, true, true);
  }
  return event;
}
const events = {
  loaded: createNewEvent('loaded'),
  viewData: createNewEvent('viewData'),
  userDeclined: createNewEvent('userDeclined'),
  modalClosed: createNewEvent('modalClosed'),
  modalOpened: createNewEvent('modalOpened'),
  formSaved: createNewEvent('formSaved'),
  fieldAdded: createNewEvent('fieldAdded'),
  fieldRemoved: createNewEvent('fieldRemoved'),
  fieldRendered: createNewEvent('fieldRendered'),
  fieldEditOpened: createNewEvent('fieldEditOpened'),
  fieldEditClosed: createNewEvent('fieldEditClosed'),
  stageEmptied: createNewEvent('stageEmptied')
};
/* harmony default export */ __webpack_exports__["default"] = (events);

/***/ }),

/***/ "../src/js/helpers.js":
/*!****************************!*\
  !*** ../src/js/helpers.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ Helpers; }
/* harmony export */ });
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mi18n */ "../node_modules/mi18n/dist/mi18n.min.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mi18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom */ "../src/js/dom.js");
/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data */ "../src/js/data.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ "../src/js/utils.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./events */ "../src/js/events.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config */ "../src/js/config.js");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./control */ "../src/js/control.js");
/* harmony import */ var storage_available__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! storage-available */ "../node_modules/storage-available/storage-available.js");
/* harmony import */ var storage_available__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(storage_available__WEBPACK_IMPORTED_MODULE_7__);
const _excluded = ["values"],
  _excluded2 = ["label", "events"],
  _excluded3 = ["actionButtons", "replaceFields"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }








class Helpers {
  constructor(formId, layout, formBuilder) {
    this.data = _data__WEBPACK_IMPORTED_MODULE_2__.instanceData[formId];
    this.d = _dom__WEBPACK_IMPORTED_MODULE_1__.instanceDom[formId];
    this.config = _config__WEBPACK_IMPORTED_MODULE_5__.instanceConfig[formId];
    this.doCancel = false;
    this.layout = layout;
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.formBuilder = formBuilder;
    this.toastTimer = null;
  }
  startMoving(event, ui) {
    ui.item.show().addClass('moving');
    this.doCancel = true;
    this.from = ui.item.parent();
  }
  stopMoving(event, ui) {
    const _this = this;
    ui.item.removeClass('moving');
    if (_this.doCancel) {
      if (ui.sender) {
        $(ui.sender).sortable('cancel');
      }
      this.from.sortable('cancel');
    }
    _this.save();
    _this.doCancel = false;
  }
  beforeStop(event, ui) {
    const _this = this;
    const opts = this.config.opts;
    const form = _this.d.stage;
    const lastIndex = form.childNodes.length - 1;
    const cancelArray = [];
    _this.stopIndex = ui.placeholder.closest('ul.stage-wrap > *').index() - 1;
    if (!opts.sortableControls && ui.item.parent().hasClass('frmb-control')) {
      cancelArray.push(true);
    }
    if (opts.prepend) {
      cancelArray.push(_this.stopIndex === 0);
    }
    if (opts.append) {
      cancelArray.push(_this.stopIndex + 1 === lastIndex);
    }
    _this.doCancel = cancelArray.some(elem => elem === true);
  }
  getTypes($field) {
    const types = {
      type: $field.attr('type')
    };
    const subtype = $('.fld-subtype', $field).val();
    if (subtype !== types.type) {
      types.subtype = subtype;
    }
    return types;
  }
  fieldOptionData(field) {
    const options = [];
    const $options = $('.sortable-options li', field);
    $options.each(i => {
      const option = $options[i];
      const stringAttrs = option.querySelectorAll('input[type=text], input[type=number], select');
      const boolAttrs = option.querySelectorAll('input[type=checkbox], input[type=radio]');
      const attrs = {};
      (0,_utils__WEBPACK_IMPORTED_MODULE_3__.forEach)(stringAttrs, i => {
        const stringAttr = stringAttrs[i];
        const attrName = stringAttr.dataset.attr;
        attrs[attrName] = stringAttr.value;
      });
      (0,_utils__WEBPACK_IMPORTED_MODULE_3__.forEach)(boolAttrs, i => {
        const boolAttr = boolAttrs[i];
        const attrName = boolAttr.getAttribute('data-attr');
        attrs[attrName] = boolAttr.checked;
      });
      options.push(attrs);
    });
    return options;
  }
  xmlSave(form) {
    const formData = this.prepData(form);
    const xmlSerializer = new XMLSerializer();
    const fields = ['<fields>'];
    formData.forEach(field => {
      const {
          values
        } = field,
        fieldData = _objectWithoutProperties(field, _excluded);
      let fieldHTML = [`<field ${(0,_utils__WEBPACK_IMPORTED_MODULE_3__.xmlAttrString)(fieldData)}>`];
      if (_dom__WEBPACK_IMPORTED_MODULE_1__.optionFields.includes(field.type)) {
        const options = values.map(option => (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('option', option.label, option).outerHTML);
        fieldHTML = fieldHTML.concat(options);
      }
      fieldHTML.push('</field>');
      fields.push(fieldHTML);
    });
    fields.push('</fields>');
    const formTemplate = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('form-template', (0,_utils__WEBPACK_IMPORTED_MODULE_3__.flattenArray)(fields).join(''));
    return xmlSerializer.serializeToString(formTemplate);
  }
  prepData(form) {
    const formData = [];
    const d = this.d;
    const _this = this;
    const config = this.config;
    if (form.childNodes.length !== 0) {
      const fields = [];
      (0,_utils__WEBPACK_IMPORTED_MODULE_3__.forEach)(form.childNodes, function (_index, fieldWrapper) {
        const $fieldWrapper = $(fieldWrapper);
        $fieldWrapper.find('li.form-field').each(function (i, field) {
          fields.push(field);
        });
      });
      (0,_utils__WEBPACK_IMPORTED_MODULE_3__.forEach)(form.childNodes, function (_index, testElement) {
        const $testElement = $(testElement);
        if ($testElement.is('li') && $testElement.hasClass('form-field')) {
          fields.push(testElement);
        }
      });
      if (fields.length) {
        fields.forEach(field => {
          const $field = $(field);
          if (!$field.hasClass('disabled-field')) {
            let fieldData = _this.getTypes($field);
            const $roleInputs = $('.roles-field:checked', field);
            const roleVals = $roleInputs.map(index => $roleInputs[index].value).get();
            fieldData = Object.assign({}, fieldData, _this.getAttrVals(field));
            if (fieldData.subtype) {
              if (fieldData.subtype === 'quill') {
                const id = `${fieldData.name}-preview`;
                if (window.fbEditors.quill[id]) {
                  const instance = window.fbEditors.quill[id].instance;
                  const data = instance.getContents();
                  fieldData.value = window.JSON.stringify(data.ops);
                }
              } else if (fieldData.subtype === 'tinymce' && window.tinymce) {
                const id = `${fieldData.name}-preview`;
                const editor = window.tinymce.get(id);
                if (editor) {
                  fieldData.value = editor.getContent();
                }
              }
            }
            if (roleVals.length) {
              fieldData.role = roleVals.join(',');
            }
            fieldData.className = fieldData.className || fieldData.class;
            if (fieldData.className && $field.attr('addeddefaultcolumnclass') == 'true' && $field.closest(this.formBuilder.rowWrapperClassSelector).children().length == 1 && fieldData.className.includes(config.opts.defaultGridColumnClass)) {
              const classes = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getAllGridRelatedClasses)(fieldData.className);
              if (classes && classes.length > 0) {
                classes.forEach(element => {
                  fieldData.className = fieldData.className.replace(element, '').trim();
                });
              }
            }
            if (fieldData.className) {
              const regex = new RegExp('(?:^|\\s)btn-(' + _config__WEBPACK_IMPORTED_MODULE_5__.styles.btn.join('|') + ')(?:\\s|$)', 'g');
              const match = regex.exec(fieldData.className);
              if (match) {
                fieldData.style = match[1];
              }
            }
            fieldData = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.trimObj)(fieldData);
            const multipleField = fieldData.type && fieldData.type.match(d.optionFieldsRegEx);
            if (multipleField) {
              fieldData.values = _this.fieldOptionData($field);
            }
            formData.push(fieldData);
          }
        });
      }
    }
    return formData;
  }
  getData(formData) {
    const data = this.data;
    if (!formData) {
      formData = this.config.opts.formData;
    }
    if (!formData) {
      return false;
    }
    const setData = {
      xml: formData => Array.isArray(formData) ? formData : (0,_utils__WEBPACK_IMPORTED_MODULE_3__.parseXML)(formData),
      json: formData => {
        if (typeof formData === 'string') {
          return window.JSON.parse(formData);
        }
        return formData;
      }
    };
    data.formData = setData[this.config.opts.dataType](formData) || [];
    return data.formData;
  }
  save(minify) {
    if (minify === void 0) {
      minify = false;
    }
    const _this = this;
    const data = this.data;
    const stage = this.d.stage;
    const doSave = {
      xml: () => _this.xmlSave(stage),
      json: minify => window.JSON.stringify(_this.prepData(stage), null, minify && '  ')
    };
    data.formData = doSave[this.config.opts.dataType](minify);
    document.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_4__["default"].formSaved);
    return data.formData;
  }
  incrementId(id) {
    const split = id.lastIndexOf('-');
    const newFieldNumber = parseInt(id.substring(split + 1)) + 1;
    const baseString = id.substring(0, split);
    return `${baseString}-${newFieldNumber}`;
  }
  getAttrVals(field) {
    const config = this.config;
    const fieldData = Object.create(null);
    const attrs = field.querySelectorAll('[class*="fld-"]');
    (0,_utils__WEBPACK_IMPORTED_MODULE_3__.forEach)(attrs, index => {
      const attr = attrs[index];
      const name = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.camelCase)(attr.getAttribute('name'));
      fieldData[name] = [[attr.attributes.contenteditable, () => config.opts.dataType === 'xml' ? (0,_utils__WEBPACK_IMPORTED_MODULE_3__.escapeHtml)(attr.innerHTML) : attr.innerHTML], [attr.type === 'checkbox', () => attr.checked], [attr.type === 'number' && attr.value !== '', () => Number(attr.value)], [attr.attributes.multiple, () => $(attr).val()], [true, () => attr.value]].find(_ref => {
        let [condition] = _ref;
        return !!condition;
      })[1]();
    });
    return fieldData;
  }
  updatePreview($field) {
    const _this = this;
    const d = this.d;
    const fieldClass = $field.attr('class');
    const field = $field[0];
    if (fieldClass.includes('input-control')) {
      return;
    }
    const fieldType = $field.attr('type');
    const $prevHolder = $('.prev-holder', field);
    let previewData = Object.assign({}, _this.getAttrVals(field), {
      type: fieldType
    });
    if (fieldType.match(d.optionFieldsRegEx)) {
      previewData.values = [];
      previewData.multiple = $('[name="multiple"]', field).is(':checked');
      $('.sortable-options li', field).each(function (i, $option) {
        const option = {
          selected: $('.option-selected', $option).is(':checked'),
          value: $('.option-value', $option).val(),
          label: $('.option-label', $option).val()
        };
        previewData.values.push(option);
      });
    }
    previewData = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.trimObj)(previewData, true);
    previewData.className = _this.classNames(field, previewData);
    $field.data('fieldData', previewData);
    const custom = _this.formBuilder.controls.custom.lookup(previewData.type);
    const template = _this.formBuilder.controls.custom.getClass(previewData.type);
    const controlClass = custom ? custom.class : template || _control__WEBPACK_IMPORTED_MODULE_6__["default"].getClass(previewData.type, previewData.subtype);
    const preview = this.layout.build(controlClass, previewData);
    (0,_dom__WEBPACK_IMPORTED_MODULE_1__.empty)($prevHolder[0]);
    $prevHolder[0].appendChild(preview);
    preview.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_4__["default"].fieldRendered);
  }
  disabledTT(stage) {
    const move = (e, elem) => {
      const fieldOffset = elem.field.getBoundingClientRect();
      const x = e.clientX - fieldOffset.left - 21;
      const y = e.clientY - fieldOffset.top - elem.tt.offsetHeight - 12;
      elem.tt.style.transform = `translate(${x}px, ${y}px)`;
    };
    const disabledFields = stage.querySelectorAll('.disabled-field');
    (0,_utils__WEBPACK_IMPORTED_MODULE_3__.forEach)(disabledFields, index => {
      const field = disabledFields[index];
      const title = mi18n__WEBPACK_IMPORTED_MODULE_0___default().get('fieldNonEditable');
      if (title) {
        const tt = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('p', title, {
          className: 'frmb-tt'
        });
        field.appendChild(tt);
        field.addEventListener('mousemove', e => move(e, {
          tt,
          field
        }));
      }
    });
  }
  classNames(field, previewData) {
    const className = field.querySelector('.fld-className');
    const styleField = field.querySelector('.btn-style');
    const style = styleField && styleField.value;
    if (!className) {
      return;
    }
    const {
      type
    } = previewData;
    const classes = className.multiple ? $(className).val() : className.value.trim().split(' ');
    const types = {
      button: 'btn',
      submit: 'btn'
    };
    const primaryType = types[type];
    if (primaryType && style) {
      for (let i = 0; i < classes.length; i++) {
        const re = new RegExp(`^${primaryType}-(?:` + _config__WEBPACK_IMPORTED_MODULE_5__.styles.btn.join('|') + ')$');
        const match = classes[i].match(re);
        if (match) {
          classes.splice(i, 1, primaryType + '-' + style);
        }
      }
      classes.push(primaryType + '-' + style);
      classes.push(primaryType);
    }
    const trimmedClassName = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.unique)(classes).join(' ').trim();
    className.value = trimmedClassName;
    return trimmedClassName;
  }
  closeConfirm(overlay, dialog) {
    if (!overlay) {
      overlay = document.getElementsByClassName('form-builder-overlay')[0];
    }
    overlay && (0,_dom__WEBPACK_IMPORTED_MODULE_1__.remove)(overlay);
    if (!dialog) {
      dialog = document.getElementsByClassName('form-builder-dialog')[0];
    }
    dialog && (0,_dom__WEBPACK_IMPORTED_MODULE_1__.remove)(dialog);
    document.removeEventListener('keydown', this.handleKeyDown, false);
    document.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_4__["default"].modalClosed);
  }
  handleKeyDown(e) {
    const keyCode = e.keyCode || e.which;
    if (keyCode === 27) {
      e.preventDefault();
      this.closeConfirm.call(this);
    }
  }
  showOverlay() {
    const overlay = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('div', null, {
      className: 'form-builder-overlay'
    });
    document.body.appendChild(overlay);
    overlay.classList.add('visible');
    overlay.addEventListener('click', _ref2 => {
      let {
        target
      } = _ref2;
      return this.closeConfirm(target);
    }, false);
    document.addEventListener('keydown', this.handleKeyDown, false);
    return overlay;
  }
  confirm(message, yesAction, coords, className) {
    if (coords === void 0) {
      coords = false;
    }
    if (className === void 0) {
      className = '';
    }
    const _this = this;
    const i18n = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().current);
    const overlay = _this.showOverlay();
    const yes = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('button', i18n.yes, {
      className: 'yes btn btn-success btn-sm'
    });
    const no = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('button', i18n.no, {
      className: 'no btn btn-danger btn-sm'
    });
    no.onclick = function () {
      _this.closeConfirm(overlay);
    };
    yes.onclick = function () {
      yesAction();
      _this.closeConfirm(overlay);
    };
    const btnWrap = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('div', [no, yes], {
      className: 'button-wrap'
    });
    className = 'form-builder-dialog ' + className;
    const miniModal = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('div', [message, btnWrap], {
      className
    });
    if (!coords) {
      const dE = document.documentElement;
      coords = {
        pageX: Math.max(dE.clientWidth, window.innerWidth || 0) / 2,
        pageY: Math.max(dE.clientHeight, window.innerHeight || 0) / 2
      };
      miniModal.style.position = 'fixed';
    } else {
      miniModal.classList.add('positioned');
    }
    miniModal.style.left = coords.pageX + 'px';
    miniModal.style.top = coords.pageY + 'px';
    document.body.appendChild(miniModal);
    yes.focus();
    return miniModal;
  }
  dialog(content, coords, className) {
    if (coords === void 0) {
      coords = false;
    }
    if (className === void 0) {
      className = '';
    }
    const _this = this;
    const clientWidth = document.documentElement.clientWidth;
    const clientHeight = document.documentElement.clientHeight;
    _this.showOverlay();
    className = 'form-builder-dialog ' + className;
    const miniModal = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('div', content, {
      className: className
    });
    if (!coords) {
      coords = {
        pageX: Math.max(clientWidth, window.innerWidth || 0) / 2,
        pageY: Math.max(clientHeight, window.innerHeight || 0) / 2
      };
      miniModal.style.position = 'fixed';
    } else {
      miniModal.classList.add('positioned');
    }
    miniModal.style.left = coords.pageX + 'px';
    miniModal.style.top = coords.pageY + 'px';
    document.body.appendChild(miniModal);
    document.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_4__["default"].modalOpened);
    if (className.indexOf('data-dialog') !== -1) {
      document.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_4__["default"].viewData);
    }
    return miniModal;
  }
  confirmRemoveAll(e) {
    const _this = this;
    const config = this.config;
    const formID = e.target.id.match(/frmb-\d{13}/)[0];
    const stage = document.getElementById(formID);
    const i18n = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().current);
    const fields = $('li.form-field', stage);
    const buttonPosition = e.target.getBoundingClientRect();
    const bodyRect = document.body.getBoundingClientRect();
    const coords = {
      pageX: buttonPosition.left + buttonPosition.width / 2,
      pageY: buttonPosition.top - bodyRect.top - 12
    };
    if (fields.length) {
      _this.confirm(i18n.clearAllMessage, () => {
        _this.removeAllFields.call(_this, stage);
        if (config.opts.persistDefaultFields && config.opts.defaultFields) {
          this.addDefaultFields();
        } else {
          config.opts.notify.success(i18n.allFieldsRemoved);
        }
        config.opts.onClearAll();
      }, coords);
    } else {
      _this.dialog(i18n.noFieldsToClear, coords);
    }
  }
  addDefaultFields() {
    this.config.opts.defaultFields.forEach(field => this.formBuilder.prepFieldVars(field));
    this.d.stage.classList.remove('empty');
  }
  removeAllFields(stage) {
    const i18n = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().current);
    const opts = this.config.opts;
    const fields = stage.querySelectorAll(this.formBuilder.fieldSelector);
    const markEmptyArray = [];
    if (!fields.length) {
      return;
    }
    if (opts.prepend) {
      markEmptyArray.push(true);
    }
    if (opts.append) {
      markEmptyArray.push(true);
    }
    if (!markEmptyArray.some(Boolean)) {
      stage.classList.add('empty');
      stage.dataset.content = i18n.getStarted;
    }
    this.emptyStage(stage);
  }
  emptyStage(stage) {
    (0,_dom__WEBPACK_IMPORTED_MODULE_1__.empty)(stage).classList.remove('removing');
    stage.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_4__["default"].stageEmptied);
    this.save();
  }
  stageIsEmpty() {
    return $(this.d.stage).find('li').length === 0;
  }
  setFieldOrder($cbUL) {
    if (!this.config.opts.sortableControls) {
      return false;
    }
    const JSON = window.JSON;
    const fieldOrder = [];
    $cbUL.children().each((index, element) => {
      const type = $(element).data('type');
      if (type) {
        fieldOrder.push(type);
      }
    });
    if (storage_available__WEBPACK_IMPORTED_MODULE_7___default()('sessionStorage')) {
      window.sessionStorage.setItem('fieldOrder', JSON.stringify(fieldOrder));
    }
    return fieldOrder;
  }
  closeAllEdit() {
    const _this = this;
    $(_this.d.stage).find('li.form-field').each((i, elem) => {
      this.closeField(elem.id, false);
    });
  }
  toggleEdit(fieldId, animate) {
    if (animate === void 0) {
      animate = true;
    }
    const field = document.getElementById(fieldId);
    if (!field) {
      return;
    }
    if ($(field).hasClass('editing')) {
      return this.closeField(fieldId, animate);
    } else {
      return this.openField(fieldId, animate);
    }
  }
  closeField(fieldId, animate) {
    if (animate === void 0) {
      animate = true;
    }
    const _this = this;
    const field = document.getElementById(fieldId);
    if (!field) {
      return field;
    }
    const $editPanel = $('.frm-holder', field);
    const $preview = $('.prev-holder', field);
    let currentlyEditing = false;
    if ($(field).hasClass('editing')) {
      currentlyEditing = true;
    }
    if (!currentlyEditing) {
      return field;
    }
    field.classList.toggle('editing');
    $('.toggle-form', field).toggleClass('open');
    if (animate) {
      $preview.slideToggle(250);
      $editPanel.slideToggle(250);
    } else {
      $preview.toggle();
      $editPanel.toggle();
    }
    this.updatePreview($(field));
    const liContainer = $(`#${fieldId}`);
    const rowContainer = $(`#${fieldId}-cont`);
    rowContainer.append(liContainer);
    this.removeContainerProtection(rowContainer.attr('id'));
    this.config.opts.onCloseFieldEdit($editPanel[0]);
    document.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_4__["default"].fieldEditClosed);
    const prevHolder = liContainer.find('.prev-holder');
    const resultsTimeout = setTimeout(() => {
      clearTimeout(resultsTimeout);
      const cleanResults = _this.tmpCleanPrevHolder(prevHolder);
      cleanResults.forEach(result => {
        if (result['columnInfo'].columnSize) {
          const currentClassRow = _this.getBootstrapColumnClass(rowContainer.attr('class'));
          if (currentClassRow !== result['columnInfo'].columnSize) {
            rowContainer.removeClass(currentClassRow).addClass(result['columnInfo'].columnSize);
            _this.tmpCleanPrevHolder(prevHolder);
          }
        }
      });
    }, 300);
    return field;
  }
  openField(fieldId, animate) {
    if (animate === void 0) {
      animate = true;
    }
    const field = document.getElementById(fieldId);
    if (!field) {
      return field;
    }
    const $editPanel = $('.frm-holder', field);
    const $preview = $('.prev-holder', field);
    let currentlyEditing = false;
    if ($(field).hasClass('editing')) {
      currentlyEditing = true;
    }
    if (currentlyEditing) {
      return field;
    }
    field.classList.toggle('editing');
    $('.toggle-form', field).toggleClass('open');
    if (animate) {
      $preview.slideToggle(250);
      $editPanel.slideToggle(250);
    } else {
      $preview.toggle();
      $editPanel.toggle();
    }
    this.updatePreview($(field));
    const liContainer = $(`#${fieldId}`);
    const colWrapper = $(`#${fieldId}-cont`);
    const rowWrapper = colWrapper.closest(this.formBuilder.rowWrapperClassSelector);
    this.formBuilder.preserveTempContainers.push(colWrapper.attr('id'));
    liContainer.insertAfter(rowWrapper);
    this.formBuilder.currentEditPanel = $editPanel[0];
    this.config.opts.onOpenFieldEdit($editPanel[0]);
    document.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_4__["default"].fieldEditOpened);
    $(document).trigger('fieldOpened', [{
      rowWrapperID: rowWrapper.attr('id')
    }]);
    return field;
  }
  getStyle(elem, property) {
    if (property === void 0) {
      property = false;
    }
    let style;
    if (window.getComputedStyle) {
      style = window.getComputedStyle(elem, null);
    } else if (elem.currentStyle) {
      style = elem.currentStyle;
    }
    return property ? style[property] : style;
  }
  showData() {
    const formData = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.escapeHtml)(this.getFormData(this.config.opts.dataType, true));
    const code = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('code', formData, {
      className: `formData-${this.config.opts.dataType}`
    });
    this.dialog((0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('pre', code), false, 'data-dialog');
  }
  removeField(fieldID, animationSpeed) {
    if (animationSpeed === void 0) {
      animationSpeed = 250;
    }
    let fieldRemoved = false;
    const _this = this;
    const form = this.d.stage;
    const fields = form.getElementsByClassName('form-field');
    if (!fields.length) {
      this.config.opts.notify.warning('No fields to remove');
      return false;
    }
    if (!fieldID) {
      const availableIds = [].slice.call(fields).map(field => {
        return field.id;
      });
      this.config.opts.notify.warning('fieldID required to remove specific fields.');
      this.config.opts.notify.warning('Removing last field since no ID was supplied.');
      this.config.opts.notify.warning('Available IDs: ' + availableIds.join(', '));
      fieldID = availableIds[availableIds.length - 1];
    }
    const field = document.getElementById(fieldID);
    if (!field) {
      this.config.opts.notify.warning('Field not found');
      return false;
    }
    const $field = $(field);
    const fieldRowWrapper = $field.closest(this.formBuilder.rowWrapperClassSelector);
    $field.slideUp(animationSpeed, function () {
      $field.removeClass('deleting');
      $field.remove();
      fieldRemoved = true;
      _this.save();
      if (!form.childNodes.length) {
        form.classList.add('empty');
        form.dataset.content = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().current).getStarted;
      }
    });
    const userEvents = Object.assign({}, this.config.opts.typeUserEvents['*'], this.config.opts.typeUserEvents[field.type]);
    if (userEvents && userEvents.onremove) {
      userEvents.onremove(field);
    }
    document.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_4__["default"].fieldRemoved);
    if (fieldRowWrapper.length) {
      this.removeContainerProtection(`${fieldID}-cont`);
      const timeout = setTimeout(() => {
        clearTimeout(timeout);
        $(document).trigger('checkRowCleanup', [{
          rowWrapperID: fieldRowWrapper.attr('id')
        }]);
      }, _config__WEBPACK_IMPORTED_MODULE_5__.defaultTimeout);
    }
    return fieldRemoved;
  }
  processActionButtons(buttonData) {
    const {
        label,
        events
      } = buttonData,
      attrs = _objectWithoutProperties(buttonData, _excluded2);
    let labelText = label;
    const data = this.data;
    if (!labelText) {
      if (attrs.id) {
        labelText = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().current)[attrs.id] || (0,_utils__WEBPACK_IMPORTED_MODULE_3__.capitalize)(attrs.id);
      } else {
        labelText = '';
      }
    } else {
      labelText = (mi18n__WEBPACK_IMPORTED_MODULE_0___default().current)[labelText] || labelText;
    }
    if (!attrs.id) {
      attrs.id = `${data.formID}-action-${Math.round(Math.random() * 1000)}`;
    } else {
      attrs.id = `${data.formID}-${attrs.id}-action`;
    }
    const button = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('button', labelText, attrs);
    if (events) {
      for (const event in events) {
        if (events.hasOwnProperty(event)) {
          button.addEventListener(event, evt => events[event](evt));
        }
      }
    }
    return button;
  }
  processSubtypes(subtypeOpts) {
    const disabledSubtypes = this.config.opts.disabledSubtypes;
    for (const fieldType in subtypeOpts) {
      if (subtypeOpts.hasOwnProperty(fieldType)) {
        _control__WEBPACK_IMPORTED_MODULE_6__["default"].register(subtypeOpts[fieldType], _control__WEBPACK_IMPORTED_MODULE_6__["default"].getClass(fieldType), fieldType);
      }
    }
    const registeredSubtypes = _control__WEBPACK_IMPORTED_MODULE_6__["default"].getRegisteredSubtypes();
    const subtypeDef = Object.entries(registeredSubtypes).reduce((acc, _ref3) => {
      let [key, val] = _ref3;
      acc[key] = disabledSubtypes[key] && (0,_utils__WEBPACK_IMPORTED_MODULE_3__.subtract)(disabledSubtypes[key], val) || val;
      return acc;
    }, {});
    const subtypes = {};
    for (const fieldType in subtypeDef) {
      if (subtypeDef.hasOwnProperty(fieldType)) {
        const formatted = [];
        for (const subtype of subtypeDef[fieldType]) {
          const controlClass = _control__WEBPACK_IMPORTED_MODULE_6__["default"].getClass(fieldType, subtype);
          const label = controlClass.mi18n(`subtype.${subtype}`) || controlClass.mi18n(subtype) || subtype;
          formatted.push({
            label,
            value: subtype
          });
        }
        subtypes[fieldType] = formatted;
      }
    }
    return subtypes;
  }
  editorUI(formID, controlPosition) {
    const d = this.d;
    const data = this.data;
    const id = formID || data.formID;
    const controlPositionClass = (controlPosition || '') === 'left' ? 'controls-left' : 'controls-right';
    d.editorWrap = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('div', null, {
      id: `${data.formID}-form-wrap`,
      className: `form-wrap form-builder formbuilder-embedded-bootstrap ${(0,_utils__WEBPACK_IMPORTED_MODULE_3__.mobileClass)()} ${controlPositionClass}`
    });
    d.stage = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('ul', null, {
      id,
      className: 'frmb stage-wrap'
    });
    d.controls = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('ul', null, {
      id: `${id}-control-box`,
      className: 'frmb-control'
    });
    const buttons = this.formActionButtons();
    d.formActions = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('div', buttons, {
      className: 'form-actions btn-group'
    });
  }
  formActionButtons() {
    const opts = this.config.opts;
    return opts.actionButtons.map(btnData => {
      if (btnData.id && opts.disabledActionButtons.indexOf(btnData.id) === -1) {
        return this.processActionButtons(btnData);
      }
    }).filter(Boolean);
  }
  processOptions(options) {
    const _this = this;
    const {
        actionButtons,
        replaceFields
      } = options,
      opts = _objectWithoutProperties(options, _excluded3);
    let fieldEditContainer = opts.fieldEditContainer;
    if (typeof opts.fieldEditContainer === 'string') {
      fieldEditContainer = document.querySelector(opts.fieldEditContainer);
    }
    const mergedActionButtons = [{
      type: 'button',
      id: 'clear',
      className: 'clear-all btn btn-danger',
      events: {
        click: _this.confirmRemoveAll.bind(_this)
      }
    }, {
      type: 'button',
      label: 'viewJSON',
      id: 'data',
      className: 'btn btn-default get-data',
      events: {
        click: _this.showData.bind(_this)
      }
    }, {
      type: 'button',
      id: 'save',
      className: 'btn btn-primary save-template',
      events: {
        click: evt => {
          _this.save();
          _this.config.opts.onSave(evt, _this.data.formData);
        }
      }
    }].concat(actionButtons);
    opts.fields = opts.fields.concat(replaceFields);
    opts.disableFields = opts.disableFields.concat(replaceFields.map(_ref4 => {
      let {
        type
      } = _ref4;
      return type && type;
    }));
    if (opts.dataType === 'xml') {
      opts.disableHTMLLabels = true;
    }
    _this.config.opts = Object.assign({}, {
      actionButtons: mergedActionButtons
    }, {
      fieldEditContainer
    }, opts);
    return _this.config.opts;
  }
  input(attrs) {
    if (attrs === void 0) {
      attrs = {};
    }
    return (0,_utils__WEBPACK_IMPORTED_MODULE_3__.markup)('input', null, attrs);
  }
  getFormData(type, formatted) {
    if (type === void 0) {
      type = 'js';
    }
    if (formatted === void 0) {
      formatted = false;
    }
    const h = this;
    const data = {
      js: () => h.prepData(h.d.stage),
      xml: () => h.xmlSave(h.d.stage),
      json: formatted => window.JSON.stringify(h.prepData(h.d.stage), null, formatted && '  ')
    };
    return data[type](formatted);
  }
  tmpCleanPrevHolder($prevHolder) {
    const _this = this;
    const cleanedFields = [];
    const formGroup = $prevHolder.find('.form-group');
    tmpCleanColumnInfo(formGroup);
    formGroup.find('*').each(function (i, field) {
      tmpCleanColumnInfo($(field));
    });
    function tmpCleanColumnInfo($field) {
      const classAttr = $field.attr('class');
      if (typeof classAttr !== 'undefined' && classAttr !== false) {
        const parseResult = _this.tryParseColumnInfo($field[0]);
        $field.attr('class', $field.attr('class').replace('__fb-tmp-col-', 'col-'));
        $field.attr('class', $field.attr('class').replace('__fb-tmp-row-', 'row-'));
        $field.attr('class', $field.attr('class').replace('col-', '__fb-tmp-col-'));
        $field.attr('class', $field.attr('class').replace('row-', '__fb-tmp-row-'));
        const result = {};
        result['field'] = $field;
        result['columnInfo'] = parseResult;
        cleanedFields.push(result);
      }
    }
    return cleanedFields;
  }
  tryParseColumnInfo(data) {
    const result = {};
    if (data.className) {
      const classes = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getAllGridRelatedClasses)(data.className);
      if (classes && classes.length > 0) {
        classes.forEach(element => {
          if (element.startsWith('row-')) {
            result['rowUniqueId'] = element.replace('row-', '').trim();
          } else {
            result['columnSize'] = element;
          }
        });
      }
    }
    return result;
  }
  removeContainerProtection(containerID) {
    const index = this.formBuilder.preserveTempContainers.indexOf(containerID);
    if (index !== -1) {
      this.formBuilder.preserveTempContainers.splice(index, 1);
    }
  }
  toggleHighlight(field, ms) {
    if (ms === void 0) {
      ms = 600;
    }
    field.addClass('moveHighlight');
    setTimeout(function () {
      field.removeClass('moveHighlight');
    }, ms);
  }
  showToast(msg, timeout) {
    if (timeout === void 0) {
      timeout = 3000;
    }
    if (this.toastTimer != null) {
      window.clearTimeout(this.toastTimer);
      this.toastTimer = null;
    }
    this.toastTimer = setTimeout(function () {
      $('.snackbar').removeClass('show');
    }, timeout);
    $('.snackbar').addClass('show').html(msg);
  }
  getDistanceBetweenPoints(x1, y1, x2, y2) {
    const y = x2 - x1;
    const x = y2 - y1;
    return Math.floor(Math.sqrt(x * x + y * y));
  }
  getRowClass(className) {
    if (className) {
      const splitClasses = className.split(' ').filter(x => x.startsWith('row-'));
      if (splitClasses && splitClasses.length > 0) {
        return splitClasses[0];
      }
    }
    return '';
  }
  getRowValue(className) {
    if (className) {
      const rowClass = this.getRowClass(className);
      if (rowClass) {
        return rowClass.split('-')[1];
      }
    }
    return '0';
  }
  changeRowClass(className, newValue) {
    const rowClass = this.getRowClass(className);
    return className.replace(rowClass, `row-${newValue}`);
  }
  getBootstrapColumnValue(className) {
    if (className) {
      const bootstrapClass = this.getBootstrapColumnClass(className);
      if (bootstrapClass) {
        return parseInt(bootstrapClass.split('-')[2]);
      }
    }
    return 0;
  }
  getBootstrapColumnPrefix(className) {
    if (className) {
      const bootstrapClass = this.getBootstrapColumnClass(className);
      if (bootstrapClass) {
        return `${bootstrapClass.split('-')[0]}-${bootstrapClass.split('-')[1]}`;
      }
    }
    return '';
  }
  getBootstrapColumnClass(className) {
    if (className) {
      const splitClasses = className.split(' ').filter(className => _utils__WEBPACK_IMPORTED_MODULE_3__.bootstrapColumnRegex.test(className));
      if (splitClasses && splitClasses.length > 0) {
        return splitClasses[0];
      }
    }
    return '';
  }
  changeBootstrapClass(className, newValue) {
    const boostrapClass = this.getBootstrapColumnClass(className);
    return className.replace(boostrapClass, `${this.getBootstrapColumnPrefix(className)}-${newValue}`);
  }
  syncBootstrapColumnWrapperAndClassProperty(fieldID, newValue) {
    const colWrapper = $(`#${fieldID}-cont`);
    colWrapper.attr('class', this.changeBootstrapClass(colWrapper.attr('class'), newValue));
    const inputClassElement = $(`#className-${fieldID}`);
    if (inputClassElement.val()) {
      inputClassElement.val(this.changeBootstrapClass(inputClassElement.val(), newValue));
    }
  }
}

/***/ }),

/***/ "../src/js/layout.js":
/*!***************************!*\
  !*** ../src/js/layout.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ layout; }
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "../src/js/utils.js");
/* harmony import */ var _control__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control */ "../src/js/control.js");



const processClassName = (data, field) => {
  let className = data.id ? `formbuilder-${data.type} form-group field-${data.id}` : '';
  if (data.className) {
    const classes = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getAllGridRelatedClasses)(data.className);
    if (classes && classes.length > 0) {
      className += ` ${classes.join(' ')}`;
      if (!Array.isArray(field)) {
        field = [field];
      }
      field.forEach(item => {
        if (item.classList) {
          item.classList.remove(...classes);
        }
        item.querySelectorAll('[class*=row-],[class*=col-]').forEach(element => {
          if (element.classList) {
            element.classList.remove(...classes);
          }
        });
      });
    }
  }
  return className;
};
class layout {
  constructor(templates, preview, disableHTMLLabels, controlConfig) {
    var _preview, _disableHTMLLabels, _controlConfig;
    if (preview === void 0) {
      preview = false;
    }
    if (disableHTMLLabels === void 0) {
      disableHTMLLabels = false;
    }
    if (controlConfig === void 0) {
      controlConfig = {};
    }
    this.preview = (_preview = preview) !== null && _preview !== void 0 ? _preview : false;
    this.disableHTMLLabels = (_disableHTMLLabels = disableHTMLLabels) !== null && _disableHTMLLabels !== void 0 ? _disableHTMLLabels : false;
    this.controlConfig = (_controlConfig = controlConfig) !== null && _controlConfig !== void 0 ? _controlConfig : {};
    this.templates = {
      label: null,
      help: null,
      default: (field, label, help, data) => {
        if (help) {
          label.appendChild(help);
        }
        return this.markup('div', [label, field], {
          className: processClassName(data, field)
        });
      },
      noLabel: (field, label, help, data) => {
        return this.markup('div', field, {
          className: processClassName(data, field)
        });
      },
      hidden: field => {
        return field;
      }
    };
    if (templates) {
      this.templates = jQuery.extend(this.templates, templates);
    }
    this.configure();
  }
  configure() {}
  build(renderControl, data, forceTemplate) {
    if (this.preview) {
      if (data.name) {
        data.name = data.name + '-preview';
      } else {
        data.name = _utils__WEBPACK_IMPORTED_MODULE_0__["default"].nameAttr(data) + '-preview';
      }
    }
    data.id = data.name;
    this.data = jQuery.extend({}, data);
    _control__WEBPACK_IMPORTED_MODULE_1__["default"].controlConfig = this.controlConfig;
    const controlInstance = new renderControl(data, this.preview);
    let field = controlInstance.build();
    if (typeof field !== 'object' || !field.field) {
      field = {
        field: field
      };
    }
    if (typeof field.field === 'string') {
      const tmpField = this.markup('div', field.field, {});
      if (tmpField.childElementCount === 1) {
        field.field = tmpField.children.item(0);
      } else {
        field.field = Array.from(tmpField.children);
      }
    }
    const label = this.label();
    const help = this.help();
    let elementTemplate;
    if (forceTemplate && this.isTemplate(forceTemplate)) {
      elementTemplate = forceTemplate;
    } else {
      elementTemplate = this.isTemplate(field.layout) ? field.layout : 'default';
    }
    const element = this.processTemplate(elementTemplate, field.field, label, help);
    controlInstance.on('prerender')(element);
    element.addEventListener('fieldRendered', controlInstance.on('render'));
    return element;
  }
  label() {
    const label = this.data.label || '';
    const labelText = this.disableHTMLLabels ? document.createTextNode(label) : _utils__WEBPACK_IMPORTED_MODULE_0__["default"].parsedHtml(label);
    const labelContents = [labelText];
    if (this.data.required) {
      labelContents.push(this.markup('span', '*', {
        className: 'formbuilder-required'
      }));
    }
    if (this.isTemplate('label')) {
      return this.processTemplate('label', labelContents);
    }
    return this.markup('label', labelContents, {
      for: this.data.id,
      className: `formbuilder-${this.data.type}-label`
    });
  }
  help() {
    if (!this.data.description) {
      return null;
    }
    if (this.isTemplate('help')) {
      return this.processTemplate('help', this.data.description);
    }
    return this.markup('span', '?', {
      className: 'tooltip-element',
      tooltip: this.data.description
    });
  }
  isTemplate(template) {
    return typeof this.templates[template] === 'function';
  }
  processTemplate(template) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    let processed = this.templates[template](...args, this.data);
    if (processed.jquery) {
      processed = processed[0];
    }
    return processed;
  }
  markup(tag, content, attributes) {
    if (content === void 0) {
      content = '';
    }
    if (attributes === void 0) {
      attributes = {};
    }
    return _utils__WEBPACK_IMPORTED_MODULE_0__["default"].markup(tag, content, attributes);
  }
}

/***/ }),

/***/ "../src/js/sanitizer.js":
/*!******************************!*\
  !*** ../src/js/sanitizer.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attributeWillClobber: function() { return /* binding */ attributeWillClobber; },
/* harmony export */   isPotentiallyDangerousAttribute: function() { return /* binding */ isPotentiallyDangerousAttribute; },
/* harmony export */   sanitizeNamedAttribute: function() { return /* binding */ sanitizeNamedAttribute; },
/* harmony export */   setElementContent: function() { return /* binding */ setElementContent; },
/* harmony export */   setSanitizerConfig: function() { return /* binding */ setSanitizerConfig; }
/* harmony export */ });
const sanitizerConfig = {
  clobberingProtection: {
    document: true,
    form: true,
    namespaceAttributes: false
  },
  backendOrder: ['dompurify', 'sanitizer', 'fallback'],
  backends: {
    sanitizer: typeof window['Sanitizer'] === 'function' ? new window.Sanitizer() : false,
    dompurify: window.DOMPurify ? (purify => {
      purify.setConfig({
        SANITIZE_DOM: false,
        ADD_ATTR: ['contenteditable']
      });
      return purify;
    })(window.DOMPurify) : false,
    fallback: content => content
  }
};
const setSanitizerConfig = config => {
  if (typeof config !== 'object') {
    throw 'Invalid value given to setSanitizerConfig, expected config object';
  }
  if (config.hasOwnProperty('clobberingProtection')) {
    ['document', 'form', 'namespaceAttributes'].forEach(type => {
      if (config.clobberingProtection.hasOwnProperty(type) && typeof config.clobberingProtection[type] === 'boolean') {
        sanitizerConfig.clobberingProtection[type] = config.clobberingProtection[type];
      }
    });
  }
  if (config.hasOwnProperty('backends')) {
    if (typeof config.backends === 'object') {
      Object.keys(config.backends).forEach(implementation => sanitizerConfig.backends[implementation] = config.backends[implementation]);
    } else {
      throw 'backends config expected to be an Object';
    }
  }
  if (config.hasOwnProperty('backendOrder')) {
    sanitizerConfig.backendOrder = [];
    if (Array.isArray(config.backendOrder)) {
      config.backendOrder.forEach(backend => {
        if (sanitizerConfig.backends.hasOwnProperty(backend)) {
          sanitizerConfig.backendOrder.push(backend);
        } else {
          throw 'unknown sanitizer backend ' + backend;
        }
      });
    } else {
      throw 'backendOrder config expected to be an Array of backend keys as strings';
    }
  }
};
const isPotentiallyDangerousAttribute = (attrName, attrValue) => {
  if (sanitizerConfig.backendOrder.length === 0) {
    return false;
  }
  const attrNameLc = attrName.toLowerCase();
  attrValue = attrValue ? attrValue + '' : '';
  return attrNameLc.startsWith('on') || ['form', 'formaction'].includes(attrNameLc) || attrValue.trim().toLowerCase().startsWith('javascript:');
};
function fallbackSanitizer(content) {
  const context = document.implementation.createHTMLDocument('');
  const base = context.createElement('base');
  base.href = document.location.href;
  context.head.appendChild(base);
  const exclude_tags = ['applet', 'comment', 'embed', 'iframe', 'link', 'listing', 'meta', 'noscript', 'object', 'plaintext', 'script', 'style', 'xmp'];
  const output = $.parseHTML(content, context, false);
  $(output).find('*').addBack().each((nindex, node) => {
    if (node.nodeName === '#text') {
      return;
    }
    if (node.tagName && exclude_tags.includes(node.tagName.toLowerCase())) {
      if (node.parentElement) {
        node.parentElement.removeChild(node);
      } else if (output.includes(node)) {
        output.splice(output.indexOf(node), 1);
      }
      return;
    }
    if (node.attributes) {
      Array.from(node.attributes).forEach(attribute => {
        if (isPotentiallyDangerousAttribute(attribute.name, attribute.value)) {
          $(node).removeAttr(attribute.name);
        }
      });
    }
  });
  const tmp = context.createElement('div');
  $(tmp).html(output);
  return tmp.innerHTML;
}
sanitizerConfig.backends.fallback = fallbackSanitizer;
const attributeWillClobber = value => {
  const check_doc = document;
  const check_form = document.createElement('form');
  return value in check_doc || value in check_form;
};
const sanitizeNamedAttribute = value => {
  const check_doc = sanitizerConfig.clobberingProtection.document ? document : false;
  const check_form = sanitizerConfig.clobberingProtection.form ? document.createElement('form') : false;
  if (check_doc && value in check_doc || check_form && value in check_form) {
    return sanitizerConfig.clobberingProtection.namespaceAttributes ? 'user-content-' + value : undefined;
  }
  return value;
};
const sanitizeDomClobbering = element => {
  $(element).find('*').each((nindex, node) => {
    const protectedTypes = ['id', 'name'];
    if (['embed', 'form', 'iframe', 'image', 'img', 'object'].includes(node.tagName.toLowerCase())) {
      node.removeAttribute('name');
    }
    protectedTypes.forEach(attrName => {
      if (node.hasAttribute(attrName)) {
        const value = sanitizeNamedAttribute(node.getAttribute(attrName));
        if (value === undefined) {
          node.removeAttribute(attrName);
        } else {
          node.setAttribute(attrName, value);
        }
      }
    });
  });
  return element;
};
const sanitizersCallbacks = {
  fallback: (element, content) => {
    const purifier = sanitizerConfig.backends.fallback;
    const supported = typeof purifier === 'function';
    if (supported) {
      content = purifier(content);
    }
    element.innerHTML = content;
    return supported;
  },
  dompurify: (element, content) => {
    const purifier = sanitizerConfig.backends.dompurify;
    if (purifier === false || !purifier.isSupported) {
      return false;
    }
    element.innerHTML = purifier.sanitize(content);
    return true;
  },
  sanitizer: (element, content) => {
    const sanitizer = sanitizerConfig.backends.sanitizer;
    if (sanitizer) {
      element.setHTML(content, {
        sanitizer: sanitizer
      });
      return true;
    }
    return false;
  }
};
const setElementContent = function (element, content, asText) {
  if (asText === void 0) {
    asText = false;
  }
  if (asText) {
    element.textContent = content;
  } else {
    const proxyElem = document.createElement(element.tagName);
    const performedBy = sanitizerConfig.backendOrder.find(type => sanitizersCallbacks[type](proxyElem, content));
    if (performedBy !== undefined) {
      sanitizeDomClobbering(proxyElem);
      element.innerHTML = proxyElem.innerHTML;
      return element;
    }
    element.innerHTML = content;
    return element;
  }
};
const sanitizer = {
  setElementContent,
  setSanitizerConfig,
  sanitizeNamedAttribute,
  isPotentiallyDangerousAttribute,
  attributeWillClobber
};
/* harmony default export */ __webpack_exports__["default"] = (sanitizer);

/***/ }),

/***/ "../src/js/utils.js":
/*!**************************!*\
  !*** ../src/js/utils.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addEventListeners: function() { return /* binding */ addEventListeners; },
/* harmony export */   attrString: function() { return /* binding */ attrString; },
/* harmony export */   bindEvents: function() { return /* binding */ bindEvents; },
/* harmony export */   bootstrapColumnRegex: function() { return /* binding */ bootstrapColumnRegex; },
/* harmony export */   camelCase: function() { return /* binding */ camelCase; },
/* harmony export */   capitalize: function() { return /* binding */ capitalize; },
/* harmony export */   closest: function() { return /* binding */ closest; },
/* harmony export */   escapeAttr: function() { return /* binding */ escapeAttr; },
/* harmony export */   escapeAttrs: function() { return /* binding */ escapeAttrs; },
/* harmony export */   escapeHtml: function() { return /* binding */ escapeHtml; },
/* harmony export */   firstNumberOrUndefined: function() { return /* binding */ firstNumberOrUndefined; },
/* harmony export */   flattenArray: function() { return /* binding */ flattenArray; },
/* harmony export */   forEach: function() { return /* binding */ forEach; },
/* harmony export */   forceNumber: function() { return /* binding */ forceNumber; },
/* harmony export */   generateSelectorClassNames: function() { return /* binding */ generateSelectorClassNames; },
/* harmony export */   getAllGridRelatedClasses: function() { return /* binding */ getAllGridRelatedClasses; },
/* harmony export */   getContentType: function() { return /* binding */ getContentType; },
/* harmony export */   getScripts: function() { return /* binding */ getScripts; },
/* harmony export */   getStyles: function() { return /* binding */ getStyles; },
/* harmony export */   hyphenCase: function() { return /* binding */ hyphenCase; },
/* harmony export */   insertStyle: function() { return /* binding */ insertStyle; },
/* harmony export */   isCached: function() { return /* binding */ isCached; },
/* harmony export */   markup: function() { return /* binding */ markup; },
/* harmony export */   merge: function() { return /* binding */ merge; },
/* harmony export */   mobileClass: function() { return /* binding */ mobileClass; },
/* harmony export */   nameAttr: function() { return /* binding */ nameAttr; },
/* harmony export */   parseXML: function() { return /* binding */ parseXML; },
/* harmony export */   parsedHtml: function() { return /* binding */ parsedHtml; },
/* harmony export */   removeFromArray: function() { return /* binding */ removeFromArray; },
/* harmony export */   removeStyle: function() { return /* binding */ removeStyle; },
/* harmony export */   safeAttr: function() { return /* binding */ safeAttr; },
/* harmony export */   safeAttrName: function() { return /* binding */ safeAttrName; },
/* harmony export */   safename: function() { return /* binding */ safename; },
/* harmony export */   subtract: function() { return /* binding */ subtract; },
/* harmony export */   titleCase: function() { return /* binding */ titleCase; },
/* harmony export */   trimObj: function() { return /* binding */ trimObj; },
/* harmony export */   unique: function() { return /* binding */ unique; },
/* harmony export */   validAttr: function() { return /* binding */ validAttr; },
/* harmony export */   xmlAttrString: function() { return /* binding */ xmlAttrString; },
/* harmony export */   xmlParseAttrs: function() { return /* binding */ xmlParseAttrs; },
/* harmony export */   xmlParseOptions: function() { return /* binding */ xmlParseOptions; },
/* harmony export */   xmlParseUserData: function() { return /* binding */ xmlParseUserData; }
/* harmony export */ });
/* harmony import */ var _sanitizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sanitizer */ "../src/js/sanitizer.js");
const _excluded = ["events"],
  _excluded2 = ["tag", "content"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

window.fbLoaded = {
  js: [],
  css: []
};
window.fbEditors = {
  quill: {},
  tinymce: {}
};
const trimObj = function (obj, removeFalse) {
  if (removeFalse === void 0) {
    removeFalse = false;
  }
  if (null == obj || typeof obj !== 'object') return obj;
  const attrs = typeof window.structuredClone === 'function' ? window.structuredClone(obj) : Object.assign({}, obj);
  const xmlRemove = [null, undefined, ''];
  if (removeFalse) {
    xmlRemove.push(false);
  }
  for (const attr in attrs) {
    if (xmlRemove.includes(attrs[attr])) {
      delete attrs[attr];
    } else if (Array.isArray(attrs[attr])) {
      if (!attrs[attr].length) {
        delete attrs[attr];
      }
    }
  }
  return attrs;
};
const validAttr = function (attr) {
  const invalid = ['values', 'enableOther', 'other', 'label', 'subtype'];
  return !invalid.includes(attr);
};
const xmlAttrString = attrs => Object.entries(attrs).map(_ref => {
  let [key, val] = _ref;
  return `${hyphenCase(key)}="${val}"`;
}).join(' ');
const attrString = attrs => Object.entries(attrs).map(_ref2 => {
  let [key, val] = _ref2;
  return validAttr(key) && Object.values(safeAttr(key, val)).join('');
}).filter(Boolean).join(' ');
const safeAttr = (name, value) => {
  name = safeAttrName(name);
  let valString;
  if (value) {
    if (Array.isArray(value)) {
      valString = escapeAttr(value.join(' '));
    } else {
      if (typeof value === 'boolean') {
        value = value.toString();
      }
      valString = escapeAttr(value.trim());
    }
  }
  value = value ? `="${valString}"` : '';
  return {
    name,
    value
  };
};
const flattenArray = arr => arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flattenArray(val) : val), []);
const safeAttrName = name => {
  const safeAttr = {
    className: 'class'
  };
  return safeAttr[name] || hyphenCase(name);
};
const hyphenCase = str => {
  str = str.replace(/[^\w\s\-]/gi, '');
  str = str.replace(/([A-Z])/g, function ($1) {
    return '-' + $1.toLowerCase();
  });
  return str.replace(/\s/g, '-').replace(/^-+/g, '');
};
const camelCase = str => str.replace(/-([a-z])/g, (m, w) => w.toUpperCase());
const bindEvents = (element, events) => {
  if (events) {
    for (const event in events) {
      if (events.hasOwnProperty(event)) {
        element.addEventListener(event, evt => events[event](evt));
      }
    }
  }
};
const nameAttr = function () {
  let lepoch;
  let counter = 0;
  return function (field) {
    const epoch = Date.now();
    if (epoch === lepoch) {
      ++counter;
    } else {
      counter = 0;
      lepoch = epoch;
    }
    const prefix = field.type || hyphenCase(field.label);
    return prefix + '-' + epoch + '-' + counter;
  };
}();
const getContentType = content => {
  if (content === undefined) {
    return content;
  }
  return [['array', content => Array.isArray(content)], ['node', content => content instanceof window.Node || content instanceof window.HTMLElement], ['component', () => content && content.dom], [typeof content, () => true]].find(typeCondition => typeCondition[1](content))[0];
};
const markup = function (tag, content, attributes) {
  if (content === void 0) {
    content = '';
  }
  if (attributes === void 0) {
    attributes = {};
  }
  let contentType = getContentType(content);
  const {
      events
    } = attributes,
    attrs = _objectWithoutProperties(attributes, _excluded);
  const field = document.createElement(tag);
  const appendContent = {
    string: content => {
      (0,_sanitizer__WEBPACK_IMPORTED_MODULE_0__.setElementContent)(field, field.innerHTML + content);
    },
    object: config => {
      const {
          tag,
          content
        } = config,
        data = _objectWithoutProperties(config, _excluded2);
      return field.appendChild(markup(tag, content, data));
    },
    node: content => {
      return field.appendChild(content);
    },
    array: content => {
      for (let i = 0; i < content.length; i++) {
        contentType = getContentType(content[i]);
        appendContent[contentType](content[i]);
      }
    },
    function: content => {
      content = content();
      contentType = getContentType(content);
      appendContent[contentType](content);
    },
    undefined: () => {}
  };
  for (const attr in attrs) {
    if (attrs.hasOwnProperty(attr)) {
      const name = safeAttrName(attr);
      let attrVal = Array.isArray(attrs[attr]) ? unique(attrs[attr].join(' ').split(' ')).join(' ') : attrs[attr];
      if ((0,_sanitizer__WEBPACK_IMPORTED_MODULE_0__.isPotentiallyDangerousAttribute)(name, attrVal)) {
        continue;
      }
      if (typeof attrVal === 'boolean') {
        if (attrVal === true) {
          const val = name === 'contenteditable' ? true : name;
          field.setAttribute(name, val);
        }
      } else {
        if (name === 'id' || name === 'name') {
          attrVal = (0,_sanitizer__WEBPACK_IMPORTED_MODULE_0__.sanitizeNamedAttribute)(attrVal);
        }
        if (attrVal !== undefined) {
          field.setAttribute(name, attrVal);
        }
      }
    }
  }
  if (content) {
    appendContent[contentType](content);
  }
  bindEvents(field, events);
  return field;
};
const xmlParseAttrs = elem => {
  const attrs = elem.attributes;
  const data = {};
  forEach(attrs, attr => {
    let attrVal = attrs[attr].value || '';
    if (attrVal.match(/false|true/g)) {
      attrVal = attrVal === 'true';
    } else if (attrVal.match(/undefined/g)) {
      attrVal = undefined;
    }
    if (attrVal) {
      data[camelCase(attrs[attr].name)] = attrVal;
    }
  });
  return data;
};
const xmlParseOptions = options => {
  const data = [];
  for (let i = 0; i < options.length; i++) {
    const optionData = _objectSpread(_objectSpread({}, xmlParseAttrs(options[i])), {}, {
      label: options[i].textContent
    });
    data.push(optionData);
  }
  return data;
};
const xmlParseUserData = userData => {
  const data = [];
  if (userData.length) {
    const values = userData[0].getElementsByTagName('value');
    for (let i = 0; i < values.length; i++) {
      data.push(values[i].textContent);
    }
  }
  return data;
};
const parseXML = xmlString => {
  const parser = new window.DOMParser();
  const xml = parser.parseFromString(xmlString, 'text/xml');
  const formData = [];
  if (xml) {
    const fields = xml.getElementsByTagName('field');
    for (let i = 0; i < fields.length; i++) {
      const fieldData = xmlParseAttrs(fields[i]);
      const options = fields[i].getElementsByTagName('option');
      const userData = fields[i].getElementsByTagName('userData');
      if (options && options.length) {
        fieldData.values = xmlParseOptions(options);
      }
      if (userData && userData.length) {
        fieldData.userData = xmlParseUserData(userData);
      }
      formData.push(fieldData);
    }
  }
  return formData;
};
const parsedHtml = html => {
  const escapeElement = document.createElement('textarea');
  escapeElement.innerHTML = html;
  return escapeElement.textContent;
};
const escapeHtml = html => {
  const escapeElement = document.createElement('textarea');
  escapeElement.textContent = html;
  return escapeElement.innerHTML;
};
const escapeAttr = str => {
  const match = {
    '"': '&quot;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
  };
  const replaceTag = tag => match[tag] || tag;
  return typeof str === 'string' ? str.replace(/["&<>]/g, replaceTag) : str;
};
const escapeAttrs = attrs => {
  for (const attr in attrs) {
    if (attrs.hasOwnProperty(attr)) {
      attrs[attr] = escapeAttr(attrs[attr]);
    }
  }
  return attrs;
};
const forEach = function (array, callback, scope) {
  for (let i = 0; i < array.length; i++) {
    callback.call(scope, i, array[i]);
  }
};
const unique = array => {
  return array.filter((elem, pos, arr) => arr.indexOf(elem) === pos);
};
const removeFromArray = (val, arr) => {
  const index = arr.indexOf(val);
  if (index > -1) {
    arr.splice(index, 1);
  }
};
const getScripts = function (scriptScr, path) {
  if (path === void 0) {
    path = '';
  }
  const $ = jQuery;
  let _arr = [];
  if (!Array.isArray(scriptScr)) {
    scriptScr = [scriptScr];
  }
  if (!isCached(scriptScr)) {
    _arr = jQuery.map(scriptScr, src => {
      const options = {
        dataType: 'script',
        cache: true,
        url: (path || '') + src
      };
      return jQuery.ajax(options).done(() => window.fbLoaded.js.push(src));
    });
  }
  _arr.push(jQuery.Deferred(deferred => $(deferred.resolve)));
  return jQuery.when(..._arr);
};
const isCached = function (src, type) {
  if (type === void 0) {
    type = 'js';
  }
  const cache = window.fbLoaded[type];
  return Array.isArray(src) ? src.every(s => cache.includes(s)) : cache.includes(src);
};
const getStyles = function (scriptScr, path) {
  if (path === void 0) {
    path = '';
  }
  if (!Array.isArray(scriptScr)) {
    scriptScr = [scriptScr];
  }
  scriptScr.forEach(src => {
    let type = 'href';
    let key = src;
    let id = '';
    if (typeof src == 'object') {
      type = src.type || (src.style ? 'inline' : 'href');
      id = src.id;
      key = id || src.href || src.style;
      src = type === 'inline' ? src.style : src.href;
    }
    if (isCached(key, 'css')) {
      return;
    }
    if (type === 'href') {
      const link = document.createElement('link');
      link.type = 'text/css';
      link.rel = 'stylesheet';
      link.href = (path || '') + src;
      document.head.appendChild(link);
    } else {
      $(`<style type="text/css">${src}</style>`).attr('id', id).appendTo($(document.head));
    }
    window.fbLoaded.css.push(key);
  });
};
const capitalize = str => {
  return str.replace(/\b\w/g, function (m) {
    return m.toUpperCase();
  });
};
const merge = (obj1, obj2) => {
  const mergedObj = Object.assign({}, obj1, obj2);
  for (const prop in obj2) {
    if (mergedObj.hasOwnProperty(prop)) {
      if (Array.isArray(obj2[prop])) {
        mergedObj[prop] = Array.isArray(obj1[prop]) ? unique(obj1[prop].concat(obj2[prop])) : obj2[prop];
      } else if (typeof obj2[prop] === 'object') {
        mergedObj[prop] = merge(obj1[prop], obj2[prop]);
      } else {
        mergedObj[prop] = obj2[prop];
      }
    }
  }
  return mergedObj;
};
const addEventListeners = (el, evts, cb) => evts.split(' ').forEach(e => el.addEventListener(e, cb, false));
const closest = (el, cls) => {
  const className = cls.replace('.', '');
  while ((el = el.parentElement) && !el.classList.contains(className));
  return el;
};
const mobileClass = () => {
  let mobileClass = '';
  (a => {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)) {
      mobileClass = 'formbuilder-mobile';
    }
  })(navigator.userAgent || navigator.vendor || window.opera);
  return mobileClass;
};
const safename = str => {
  return str.replace(/\s/g, '-').replace(/[^a-zA-Z0-9[\]_-]/g, '');
};
const forceNumber = str => str.replace(/[^0-9]/g, '');
const subtract = (arr, from) => {
  return from.filter(function (a) {
    return !~this.indexOf(a);
  }, arr);
};
const insertStyle = srcs => {
  srcs = Array.isArray(srcs) ? srcs : [srcs];
  const promises = srcs.map(_ref3 => {
    let {
      src,
      id
    } = _ref3;
    return new Promise(resolve => {
      if (window.fbLoaded.css.includes(src)) {
        return resolve(src);
      }
      const formeoStyle = markup('link', null, {
        href: src,
        rel: 'stylesheet',
        id
      });
      document.head.insertBefore(formeoStyle, document.head.firstChild);
    });
  });
  return Promise.all(promises);
};
const removeStyle = id => {
  const elem = document.getElementById(id);
  return elem.parentElement.removeChild(elem);
};
const bootstrapColumnRegex = /^col-(xs|sm|md|lg)-([^\s]+)/;
const getAllGridRelatedClasses = className => {
  return typeof className === 'string' ? className.split(' ').filter(x => bootstrapColumnRegex.test(x) || x.startsWith('row-')) : [];
};
function titleCase(str) {
  const lowers = ['a', 'an', 'and', 'as', 'at', 'but', 'by', 'for', 'for', 'from', 'in', 'into', 'near', 'nor', 'of', 'on', 'onto', 'or', 'the', 'to', 'with'].map(lower => `\\s${lower}\\s`);
  const regex = new RegExp(`(?!${lowers.join('|')})\\w\\S*`, 'g');
  return `${str}`.replace(regex, txt => txt.charAt(0).toUpperCase() + txt.slice(1).replace(/[A-Z]/g, word => ` ${word}`));
}
function firstNumberOrUndefined() {
  for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
    options[_key] = arguments[_key];
  }
  return options.find(x => typeof x === 'number');
}
const utils = {
  addEventListeners,
  attrString,
  camelCase,
  capitalize,
  closest,
  getContentType,
  escapeAttr,
  escapeAttrs,
  escapeHtml,
  forceNumber,
  forEach,
  getScripts,
  getStyles,
  hyphenCase,
  isCached,
  markup,
  merge,
  mobileClass,
  nameAttr,
  parsedHtml,
  parseXML,
  removeFromArray,
  safeAttr,
  safeAttrName,
  safename,
  subtract,
  trimObj,
  unique,
  validAttr,
  titleCase,
  firstNumberOrUndefined
};
utils.splitObject = (obj, keys) => {
  const reconstructObj = initialObj => (result, key) => {
    result[key] = initialObj[key];
    return result;
  };
  const kept = Object.keys(obj).filter(key => keys.includes(key)).reduce(reconstructObj(obj), {});
  const rest = Object.keys(obj).filter(key => !keys.includes(key)).reduce(reconstructObj(obj), {});
  return [kept, rest];
};
$.fn.swapWith = function (that) {
  const $this = this;
  const $that = $(that);
  const $temp = $('<div>');
  $this.before($temp);
  $that.before($this);
  $temp.before($that).remove();
  return $this;
};
const generateSelectorClassNames = classNamesObj => Object.entries(classNamesObj).reduce((acc, _ref4) => {
  let [key, val] = _ref4;
  return _objectSpread(_objectSpread({}, acc), {}, {
    [`${key}Selector`]: `.${val}`
  });
}, {});
/* harmony default export */ __webpack_exports__["default"] = (utils);

/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[3]!../src/sass/form-builder.scss":
/*!***************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[3]!../src/sass/form-builder.scss ***!
  \***************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "../node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/getUrl.js */ "../node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! data:font/woff;base64, */ "data:font/woff;base64,"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! data:image/svg+xml; utf8, <svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-list-nested%27 viewBox=%270 0 16 16%27><path fill-rule=%27evenodd%27 d=%27M4.5 11.5A.5.5 0 0 1 5 11h10a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 1 3h10a.5.5 0 0 1 0 1H1a.5.5 0 0 1-.5-.5z%27/></svg> */ "data:image/svg+xml; utf8, <svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-list-nested%27 viewBox=%270 0 16 16%27><path fill-rule=%27evenodd%27 d=%27M4.5 11.5A.5.5 0 0 1 5 11h10a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 1 3h10a.5.5 0 0 1 0 1H1a.5.5 0 0 1-.5-.5z%27/></svg>"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! data:image/svg+xml; utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-plus-circle%27 viewBox=%270 0 16 16%27><path d=%27M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z%27/><path d=%27M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z%27/></svg> */ "data:image/svg+xml; utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-plus-circle%27 viewBox=%270 0 16 16%27><path d=%27M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z%27/><path d=%27M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z%27/></svg>"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "@charset \"UTF-8\";\n@font-face {\n  font-family: \"formbuilder-icons\";\n  src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format(\"woff\");\n}\n/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */\n/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */\n/*\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n  @font-face {\n    font-family: 'formbuilder-icons';\n    src: url('../font/formbuilder-icons.svg?4142374#formbuilder-icons') format('svg');\n  }\n}\n*/\n[class^=formbuilder-icon-]:before,\n[class*=\" formbuilder-icon-\"]:before {\n  font-family: \"formbuilder-icons\";\n  font-style: normal;\n  font-weight: normal;\n  speak: never;\n  display: inline-block;\n  text-decoration: inherit;\n  width: 1em;\n  margin-right: 0.2em;\n  text-align: center;\n  /* opacity: .8; */\n  /* For safety - reset parent styles, that can break glyph codes*/\n  font-variant: normal;\n  text-transform: none;\n  /* fix buttons height, for twitter bootstrap */\n  line-height: 1em;\n  /* Animation center compensation - margins should be symmetric */\n  /* remove if not needed */\n  margin-left: 0.2em;\n  /* you can be more comfortable with increased icons size */\n  /* font-size: 120%; */\n  /* Uncomment for 3D effect */\n  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */\n}\n\n.formbuilder-icon-autocomplete:before {\n  content: \"\\e800\";\n} /* '' */\n.formbuilder-icon-date:before {\n  content: \"\\e801\";\n} /* '' */\n.formbuilder-icon-checkbox:before {\n  content: \"\\e802\";\n} /* '' */\n.formbuilder-icon-checkbox-group:before {\n  content: \"\\e803\";\n} /* '' */\n.formbuilder-icon-radio-group:before {\n  content: \"\\e804\";\n} /* '' */\n.formbuilder-icon-rich-text:before {\n  content: \"\\e805\";\n} /* '' */\n.formbuilder-icon-select:before {\n  content: \"\\e806\";\n} /* '' */\n.formbuilder-icon-textarea:before {\n  content: \"\\e807\";\n} /* '' */\n.formbuilder-icon-text:before {\n  content: \"\\e808\";\n} /* '' */\n.formbuilder-icon-pencil:before {\n  content: \"\\e809\";\n} /* '' */\n.formbuilder-icon-file:before {\n  content: \"\\e80a\";\n} /* '' */\n.formbuilder-icon-hidden:before {\n  content: \"\\e80b\";\n} /* '' */\n.formbuilder-icon-cancel:before {\n  content: \"\\e80c\";\n} /* '' */\n.formbuilder-icon-button:before {\n  content: \"\\e80d\";\n} /* '' */\n.formbuilder-icon-header:before {\n  content: \"\\e80f\";\n} /* '' */\n.formbuilder-icon-paragraph:before {\n  content: \"\\e810\";\n} /* '' */\n.formbuilder-icon-number:before {\n  content: \"\\e811\";\n} /* '' */\n.formbuilder-icon-copy:before {\n  content: \"\\f24d\";\n} /* '' */\n.formbuilder-icon-grid:before {\n  content: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ");\n}\n\n.formbuilder-icon-plus:before {\n  content: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ");\n}\n\n.formbuilder-icon-sort-lower:before {\n  content: \"\\f175\";\n}\n\n.formbuilder-icon-sort-higher:before {\n  content: \"\\f176\";\n}\n\n/*\n  Mixins\n*/\n.form-wrap.form-builder {\n  /*\n    Animations\n  */\n  /*   ------------   Toast Message   ------------   */\n  /*   ------------   END TOOLTIP   ------------   */\n  position: relative;\n  display: flex;\n  flex-direction: row;\n}\n.form-wrap.form-builder * {\n  box-sizing: border-box;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap button,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap input,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap select,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap textarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap input {\n  line-height: normal;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap textarea {\n  overflow: auto;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap button,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap input,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap select,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap textarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group > .btn {\n  position: relative;\n  float: left;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n  border-radius: 0;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .btn + .btn,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .btn + .btn-group,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .btn-group + .btn,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .btn-group + .btn-group {\n  margin-left: -1px;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group > .btn:last-child:not(:first-child),\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group > .dropdown-toggle:not(:first-child),\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .input-group .form-control:last-child,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .input-group-addon:last-child,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .input-group-btn:first-child > .btn-group:not(:first-child) > .btn,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .input-group-btn:first-child > .btn:not(:first-child),\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .input-group-btn:last-child > .btn,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .input-group-btn:last-child > .btn-group > .btn,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group .input-group-btn:last-child > .dropdown-toggle {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group > .btn.active,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group > .btn:active,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group > .btn:focus,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn-group > .btn:hover {\n  z-index: 2;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn {\n  display: inline-block;\n  padding: 6px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 1.42857143;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  touch-action: manipulation;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  background-image: none;\n  border-radius: 4px;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn.btn-lg {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn.btn-sm {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn.btn-xs {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn.active, .form-wrap.form-builder.formbuilder-embedded-bootstrap .btn.btn-active, .form-wrap.form-builder.formbuilder-embedded-bootstrap .btn:active {\n  background-image: none;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group .form-control:last-child,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-addon:last-child,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-btn:first-child > .btn-group:not(:first-child) > .btn,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-btn:first-child > .btn:not(:first-child),\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-btn:last-child > .btn,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-btn:last-child > .btn-group > .btn,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-btn:last-child > .dropdown-toggle {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group .form-control,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-addon,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-btn {\n  display: table-cell;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-lg > .form-control,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-lg > .input-group-addon,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .input-group .form-control {\n  position: relative;\n  z-index: 2;\n  float: left;\n  width: 100%;\n  margin-bottom: 0;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .form-control,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap output {\n  font-size: 14px;\n  line-height: 1.42857143;\n  display: block;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap textarea.form-control {\n  height: auto;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .form-control {\n  height: 34px;\n  display: block;\n  width: 100%;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  border-radius: 4px;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .form-control:focus {\n  outline: 0;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .form-group {\n  margin-left: 0px;\n  margin-bottom: 15px;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .btn,\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .form-control {\n  background-image: none;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .pull-right {\n  float: right;\n}\n.form-wrap.form-builder.formbuilder-embedded-bootstrap .pull-left {\n  float: left;\n}\n.form-wrap.form-builder .formbuilder-required,\n.form-wrap.form-builder .required-asterisk {\n  color: #c10000;\n}\n.form-wrap.form-builder .formbuilder-checkbox-group input[type=checkbox],\n.form-wrap.form-builder .formbuilder-checkbox-group input[type=radio],\n.form-wrap.form-builder .formbuilder-radio-group input[type=checkbox],\n.form-wrap.form-builder .formbuilder-radio-group input[type=radio] {\n  margin: 0 4px 0 0;\n}\n.form-wrap.form-builder .formbuilder-checkbox-inline,\n.form-wrap.form-builder .formbuilder-radio-inline {\n  margin-right: 8px;\n  display: inline-block;\n  vertical-align: middle;\n  padding-left: 0;\n}\n.form-wrap.form-builder .formbuilder-checkbox-inline label input[type=text],\n.form-wrap.form-builder .formbuilder-radio-inline label input[type=text] {\n  margin-top: 0;\n}\n.form-wrap.form-builder .formbuilder-checkbox-inline:first-child,\n.form-wrap.form-builder .formbuilder-radio-inline:first-child {\n  padding-left: 0;\n}\n.form-wrap.form-builder .formbuilder-autocomplete-list {\n  background-color: #fff;\n  display: none;\n  list-style: none;\n  padding: 0;\n  border: 1px solid #ccc;\n  border-width: 0 1px 1px;\n  position: absolute;\n  z-index: 20;\n  max-height: 200px;\n  overflow-y: auto;\n}\n.form-wrap.form-builder .formbuilder-autocomplete-list li {\n  display: none;\n  cursor: default;\n  padding: 5px;\n  margin: 0;\n  transition: background-color 200ms ease-in-out;\n}\n.form-wrap.form-builder .formbuilder-autocomplete-list li:hover, .form-wrap.form-builder .formbuilder-autocomplete-list li.active-option {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n@keyframes PLACEHOLDER {\n  0% {\n    height: 1px;\n  }\n  100% {\n    height: 15px;\n  }\n}\n.form-wrap.form-builder .cb-wrap {\n  width: 26%;\n  max-width: -moz-fit-content;\n  max-width: fit-content;\n  transition: transform 250ms;\n  /* smartphones, Android phones, landscape iPhone */\n}\n.form-wrap.form-builder .cb-wrap.sticky-controls {\n  position: sticky;\n  align-self: flex-start;\n  top: 0;\n}\n.form-wrap.form-builder .cb-wrap h4 {\n  margin-top: 0;\n  color: #666;\n}\n@media (max-width: 481px) {\n  .form-wrap.form-builder .cb-wrap {\n    width: 64px;\n  }\n  .form-wrap.form-builder .cb-wrap h4 {\n    display: none;\n  }\n}\n.form-wrap.form-builder .cb-wrap .form-actions {\n  float: right;\n  margin-top: 5px;\n}\n.form-wrap.form-builder .cb-wrap .form-actions button {\n  border: 0 none;\n}\n.form-wrap.form-builder .frmb-control {\n  margin: 0;\n  padding: 0;\n  border-radius: 5px;\n}\n.form-wrap.form-builder .frmb-control li {\n  cursor: move;\n  list-style: none;\n  margin: 0 0 -1px 0;\n  padding: 10px;\n  text-align: left;\n  background: #fff;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  box-shadow: inset 0 0 0 1px #c5c5c5;\n  /* smartphones, Android phones, landscape iPhone */\n}\n.form-wrap.form-builder .frmb-control li .control-icon {\n  width: 16px;\n  height: auto;\n  margin-right: 10px;\n  margin-left: 0.2em;\n  display: inline-block;\n}\n.form-wrap.form-builder .frmb-control li .control-icon img,\n.form-wrap.form-builder .frmb-control li .control-icon svg {\n  max-width: 100%;\n  height: auto;\n}\n.form-wrap.form-builder .frmb-control li:first-child {\n  border-radius: 5px 5px 0 0;\n  margin-top: 0;\n}\n.form-wrap.form-builder .frmb-control li:last-child {\n  border-radius: 0 0 5px 5px;\n}\n.form-wrap.form-builder .frmb-control li::before {\n  margin-right: 10px;\n  font-size: 16px;\n}\n.form-wrap.form-builder .frmb-control li:hover {\n  background-color: #f2f2f2;\n}\n.form-wrap.form-builder .frmb-control li.ui-sortable-helper {\n  border-radius: 5px;\n  transition: box-shadow 250ms;\n  box-shadow: 2px 2px 6px 0 #666;\n  border: 1px solid #fff;\n}\n.form-wrap.form-builder .frmb-control li.ui-state-highlight {\n  width: 0;\n  overflow: hidden;\n  padding: 0;\n  margin: 0;\n  border: 0 none;\n}\n.form-wrap.form-builder .frmb-control li.moving {\n  opacity: 0.6;\n}\n.form-wrap.form-builder .frmb-control li.formbuilder-separator {\n  background-color: transparent;\n  box-shadow: none;\n  padding: 0;\n  cursor: default;\n}\n.form-wrap.form-builder .frmb-control li.formbuilder-separator hr {\n  margin: 10px 0;\n}\n@media (max-width: 481px) {\n  .form-wrap.form-builder .frmb-control li::before {\n    font-size: 30px;\n  }\n  .form-wrap.form-builder .frmb-control li {\n    text-overflow: clip;\n  }\n  .form-wrap.form-builder .frmb-control li span {\n    visibility: hidden;\n  }\n  .form-wrap.form-builder .frmb-control li span span {\n    visibility: visible;\n    font-size: 30px;\n    width: auto !important;\n  }\n}\n.form-wrap.form-builder .frmb-control.sort-enabled li.ui-state-highlight {\n  box-shadow: none;\n  height: 0;\n  width: 100%;\n  background: radial-gradient(ellipse at center, rgb(84, 84, 84) 0%, rgba(0, 0, 0, 0) 75%);\n  border: 0 none;\n  -webkit-clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n          clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n  visibility: visible;\n  overflow: hidden;\n  margin: 1px 0 3px;\n  animation: PLACEHOLDER 250ms forwards;\n}\n.controls-left.form-wrap.form-builder .form-actions {\n  float: left;\n}\n\n.formbuilder-mobile.form-wrap.form-builder .form-actions {\n  width: 100%;\n}\n.formbuilder-mobile.form-wrap.form-builder .form-actions button {\n  width: 100%;\n  font-size: 0.85em !important;\n  display: block !important;\n  border-radius: 0 !important;\n  margin-top: -1px;\n  margin-left: 0 !important;\n}\n.formbuilder-mobile.form-wrap.form-builder .form-actions button:first-child {\n  border-radius: 5px 5px 0 0 !important;\n  margin-top: 0 !important;\n  border-bottom: 0 none;\n}\n.formbuilder-mobile.form-wrap.form-builder .form-actions button:last-child {\n  border-radius: 0 0 5px 5px !important;\n}\n\n.form-wrap.form-builder .stage-wrap {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  padding: 0;\n  margin: 0;\n  width: calc(74% - 5px);\n  /* smartphones, Android phones, landscape iPhone */\n}\n@media (max-width: 481px) {\n  .form-wrap.form-builder .stage-wrap {\n    width: calc(100% - 64px);\n  }\n}\n.form-wrap.form-builder .stage-wrap.empty {\n  border: 3px dashed #ccc;\n  background-color: rgba(255, 255, 255, 0.25);\n}\n.form-wrap.form-builder .stage-wrap.empty::after {\n  content: attr(data-content);\n  position: absolute;\n  text-align: center;\n  top: 50%;\n  left: 0;\n  width: 100%;\n  margin-top: -1em;\n}\n.form-wrap.form-builder .frmb {\n  list-style-type: none;\n  min-height: 200px;\n  transition: background-color 500ms ease-in-out;\n}\n.form-wrap.form-builder .frmb .formbuilder-required {\n  color: #c10000;\n}\n.form-wrap.form-builder .frmb.removing {\n  overflow: hidden;\n}\n.form-wrap.form-builder .frmb li.form-field:hover {\n  border-color: #66afe9;\n  outline: 0;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1), 0 0 8px rgba(102, 175, 233, 0.6);\n}\n.form-wrap.form-builder .frmb li.form-field:hover .field-actions {\n  opacity: 1;\n}\n.form-wrap.form-builder .frmb li.form-field:hover li :hover {\n  background: #fefefe;\n}\n.form-wrap.form-builder .frmb li.form-field {\n  position: relative;\n  padding: 6px;\n  clear: both;\n  margin-left: 0;\n  margin-bottom: 3px;\n  background-color: #fff;\n  transition: background-color 250ms ease-in-out, margin-top 400ms;\n}\n.form-wrap.form-builder .frmb li.form-field.hidden-field {\n  background-color: rgba(255, 255, 255, 0.6);\n}\n.form-wrap.form-builder .frmb li.form-field:first-child {\n  border-top-right-radius: 5px;\n  border-top-left-radius: 5px;\n}\n.form-wrap.form-builder .frmb li.form-field:first-child .field-actions .btn:last-child {\n  border-radius: 0 5px 0 0;\n}\n.form-wrap.form-builder .frmb li.form-field:last-child {\n  border-bottom-right-radius: 5px;\n  border-bottom-left-radius: 5px;\n}\n.form-wrap.form-builder .frmb li.form-field.no-fields label {\n  font-weight: 400;\n}\n@keyframes PLACEHOLDER {\n  0% {\n    height: 0;\n  }\n  100% {\n    height: 15px;\n  }\n}\n.form-wrap.form-builder .frmb li.form-field.frmb-placeholder, .form-wrap.form-builder .frmb li.form-field.ui-state-highlight {\n  height: 0;\n  padding: 0;\n  background: radial-gradient(ellipse at center, rgb(84, 84, 84) 0%, rgba(0, 0, 0, 0) 75%);\n  border: 0 none;\n  -webkit-clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n          clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n  visibility: visible;\n  overflow: hidden;\n  margin-bottom: 3px;\n  animation: PLACEHOLDER 250ms forwards;\n}\n.form-wrap.form-builder .frmb li.form-field.moving, .form-wrap.form-builder .frmb li.form-field.ui-sortable-helper {\n  transition: box-shadow 500ms ease-in-out;\n  box-shadow: 2px 2px 6px 0 #666;\n  border: 1px solid #fff;\n  border-radius: 5px;\n}\n.form-wrap.form-builder .frmb li.form-field.disabled-field {\n  z-index: 1;\n  position: relative;\n  overflow: visible;\n}\n.form-wrap.form-builder .frmb li.form-field.disabled-field:hover .frmb-tt {\n  display: inline-block;\n}\n.form-wrap.form-builder .frmb li.form-field.disabled-field [type=checkbox] {\n  float: left;\n  margin-right: 10px;\n}\n.form-wrap.form-builder .frmb li.form-field.disabled-field h2 {\n  border-bottom: 0 none;\n}\n.form-wrap.form-builder .frmb li.form-field.disabled-field label {\n  font-size: 12px;\n  font-weight: 400;\n  color: #666;\n}\n.form-wrap.form-builder .frmb li.form-field.disabled-field .prev-holder {\n  cursor: default;\n  line-height: 28px;\n  padding-left: 5px;\n}\n.form-wrap.form-builder .frmb li.form-field .close-field {\n  position: absolute;\n  color: #666;\n  left: 50%;\n  bottom: 6px;\n  background: #fff;\n  border-top: 1px solid #c5c5c5;\n  border-left: 1px solid #c5c5c5;\n  border-right: 1px solid #c5c5c5;\n  transform: translateX(-50%);\n  padding: 0 5px;\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n  cursor: pointer;\n  transition: background-color 250ms ease-in-out;\n}\n.form-wrap.form-builder .frmb li.form-field .close-field:hover {\n  text-decoration: none;\n}\n.form-wrap.form-builder .frmb li.form-field.header-field h1,\n.form-wrap.form-builder .frmb li.form-field.header-field h2,\n.form-wrap.form-builder .frmb li.form-field.header-field h3,\n.form-wrap.form-builder .frmb li.form-field.header-field h4,\n.form-wrap.form-builder .frmb li.form-field.header-field h5,\n.form-wrap.form-builder .frmb li.form-field.header-field h6 {\n  word-break: break-word;\n}\n.form-wrap.form-builder .frmb li.form-field.paragraph-field p {\n  word-break: break-word;\n}\n.form-wrap.form-builder .frmb li.form-field .field-label {\n  display: block;\n  overflow-wrap: break-word;\n}\n.form-wrap.form-builder .frmb li.form-field.button-field h1,\n.form-wrap.form-builder .frmb li.form-field.button-field h2,\n.form-wrap.form-builder .frmb li.form-field.button-field h3,\n.form-wrap.form-builder .frmb li.form-field.button-field p,\n.form-wrap.form-builder .frmb li.form-field.button-field canvas,\n.form-wrap.form-builder .frmb li.form-field.button-field output,\n.form-wrap.form-builder .frmb li.form-field.button-field address,\n.form-wrap.form-builder .frmb li.form-field.button-field blockquote,\n.form-wrap.form-builder .frmb li.form-field.button-field .prev-holder, .form-wrap.form-builder .frmb li.form-field.header-field h1,\n.form-wrap.form-builder .frmb li.form-field.header-field h2,\n.form-wrap.form-builder .frmb li.form-field.header-field h3,\n.form-wrap.form-builder .frmb li.form-field.header-field p,\n.form-wrap.form-builder .frmb li.form-field.header-field canvas,\n.form-wrap.form-builder .frmb li.form-field.header-field output,\n.form-wrap.form-builder .frmb li.form-field.header-field address,\n.form-wrap.form-builder .frmb li.form-field.header-field blockquote,\n.form-wrap.form-builder .frmb li.form-field.header-field .prev-holder, .form-wrap.form-builder .frmb li.form-field.paragraph-field h1,\n.form-wrap.form-builder .frmb li.form-field.paragraph-field h2,\n.form-wrap.form-builder .frmb li.form-field.paragraph-field h3,\n.form-wrap.form-builder .frmb li.form-field.paragraph-field p,\n.form-wrap.form-builder .frmb li.form-field.paragraph-field canvas,\n.form-wrap.form-builder .frmb li.form-field.paragraph-field output,\n.form-wrap.form-builder .frmb li.form-field.paragraph-field address,\n.form-wrap.form-builder .frmb li.form-field.paragraph-field blockquote,\n.form-wrap.form-builder .frmb li.form-field.paragraph-field .prev-holder {\n  margin: 0;\n}\n.form-wrap.form-builder .frmb li.form-field.button-field .field-label, .form-wrap.form-builder .frmb li.form-field.header-field .field-label, .form-wrap.form-builder .frmb li.form-field.paragraph-field .field-label {\n  display: none;\n}\n.form-wrap.form-builder .frmb li.form-field.button-field.editing .field-label, .form-wrap.form-builder .frmb li.form-field.header-field.editing .field-label, .form-wrap.form-builder .frmb li.form-field.paragraph-field.editing .field-label {\n  display: block;\n}\n.form-wrap.form-builder .frmb li.form-field.paragraph-field .fld-label {\n  min-height: 150px;\n  overflow-y: auto;\n}\n.form-wrap.form-builder .frmb li.form-field.checkbox-field .field-label {\n  display: none;\n}\n.form-wrap.form-builder .frmb li.deleting,\n.form-wrap.form-builder .frmb li.delete:hover,\n.form-wrap.form-builder .frmb li:hover li.delete:hover {\n  background-color: #fdd;\n}\n.form-wrap.form-builder .frmb li.deleting .close-field,\n.form-wrap.form-builder .frmb li.delete:hover .close-field,\n.form-wrap.form-builder .frmb li:hover li.delete:hover .close-field {\n  background-color: #fdd;\n}\n.form-wrap.form-builder .frmb li.deleting {\n  z-index: 20;\n  pointer-events: none;\n}\n.form-wrap.form-builder .frmb.disabled-field {\n  padding: 0 5px;\n}\n.form-wrap.form-builder .frmb.disabled-field :hover {\n  border-color: transparent;\n}\n.form-wrap.form-builder .frmb.disabled-field .form-element {\n  float: none;\n  margin-bottom: 10px;\n  overflow: visible;\n  padding: 5px 0;\n  position: relative;\n}\n.form-wrap.form-builder .frmb .frm-holder {\n  display: none;\n}\n.form-wrap.form-builder .frmb .tooltip {\n  left: 20px;\n}\n.form-wrap.form-builder .frmb .prev-holder {\n  display: block;\n}\n.form-wrap.form-builder .frmb .prev-holder .form-group {\n  margin: 0;\n}\n.form-wrap.form-builder .frmb .prev-holder .ql-editor {\n  min-height: 125px;\n}\n.form-wrap.form-builder .frmb .prev-holder .form-group > label:not([class=formbuilder-checkbox-label]) {\n  display: none;\n}\n.form-wrap.form-builder .frmb .prev-holder select,\n.form-wrap.form-builder .frmb .prev-holder input[type=text],\n.form-wrap.form-builder .frmb .prev-holder textarea,\n.form-wrap.form-builder .frmb .prev-holder input[type=number] {\n  background-color: #fff;\n  border: 1px solid #ccc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.form-wrap.form-builder .frmb .prev-holder input[type=color] {\n  width: 60px;\n  padding: 2px;\n  display: inline-block;\n}\n.form-wrap.form-builder .frmb .prev-holder input[type=date] {\n  width: auto;\n}\n.form-wrap.form-builder .frmb .prev-holder select[multiple] {\n  height: auto;\n}\n.form-wrap.form-builder .frmb .prev-holder label {\n  font-weight: normal;\n}\n.form-wrap.form-builder .frmb .prev-holder input[type=number] {\n  width: auto;\n  max-width: 100%;\n}\n.form-wrap.form-builder .frmb .prev-holder input[type=color] {\n  width: 60px;\n  padding: 2px;\n  display: inline-block;\n}\n.form-wrap.form-builder .frmb .required-asterisk {\n  display: none;\n}\n.form-wrap.form-builder .frmb .field-label,\n.form-wrap.form-builder .frmb .legend {\n  color: #666;\n  margin-bottom: 5px;\n  line-height: 27px;\n  font-size: 16px;\n  font-weight: normal;\n}\n.form-wrap.form-builder .frmb .disabled-field .field-label {\n  display: block;\n}\n.form-wrap.form-builder .frmb .other-option:checked + label input {\n  display: inline-block;\n}\n.form-wrap.form-builder .frmb .other-val {\n  margin-left: 5px;\n  display: none;\n}\n.form-wrap.form-builder .frmb .field-actions {\n  position: absolute;\n  top: 0;\n  right: 0;\n  opacity: 0;\n}\n.form-wrap.form-builder .frmb .field-actions a::before {\n  margin: 0;\n}\n.form-wrap.form-builder .frmb .field-actions a:hover {\n  text-decoration: none;\n  color: #000;\n}\n.form-wrap.form-builder .frmb .field-actions .btn {\n  display: inline-block;\n  width: 32px;\n  height: 32px;\n  padding: 0 6px;\n  border-radius: 0;\n  border-color: #c5c5c5;\n  background-color: #fff;\n  color: #c5c5c5;\n  line-height: 32px;\n  font-size: 16px;\n  border-width: 0 0 1px 1px;\n}\n.form-wrap.form-builder .frmb .field-actions .btn:first-child {\n  border-bottom-left-radius: 5px;\n}\n.form-wrap.form-builder .frmb .field-actions .toggle-form:hover {\n  border-color: #cccccc;\n  background-color: #65aac6;\n  color: #fff;\n}\n.form-wrap.form-builder .frmb .field-actions .toggle-form::before {\n  margin: 0;\n}\n.form-wrap.form-builder .frmb .field-actions .copy-button:hover {\n  background-color: #6fc665;\n  color: #fff;\n}\n.form-wrap.form-builder .frmb .field-actions .del-button:hover {\n  background-color: #c66865;\n  color: #fff;\n}\n.form-wrap.form-builder .frmb .option-actions {\n  text-align: right;\n  margin-top: 10px;\n  width: 100%;\n  margin-left: 2%;\n}\n.form-wrap.form-builder .frmb .option-actions button,\n.form-wrap.form-builder .frmb .option-actions a {\n  background: #fff;\n  padding: 5px 10px;\n  border: 1px solid #c5c5c5;\n  font-size: 14px;\n  border-radius: 5px;\n  cursor: default;\n}\n.form-wrap.form-builder .frmb .sortable-options-wrap {\n  width: 81.33333333%;\n  display: inline-block;\n  /* smartphones, Android phones, landscape iPhone */\n}\n.form-wrap.form-builder .frmb .sortable-options-wrap label {\n  font-weight: normal;\n}\n@media (max-width: 481px) {\n  .form-wrap.form-builder .frmb .sortable-options-wrap {\n    display: block;\n    width: 100%;\n  }\n}\n.form-wrap.form-builder .frmb .radio-group-field .sortable-options li:nth-child(2) .remove {\n  display: none;\n}\n.form-wrap.form-builder .frmb .sortable-options {\n  display: inline-block;\n  width: 100%;\n  margin-left: 2%;\n  background: #c5c5c5;\n  margin-bottom: 0;\n  border-radius: 2px;\n  list-style: none;\n  padding: 0;\n}\n.form-wrap.form-builder .frmb .sortable-options > li {\n  cursor: move;\n  margin: 1px;\n  padding: 6px;\n  background-color: #fff;\n}\n.form-wrap.form-builder .frmb .sortable-options > li:nth-child(1) .remove {\n  display: none;\n}\n.form-wrap.form-builder .frmb .sortable-options > li .remove {\n  position: relative;\n  opacity: 1;\n  float: right;\n  right: 14px;\n  height: 18px;\n  width: 18px;\n  top: 8px;\n  font-size: 12px;\n  padding: 0;\n  color: #c10000;\n}\n.form-wrap.form-builder .frmb .sortable-options > li .remove::before {\n  margin: 0;\n}\n.form-wrap.form-builder .frmb .sortable-options > li .remove:hover {\n  background-color: #c10000 !important;\n  text-decoration: none;\n  color: #fff;\n}\n.form-wrap.form-builder .frmb .sortable-options .option-selected {\n  margin: 0;\n  width: 5%;\n}\n.form-wrap.form-builder .frmb .sortable-options input[type=text] {\n  width: calc(44.5% - 17px);\n  margin: 0 3px;\n  float: none;\n}\n.form-wrap.form-builder .frmb .form-field .form-group {\n  width: 100%;\n  clear: left;\n  float: none;\n}\n.form-wrap.form-builder .frmb .col-md-6 .form-elements,\n.form-wrap.form-builder .frmb .col-md-8 .form-elements {\n  width: 100%;\n}\n.form-wrap.form-builder .frmb .field-options .add-area .add {\n  clear: both;\n}\n.form-wrap.form-builder .frmb .style-wrap button.selected {\n  border: 1px solid #000;\n  margin-top: 0;\n  margin-right: 1px;\n  box-shadow: 0 0 0 1px #fff inset;\n  padding: 1px 5px;\n}\n.form-wrap.form-builder .frmb .form-elements {\n  padding: 10px 5px;\n  background: #f7f7f7;\n  border-radius: 3px;\n  margin: 0;\n  border: 1px solid #c5c5c5;\n  /* smartphones, Android phones, landscape iPhone */\n}\n.form-wrap.form-builder .frmb .form-elements .input-wrap {\n  width: 81.33333333%;\n  margin-left: 2%;\n  float: left;\n}\n.form-wrap.form-builder .frmb .form-elements .input-wrap > input[type=checkbox] {\n  margin-top: 8px;\n}\n.form-wrap.form-builder .frmb .form-elements .btn-group {\n  margin-left: 2%;\n}\n.form-wrap.form-builder .frmb .form-elements .add {\n  clear: both;\n}\n.form-wrap.form-builder .frmb .form-elements [contenteditable],\n.form-wrap.form-builder .frmb .form-elements select[multiple] {\n  height: auto;\n}\n.form-wrap.form-builder .frmb .form-elements [contenteditable].form-control {\n  display: inline-block;\n}\n.form-wrap.form-builder .frmb .form-elements [contenteditable].form-control,\n.form-wrap.form-builder .frmb .form-elements input[type=text],\n.form-wrap.form-builder .frmb .form-elements input[type=number],\n.form-wrap.form-builder .frmb .form-elements input[type=date],\n.form-wrap.form-builder .frmb .form-elements input[type=color],\n.form-wrap.form-builder .frmb .form-elements textarea,\n.form-wrap.form-builder .frmb .form-elements select {\n  transition: background 250ms ease-in-out;\n  padding: 6px 12px;\n  border: 1px solid #c5c5c5;\n  background-color: #fff;\n}\n@media (max-width: 481px) {\n  .form-wrap.form-builder .frmb .form-elements .input-wrap {\n    width: 100%;\n    margin-left: 0;\n    float: none;\n  }\n}\n.form-wrap.form-builder .frmb .form-elements input[type=number] {\n  width: auto;\n}\n.form-wrap.form-builder .frmb .form-elements .btn-group {\n  margin-left: 2%;\n}\n.col-md-6 .form-wrap.form-builder .frmb .form-elements .false-label, .col-md-8 .form-wrap.form-builder .frmb .form-elements .false-label,\n.col-md-6 .form-wrap.form-builder .frmb .form-elements label,\n.col-md-8 .form-wrap.form-builder .frmb .form-elements label {\n  display: block;\n}\n.form-wrap.form-builder .frmb .form-elements .false-label:first-child,\n.form-wrap.form-builder .frmb .form-elements label:first-child {\n  width: 16.66666667%;\n  padding-top: 7px;\n  margin-bottom: 0;\n  text-align: right;\n  font-weight: 700;\n  float: left;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-transform: capitalize;\n  /* smartphones, Android phones, landscape iPhone */\n}\n@media (max-width: 481px) {\n  .form-wrap.form-builder .frmb .form-elements .false-label:first-child,\n  .form-wrap.form-builder .frmb .form-elements label:first-child {\n    display: block;\n    width: auto;\n    float: none;\n    text-align: left;\n  }\n  .form-wrap.form-builder .frmb .form-elements .false-label:first-child.empty-label,\n  .form-wrap.form-builder .frmb .form-elements label:first-child.empty-label {\n    display: none;\n  }\n}\n.form-wrap.form-builder .frmb .form-elements .false-label.multiple, .form-wrap.form-builder .frmb .form-elements .false-label.required-label, .form-wrap.form-builder .frmb .form-elements .false-label.toggle-label, .form-wrap.form-builder .frmb .form-elements .false-label.roles-label, .form-wrap.form-builder .frmb .form-elements .false-label.other-label,\n.form-wrap.form-builder .frmb .form-elements label.multiple,\n.form-wrap.form-builder .frmb .form-elements label.required-label,\n.form-wrap.form-builder .frmb .form-elements label.toggle-label,\n.form-wrap.form-builder .frmb .form-elements label.roles-label,\n.form-wrap.form-builder .frmb .form-elements label.other-label {\n  text-align: left;\n  float: none;\n  margin-bottom: -3px;\n  font-weight: 400;\n  width: calc(81.3333% - 23px);\n}\n.form-wrap.form-builder .frmb .form-elements input.error {\n  border: 1px solid #c10000;\n}\n.form-wrap.form-builder .frmb .form-elements input.fld-maxlength {\n  width: 75px;\n}\n.form-wrap.form-builder .frmb .form-elements input.field-error {\n  background: #fefefe;\n  border: 1px solid #c5c5c5;\n}\n.form-wrap.form-builder .frmb .form-elements label em {\n  display: block;\n  font-weight: 400;\n  font-size: 0.75em;\n}\n.form-wrap.form-builder .frmb .form-elements label.maxlength-label {\n  line-height: 1em;\n}\n.form-wrap.form-builder .frmb .form-elements .available-roles {\n  display: none;\n  padding: 10px;\n  margin: 10px 0;\n  background: #e6e6e6;\n  box-shadow: inset 0 0 2px 0 #b3b3b3;\n  /* smartphones, Android phones, landscape iPhone */\n}\n@media (max-width: 481px) {\n  .form-wrap.form-builder .frmb .form-elements .available-roles {\n    margin-left: 0;\n  }\n}\n.form-wrap.form-builder .frmb .form-elements .available-roles label {\n  font-weight: 400;\n  width: auto;\n  float: none;\n  display: inline;\n}\n.form-wrap.form-builder .frmb .form-elements .available-roles input {\n  display: inline;\n  top: auto;\n}\n.form-wrap.form-builder .autocomplete-field .sortable-options .option-selected {\n  display: none;\n}\n.formbuilder-mobile.form-wrap.form-builder .field-actions {\n  opacity: 1;\n}\n\n.form-wrap.form-builder .snackbar {\n  visibility: hidden; /* Hidden by default. Visible on click */\n  min-width: 250px; /* Set a default minimum width */\n  margin-left: -125px; /* Divide value of min-width by 2 */\n  background-color: #333; /* Black background color */\n  color: #fff; /* White text color */\n  text-align: center; /* Centered text */\n  border-radius: 2px; /* Rounded borders */\n  padding: 16px; /* Padding */\n  position: fixed; /* Sit on top of the screen */\n  z-index: 1; /* Add a z-index if needed */\n  left: 50%; /* Center the snackbar */\n  bottom: 30px; /* 30px from the bottom */\n}\n.form-wrap.form-builder .snackbar.show {\n  visibility: visible;\n  animation: fadein 0.5s, fadeout 0.5s 2.5s;\n}\n@keyframes fadein {\n  from {\n    bottom: 0;\n    opacity: 0;\n  }\n  to {\n    bottom: 30px;\n    opacity: 1;\n  }\n}\n@keyframes fadeout {\n  from {\n    bottom: 30px;\n    opacity: 1;\n  }\n  to {\n    bottom: 0;\n    opacity: 0;\n  }\n}\n.form-wrap.form-builder .ui-state-highlight {\n  border-radius: 3px;\n  border: 1px dashed #0d99f2;\n  background-color: #e5f5f8;\n  width: 12px;\n}\n.form-wrap.form-builder .moveHighlight {\n  border: 1px dashed #0d99f2 !important;\n  background-color: #e5f5f8 !important;\n}\n.form-wrap.form-builder .currentGridModeFieldHighlight {\n  background-color: #e5f5f8 !important;\n}\n.form-wrap.form-builder .grid-mode-help {\n  background-color: #fff;\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n}\n.form-wrap.form-builder .grid-mode-help-row1 {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  max-width: 1px;\n}\n.form-wrap.form-builder .grid-mode-help-row2 {\n  white-space: nowrap;\n}\n.form-wrap.form-builder .colWithInsertButtons {\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n  flex: 95 1 0% !important;\n}\n.form-wrap.form-builder .rowWrapper {\n  margin-left: 0 !important;\n  margin-right: 0 !important;\n}\n.form-wrap.form-builder .rowWrapper:last-child {\n  flex-grow: 1;\n}\n.form-wrap.form-builder .rowWrapper:not(.tempRowWrapper) {\n  padding-top: 1em;\n  padding-bottom: 1em;\n}\n.form-wrap.form-builder .btnAddControl {\n  border: 0;\n  background-color: unset;\n}\n.form-wrap.form-builder .hoverColumnDropStyle {\n  border: 1px dashed #0d99f2;\n  border-radius: 3px;\n  background-color: #e5f5f8;\n  width: 20px;\n  position: fixed;\n  margin-left: 40px;\n}\n.form-wrap.form-builder .hoverDropStyleInverse {\n  background-color: #0d99f2;\n  border: 1px dashed #e5f5f8;\n  min-height: 20px;\n}\n.form-wrap.form-builder .hoverDropStyleInverse .colWrapper {\n  max-width: calc(100% - 40px);\n}\n.form-wrap.form-builder .stage-wrap > .hoverDropStyleInverse {\n  width: 100%;\n}\n.form-wrap.form-builder .rowWrapper > .hoverDropStyleInverse {\n  min-width: 40px;\n  flex-grow: 1;\n}\n.form-wrap.form-builder .hoverDropStyleInverse:last-child {\n  flex-grow: 1;\n}\n.form-wrap.form-builder .invisibleRowPlaceholder {\n  width: 0 !important;\n  position: fixed !important;\n  left: -100px !important;\n}\n.form-wrap.form-builder *[tooltip] {\n  position: relative;\n}\n.form-wrap.form-builder *[tooltip]:hover::after {\n  background: rgba(0, 0, 0, 0.9);\n  border-radius: 5px 5px 5px 0;\n  bottom: 23px;\n  color: #fff;\n  content: attr(tooltip);\n  padding: 10px 5px;\n  position: absolute;\n  z-index: 98;\n  left: 2px;\n  width: 230px;\n  text-shadow: none;\n  font-size: 12px;\n  line-height: 1.5em;\n  cursor: default;\n}\n.form-wrap.form-builder *[tooltip]:hover::before {\n  border: solid;\n  border-color: #222 transparent;\n  border-width: 6px 6px 0;\n  bottom: 17px;\n  content: \"\";\n  left: 2px;\n  position: absolute;\n  z-index: 99;\n  cursor: default;\n}\n.form-wrap.form-builder .tooltip-element {\n  visibility: visible;\n  color: #fff;\n  background: #000;\n  width: 16px;\n  height: 16px;\n  border-radius: 8px;\n  display: inline-block;\n  text-align: center;\n  line-height: 16px;\n  margin: 0 5px;\n  font-size: 12px;\n  cursor: default;\n}\n.form-wrap.form-builder .kc-toggle {\n  padding-left: 0 !important;\n}\n.form-wrap.form-builder .kc-toggle span {\n  position: relative;\n  width: 48px;\n  height: 24px;\n  background: #e6e6e6;\n  display: inline-block;\n  border-radius: 4px;\n  border: 1px solid #cccccc;\n  padding: 2px;\n  overflow: hidden;\n  float: left;\n  margin-right: 5px;\n  will-change: transform;\n}\n.form-wrap.form-builder .kc-toggle span::after, .form-wrap.form-builder .kc-toggle span::before {\n  position: absolute;\n  display: inline-block;\n  top: 0;\n}\n.form-wrap.form-builder .kc-toggle span::after {\n  position: relative;\n  content: \"\";\n  width: 50%;\n  height: 100%;\n  left: 0;\n  border-radius: 3px;\n  background: linear-gradient(to bottom, white 0%, #ccc 100%);\n  border: 1px solid #999999;\n  transition: transform 100ms;\n  transform: translateX(0);\n}\n.form-wrap.form-builder .kc-toggle span::before {\n  border-radius: 4px;\n  top: 2px;\n  left: 2px;\n  content: \"\";\n  width: calc(100% - 4px);\n  height: 18px;\n  box-shadow: 0 0 1px 1px #b3b3b3 inset;\n  background-color: transparent;\n}\n.form-wrap.form-builder .kc-toggle input {\n  height: 0;\n  overflow: hidden;\n  width: 0;\n  opacity: 0;\n  pointer-events: none;\n  margin: 0;\n}\n.form-wrap.form-builder .kc-toggle input:checked + span::after {\n  transform: translateX(100%);\n}\n.form-wrap.form-builder .kc-toggle input:checked + span::before {\n  background-color: #6fc665;\n}\n.form-wrap.form-builder.controls-left {\n  flex-direction: row-reverse;\n}\n.form-wrap.form-builder::after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n.form-wrap.form-builder .cb-wrap,\n.form-wrap.form-builder .stage-wrap {\n  vertical-align: top;\n}\n.form-wrap.form-builder .form-elements,\n.form-wrap.form-builder .form-group,\n.form-wrap.form-builder .multi-row span,\n.form-wrap.form-builder textarea {\n  display: block;\n}\n.form-wrap.form-builder .form-elements::after,\n.form-wrap.form-builder .form-group::after {\n  content: \".\";\n  display: block;\n  height: 0;\n  clear: both;\n  visibility: hidden;\n}\n.form-wrap.form-builder .form-elements .field-options div:hover,\n.form-wrap.form-builder .frmb .legend,\n.form-wrap.form-builder .frmb .prev-holder {\n  cursor: move;\n}\n.form-wrap.form-builder .frmb-tt {\n  display: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  border: 1px solid #262626;\n  background-color: #666;\n  border-radius: 5px;\n  padding: 5px;\n  color: #fff;\n  z-index: 20;\n  text-align: left;\n  font-size: 12px;\n  pointer-events: none;\n}\n.form-wrap.form-builder .frmb-tt::before {\n  border-color: #262626 transparent;\n  bottom: -11px;\n}\n.form-wrap.form-builder .frmb-tt::before, .form-wrap.form-builder .frmb-tt::after {\n  content: \"\";\n  position: absolute;\n  border-style: solid;\n  border-width: 10px 10px 0;\n  border-color: #666 transparent;\n  display: block;\n  width: 0;\n  z-index: 1;\n  margin-left: -10px;\n  bottom: -10px;\n  left: 20px;\n}\n.form-wrap.form-builder .frmb-tt a {\n  text-decoration: underline;\n  color: #fff;\n}\n\n.form-builder-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: none;\n  z-index: 10;\n}\n.form-builder-overlay.visible {\n  display: block;\n}\n\n.form-builder-dialog {\n  position: absolute;\n  border-radius: 5px;\n  background: #fff;\n  z-index: 20;\n  transform: translate(-50%, -50%);\n  top: 0;\n  left: 0;\n  padding: 10px;\n  box-shadow: 0 3px 10px #000;\n  min-width: 166px;\n  max-height: 80%;\n  overflow-y: scroll;\n}\n.form-builder-dialog h3 {\n  margin-top: 0;\n}\n.form-builder-dialog.data-dialog {\n  width: 65%;\n  background-color: #23241f;\n}\n.form-builder-dialog.data-dialog pre {\n  background: none;\n  border: 0 none;\n  box-shadow: none;\n  margin: 0;\n  color: #f2f2f2;\n}\n.form-builder-dialog.positioned {\n  transform: translate(-50%, -100%);\n}\n.form-builder-dialog.positioned .button-wrap::before {\n  content: \"\";\n  width: 0;\n  height: 0;\n  border-left: 15px solid transparent;\n  border-right: 15px solid transparent;\n  border-top: 10px solid #fff;\n  position: absolute;\n  left: 50%;\n  top: 100%;\n  transform: translate(-50%, 10px);\n}\n.form-builder-dialog .button-wrap {\n  position: relative;\n  margin-top: 10px;\n  text-align: right;\n  clear: both;\n}\n.form-builder-dialog .button-wrap .btn {\n  margin-left: 10px;\n}", "",{"version":3,"sources":["webpack://./../src/sass/form-builder.scss","webpack://./../src/sass/base/_font.scss","webpack://./../src/sass/base/_mixins.scss","webpack://./../src/sass/base/_animation.scss","webpack://./../src/sass/_stage.scss","webpack://./../src/sass/base/_bs.scss","webpack://./../src/sass/base/_fields.scss","webpack://./../src/sass/base/_variables.scss","webpack://./../src/sass/_controls.scss","webpack://./../src/sass/_tooltip.scss","webpack://./../src/sass/_kc-toggle.scss","webpack://./../src/sass/_dialog.scss"],"names":[],"mappings":"AAAA,gBAAgB;ACAhB;EACE,gCAAA;EACA,2DAAA;ADEF;ACCA,gGAAA;AACA,2FAAA;AACA;;;;;;;CAAA;AASA;;EAEE,gCAAA;EACA,kBAAA;EACA,mBAAA;EACA,YAAA;EAEA,qBAAA;EACA,wBAAA;EACA,UAAA;EACA,mBAAA;EACA,kBAAA;EACA,iBAAA;EAEA,gEAAA;EACA,oBAAA;EACA,oBAAA;EAEA,8CAAA;EACA,gBAAA;EAEA,gEAAA;EACA,yBAAA;EACA,kBAAA;EAEA,0DAAA;EACA,qBAAA;EAEA,4BAAA;EACA,uDAAA;ADNF;;ACQA;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gBAAA;ADLF,ECME,QAAA;AACF;EACE,gDAAA;ADLF;;ACOA;EACE,gDAAA;ADJF;;ACMA;EACE,gBAAA;ADHF;;ACKA;EACE,gBAAA;ADFF;;AE7GA;;CAAA;AFIA;EGJA;;GAAA;ECgtBA,oDAAA;EAiEA,kDAAA;EJ/vBE,kBAAA;EAEA,aAAA;EACA,mBAAA;AAsGF;AAtHE;EACE,sBAAA;AAwHJ;AK7HA;;;;EAIE,oBAAA;EACA,kBAAA;EACA,oBAAA;AL+HF;AK5HA;EACE,mBAAA;AL8HF;AK3HA;EACE,cAAA;AL6HF;AK1HA;;;;EAIE,oBAAA;EACA,kBAAA;EACA,oBAAA;AL4HF;AKzHA;EACE,kBAAA;EACA,qBAAA;EACA,sBAAA;AL2HF;AKzHE;EACE,kBAAA;EACA,WAAA;AL2HJ;AKxHE;EACE,0BAAA;EACA,6BAAA;AL0HJ;AKvHE;EACE,gBAAA;ALyHJ;AKtHE;;;;EAIE,iBAAA;ALwHJ;AKrHE;;;;;;;;;EASE,yBAAA;EACA,4BAAA;ALuHJ;AKpHE;;;;EAIE,UAAA;ALsHJ;AKlHA;EACE,qBAAA;EACA,iBAAA;EACA,gBAAA;EACA,eAAA;EACA,gBAAA;EACA,uBAAA;EACA,kBAAA;EACA,mBAAA;EACA,sBAAA;EACA,0BAAA;EACA,eAAA;EACA,yBAAA;KAAA,sBAAA;UAAA,iBAAA;EACA,sBAAA;EACA,kBAAA;ALoHF;AKlHE;EACE,kBAAA;EACA,eAAA;EACA,sBAAA;EACA,kBAAA;ALoHJ;AKjHE;EACE,iBAAA;EACA,eAAA;EACA,gBAAA;EACA,kBAAA;ALmHJ;AKhHE;EACE,gBAAA;EACA,eAAA;EACA,gBAAA;EACA,kBAAA;ALkHJ;AK/GE;EAGE,sBAAA;AL+GJ;AK3GA;;;;;;;EAOE,yBAAA;EACA,4BAAA;AL6GF;AK1GA;;;EAGE,mBAAA;AL4GF;AKzGA;;;EAGE,YAAA;EACA,kBAAA;EACA,eAAA;EACA,sBAAA;AL2GF;AKxGA;EACE,kBAAA;EACA,cAAA;EACA,yBAAA;AL0GF;AKxGE;EACE,kBAAA;EACA,UAAA;EACA,WAAA;EACA,WAAA;EACA,gBAAA;AL0GJ;AKtGA;;EAEE,eAAA;EACA,uBAAA;EACA,cAAA;ALwGF;AKrGA;EACE,YAAA;ALuGF;AKpGA;EACE,YAAA;EACA,cAAA;EACA,WAAA;EACA,iBAAA;EACA,eAAA;EACA,uBAAA;EACA,kBAAA;ALsGF;AKpGE;EACE,UAAA;EACA,kFAAA;ALsGJ;AKlGA;EACE,gBAAA;EACA,mBAAA;ALoGF;AKjGA;;EAEE,sBAAA;ALmGF;AKhGA;EACE,YAAA;ALkGF;AK/FA;EACE,WAAA;ALiGF;AMxSA;;EAEE,cCQM;APkSR;AMrSE;;;;EAEE,iBAAA;ANySJ;AMrSA;;EAEE,iBAAA;EACA,qBAAA;EACA,sBAAA;EACA,eAAA;ANuSF;AMrSI;;EACE,aAAA;ANwSN;AMnSA;;EAEE,eAAA;ANqSF;AMlSA;EACE,sBC/BM;EDgCN,aAAA;EACA,gBAAA;EACA,UAAA;EACA,sBAAA;EACA,uBAAA;EACA,kBAAA;EACA,WAAA;EACA,iBAAA;EACA,gBAAA;ANoSF;AMlSE;EACE,aAAA;EACA,eAAA;EACA,YAAA;EACA,SAAA;EACA,8CAAA;ANoSJ;AMlSI;EAEE,sCChCmB;APmUzB;AGnVA;EACE;IACE,WAAA;EHqVF;EGlVA;IACE,YAAA;EHoVF;AACF;AQ/VA;EACE,UAAA;EACA,2BAAA;EAAA,sBAAA;EACA,2BAAA;ENUE,kDAAA;AFwVJ;AQhWE;EACE,gBAAA;EACA,sBAAA;EACA,MAAA;ARkWJ;AQ/VE;EACE,aAAA;EACA,WDVG;AP2WP;AEhWI;EMdJ;IAiBI,WAAA;ERiWF;EQ/VE;IACE,aAAA;ERiWJ;AACF;AQ9VE;EACE,YAAA;EACA,eAAA;ARgWJ;AQ9VI;EACE,cAAA;ARgWN;AQ3VA;EACE,SAAA;EACA,UAAA;EACA,kBAAA;AR6VF;AQ3VE;EACE,YAAA;EACA,gBAAA;EACA,kBAAA;EACA,aAAA;EACA,gBAAA;EACA,gBD5CI;EC6CJ,yBAAA;KAAA,sBAAA;UAAA,iBAAA;EACA,mBAAA;EACA,uBAAA;EACA,gBAAA;EACA,mCAAA;ENrCA,kDAAA;AFmYJ;AQ5VI;EACE,WAAA;EACA,YAAA;EACA,kBAAA;EACA,kBAAA;EACA,qBAAA;AR8VN;AQ5VM;;EAEE,eAAA;EACA,YAAA;AR8VR;AQ1VI;EACE,0BAAA;EACA,aAAA;AR4VN;AQzVI;EACE,0BAAA;AR2VN;AQxVI;EACE,kBAAA;EACA,eAAA;AR0VN;AQvVI;EACE,yBAAA;ARyVN;AQtVI;EACE,kBAAA;EACA,4BAAA;EACA,8BAAA;EACA,sBAAA;ARwVN;AQrVI;EACE,QAAA;EACA,gBAAA;EACA,UAAA;EACA,SAAA;EACA,cAAA;ARuVN;AQpVI;EACE,YAAA;ARsVN;AQnVI;EACE,6BAAA;EACA,gBAAA;EACA,UAAA;EACA,eAAA;ARqVN;AQnVM;EACE,cAAA;ARqVR;AErbI;EMqGE;IACE,eAAA;ERmVN;EQhVI;IACE,mBAAA;ERkVN;EQ/UI;IACE,kBAAA;ERiVN;EQhVM;IACE,mBAAA;IACA,eAAA;IACA,sBAAA;ERkVR;AACF;AQ5UI;EACE,gBAAA;EACA,SAAA;EACA,WAAA;EACA,wFAAA;EACA,cAAA;EACA,8DAAA;UAAA,sDAAA;EACA,mBAAA;EACA,gBAAA;EACA,iBAAA;EACA,qCAAA;AR8UN;AQxUE;EACE,WAAA;AR0UJ;;AQrUE;EACE,WAAA;ARwUJ;AQtUI;EACE,WAAA;EACA,4BAAA;EACA,yBAAA;EACA,2BAAA;EACA,gBAAA;EACA,yBAAA;ARwUN;AQtUM;EACE,qCAAA;EACA,wBAAA;EACA,qBAAA;ARwUR;AQrUM;EACE,qCAAA;ARuUR;;AItfA;EACE,YAAA;EACA,aAAA;EACA,sBAAA;EACA,kBAAA;EACA,UAAA;EACA,SAAA;EACA,sBAAA;EFME,kDAAA;AFofJ;AEnfI;EEdJ;IAUI,wBAAA;EJ2fF;AACF;AIzfE;EACE,uBAAA;EACA,2CGGgB;APwfpB;AI1fI;EACE,2BAAA;EACA,kBAAA;EACA,kBAAA;EACA,QAAA;EACA,OAAA;EACA,WAAA;EACA,gBAAA;AJ4fN;AIvfA;EACE,qBAAA;EACA,iBAAA;EACA,8CAAA;AJyfF;AIvfE;EACE,cGxBI;APihBR;AItfE;EACE,gBAAA;AJwfJ;AIpfI;EAKE,qBAAA;EACA,UAAA;EACA,gFAAA;AJkfN;AIxfM;EACE,UAAA;AJ0fR;AIlfQ;EACE,mBAAA;AJofV;AI9eE;EACE,kBAAA;EACA,YAAA;EACA,WAAA;EACA,cAAA;EACA,kBAAA;EACA,sBGhEI;EHiEJ,gEAAA;AJgfJ;AI9eI;EACE,0CGlDiB;APkiBvB;AI7eI;EACE,4BAAA;EACA,2BAAA;AJ+eN;AI5eQ;EACE,wBAAA;AJ8eV;AIzeI;EACE,+BAAA;EACA,8BAAA;AJ2eN;AIxeI;EACE,gBAAA;AJ0eN;AIveI;EACE;IACE,SAAA;EJyeN;EIteI;IACE,YAAA;EJweN;AACF;AIreI;EAEE,SAAA;EACA,UAAA;EACA,wFAAA;EACA,cAAA;EACA,8DAAA;UAAA,sDAAA;EACA,mBAAA;EACA,gBAAA;EACA,kBAAA;EACA,qCAAA;AJseN;AIneI;EAEE,wCAAA;EACA,8BAAA;EACA,sBAAA;EACA,kBAAA;AJoeN;AIjeI;EACE,UAAA;EACA,kBAAA;EACA,iBAAA;AJmeN;AIheQ;EACE,qBAAA;AJkeV;AI9dM;EACE,WAAA;EACA,kBAAA;AJgeR;AI7dM;EACE,qBAAA;AJ+dR;AI5dM;EACE,eAAA;EACA,gBAAA;EACA,WG/ID;AP6mBP;AI3dM;EACE,eAAA;EACA,iBAAA;EACA,iBAAA;AJ6dR;AIzdI;EACE,kBAAA;EACA,WG3JC;EH4JD,SAAA;EACA,WAAA;EACA,gBGhKE;EHiKF,6BAAA;EACA,8BAAA;EACA,+BAAA;EACA,2BAAA;EACA,cAAA;EACA,4BAAA;EACA,2BAAA;EACA,eAAA;EACA,8CAAA;AJ2dN;AIzdM;EACE,qBAAA;AJ2dR;AItdM;;;;;;EAME,sBAAA;AJwdR;AIndM;EACE,sBAAA;AJqdR;AIjdI;EACE,cAAA;EACA,yBAAA;AJmdN;AI7cM;;;;;;;;;;;;;;;;;;;;;;;;;EASE,SAAA;AJ+dR;AI5dM;EACE,aAAA;AJ8dR;AI1dQ;EACE,cAAA;AJ4dV;AItdM;EACE,iBAAA;EACA,gBAAA;AJwdR;AIndM;EACE,aAAA;AJqdR;AIhdE;;;EAGE,sBAAA;AJkdJ;AIhdI;;;EACE,sBAAA;AJodN;AIhdE;EACE,WAAA;EACA,oBAAA;AJkdJ;AI/cE;EACE,cAAA;AJidJ;AI/cI;EACE,yBAAA;AJidN;AI9cI;EACE,WAAA;EACA,mBAAA;EACA,iBAAA;EACA,cAAA;EACA,kBAAA;AJgdN;AI5cE;EACE,aAAA;AJ8cJ;AI3cE;EACE,UAAA;AJ6cJ;AI1cE;EACE,cAAA;AJ4cJ;AI1cI;EACE,SAAA;AJ4cN;AIzcI;EACE,iBAAA;AJ2cN;AIxcI;EACE,aAAA;AJ0cN;AIvcI;;;;EAIE,sBGxSE;EHySF,sBAAA;EACA,gDAAA;AJycN;AItcI;EACE,WAAA;EACA,YAAA;EACA,qBAAA;AJwcN;AIrcI;EACE,WAAA;AJucN;AIpcI;EACE,YAAA;AJscN;AIncI;EACE,mBAAA;AJqcN;AIlcI;EACE,WAAA;EACA,eAAA;AJocN;AIjcI;EACE,WAAA;EACA,YAAA;EACA,qBAAA;AJmcN;AI/bE;EACE,aAAA;AJicJ;AI9bE;;EAEE,WG/UG;EHgVH,kBAAA;EACA,iBAAA;EACA,eAAA;EACA,mBAAA;AJgcJ;AI7bE;EACE,cAAA;AJ+bJ;AI3bI;EACE,qBAAA;AJ6bN;AIzbE;EACE,gBAAA;EACA,aAAA;AJ2bJ;AIxbE;EACE,kBAAA;EACA,MAAA;EACA,QAAA;EACA,UAAA;AJ0bJ;AIvbM;EACE,SAAA;AJybR;AIvbM;EACE,qBAAA;EACA,WAAA;AJybR;AIrbI;EACE,qBAAA;EAEA,WAAA;EACA,YAAA;EACA,cAAA;EACA,gBAAA;EACA,qBGhXe;EHiXf,sBG/XE;EHgYF,cGlXe;EHmXf,iBAAA;EACA,eAAA;EACA,yBAAA;AJsbN;AIpbM;EACE,8BAAA;AJsbR;AIjbM;EACE,qBAAA;EACA,yBGjYD;EHkYC,WG9YA;APi0BR;AIhbM;EACE,SAAA;AJkbR;AI7aM;EACE,yBG7YD;EH8YC,WGzZA;APw0BR;AI1aM;EACE,yBGrZC;EHsZD,WGhaA;AP40BR;AIvaE;EACE,iBAAA;EACA,gBAAA;EACA,WAAA;EACA,eAAA;AJyaJ;AIvaI;;EAEE,gBG7aE;EH8aF,iBAAA;EACA,yBAAA;EACA,eAAA;EACA,kBAAA;EACA,eAAA;AJyaN;AIraE;EACE,mBAAA;EACA,qBAAA;EF5aA,kDAAA;AFo1BJ;AItaI;EACE,mBAAA;AJwaN;AEt1BI;EEyaF;IASI,cAAA;IACA,WAAA;EJwaJ;AACF;AIpaI;EACE,aAAA;AJsaN;AIlaE;EACE,qBAAA;EACA,WAAA;EACA,eAAA;EACA,mBGhciB;EHicjB,gBAAA;EACA,kBAAA;EACA,gBAAA;EACA,UAAA;AJoaJ;AIlaI;EACE,YAAA;EACA,WAAA;EAEA,YAAA;EACA,sBGzdE;AP43BR;AIjaM;EACE,aAAA;AJmaR;AIhaM;EACE,kBAAA;EACA,UAAA;EACA,YAAA;EACA,WAAA;EACA,YAAA;EACA,WAAA;EACA,QAAA;EACA,eAAA;EACA,UAAA;EACA,cGheA;APk4BR;AIjaQ;EACE,SAAA;AJmaV;AIhaQ;EACE,oCAAA;EACA,qBAAA;EACA,WGjfF;APm5BR;AI7ZI;EACE,SAAA;EACA,SAAA;AJ+ZN;AI5ZI;EACE,yBAAA;EACA,aAAA;EACA,WAAA;AJ8ZN;AIzZI;EACE,WAAA;EACA,WAAA;EACA,WAAA;AJ2ZN;AIrZI;;EACE,WAAA;AJwZN;AIpZE;EACE,WAAA;AJsZJ;AIjZM;EACE,sBAAA;EACA,aAAA;EACA,iBAAA;EACA,gCAAA;EACA,gBAAA;AJmZR;AI9YE;EACE,iBAAA;EACA,mBAAA;EACA,kBAAA;EACA,SAAA;EACA,yBAAA;EF1hBA,kDAAA;AF26BJ;AI/YI;EACE,mBAAA;EACA,eAAA;EACA,WAAA;AJiZN;AI/YM;EACE,eAAA;AJiZR;AI7YI;EACE,eAAA;AJ+YN;AI5YI;EACE,WAAA;AJ8YN;AI3YI;;EAEE,YAAA;AJ6YN;AI1YI;EACE,qBAAA;AJ4YN;AIzYI;;;;;;;EAOE,wCAAA;EACA,iBAAA;EACA,yBAAA;EACA,sBG7kBE;APw9BR;AE38BI;EEokBE;IACE,WAAA;IACA,cAAA;IACA,WAAA;EJ0YN;AACF;AIvYI;EACE,WAAA;AJyYN;AItYI;EACE,eAAA;AJwYN;AInYM;;;EAEE,cAAA;AJsYR;AInYM;;EACE,mBAAA;EACA,gBAAA;EACA,gBAAA;EACA,iBAAA;EACA,gBAAA;EACA,WAAA;EACA,mBAAA;EACA,gBAAA;EACA,uBAAA;EACA,0BAAA;EFrmBJ,kDAAA;AF4+BJ;AE3+BI;EE0lBE;;IAaI,cAAA;IACA,WAAA;IACA,WAAA;IACA,gBAAA;EJyYR;EIvYQ;;IACE,aAAA;EJ0YV;AACF;AItYM;;;;;;EAKE,gBAAA;EACA,WAAA;EACA,mBAAA;EACA,gBAAA;EACA,4BAAA;AJyYR;AIpYM;EACE,yBAAA;AJsYR;AInYM;EACE,WAAA;AJqYR;AIlYM;EACE,mBGrpBI;EHspBJ,yBAAA;AJoYR;AI/XM;EACE,cAAA;EACA,gBAAA;EACA,iBAAA;AJiYR;AI9XM;EACE,gBAAA;AJgYR;AI5XI;EACE,aAAA;EACA,aAAA;EACA,cAAA;EACA,mBAAA;EACA,mCAAA;EFhqBF,kDAAA;AF+hCJ;AE9hCI;EE0pBA;IAQI,cAAA;EJgYN;AACF;AI9XM;EACE,gBAAA;EACA,WAAA;EACA,WAAA;EACA,eAAA;AJgYR;AI7XM;EACE,eAAA;EACA,SAAA;AJ+XR;AIvXI;EACE,aAAA;AJyXN;AInXE;EACE,UAAA;AJqXJ;;AIhXA;EACE,kBAAA,EAAA,wCAAA;EACA,gBAAA,EAAA,gCAAA;EACA,mBAAA,EAAA,mCAAA;EACA,sBAAA,EAAA,2BAAA;EACA,WAAA,EAAA,qBAAA;EACA,kBAAA,EAAA,kBAAA;EACA,kBAAA,EAAA,oBAAA;EACA,aAAA,EAAA,YAAA;EACA,eAAA,EAAA,6BAAA;EACA,UAAA,EAAA,4BAAA;EACA,SAAA,EAAA,wBAAA;EACA,YAAA,EAAA,yBAAA;AJmXF;AIhXA;EACE,mBAAA;EAEA,yCAAA;AJkXF;AIpWA;EACE;IACE,SAAA;IACA,UAAA;EJgXF;EI9WA;IACE,YAAA;IACA,UAAA;EJgXF;AACF;AIlWA;EACE;IACE,YAAA;IACA,UAAA;EJ8WF;EI5WA;IACE,SAAA;IACA,UAAA;EJ8WF;AACF;AI1WA;EACE,kBAAA;EACA,0BAAA;EACA,yBAAA;EACA,WAAA;AJ4WF;AIzWA;EACE,qCAAA;EACA,oCAAA;AJ2WF;AIxWA;EACE,oCAAA;AJ0WF;AIvWA;EACE,sBGnyBM;EHoyBN,2BAAA;EACA,4BAAA;AJyWF;AItWA;EACE,mBAAA;EACA,uBAAA;EACA,gBAAA;EACA,cAAA;AJwWF;AItWA;EACE,mBAAA;AJwWF;AIrWA;EACE,0BAAA;EACA,2BAAA;EACA,wBAAA;AJuWF;AIpWA;EACE,yBAAA;EACA,0BAAA;AJsWF;AInWA;EACE,YAAA;AJqWF;AIlWA;EACE,gBAAA;EACA,mBAAA;AJoWF;AIjWA;EACE,SAAA;EACA,uBAAA;AJmWF;AIhWA;EACE,0BAAA;EACA,kBAAA;EACA,yBAAA;EACA,WAAA;EACA,eAAA;EACA,iBAAA;AJkWF;AI/VA;EACE,yBAAA;EACA,0BAAA;EACA,gBAAA;AJiWF;AI9VA;EACE,4BAAA;AJgWF;AI7VA;EACE,WAAA;AJ+VF;AI5VA;EACE,eAAA;EACA,YAAA;AJ8VF;AI3VA;EACE,YAAA;AJ6VF;AI1VA;EACE,mBAAA;EACA,0BAAA;EACA,uBAAA;AJ4VF;AS1sCA;EACE,kBAAA;AT4sCF;ASzsCA;EACE,8BAAA;EACA,4BAAA;EACA,YAAA;EACA,WFRM;EESN,sBAAA;EACA,iBAAA;EACA,kBAAA;EACA,WAAA;EACA,SAAA;EACA,YAAA;EACA,iBAAA;EACA,eAAA;EACA,kBAAA;EACA,eAAA;AT2sCF;ASxsCA;EACE,aAAA;EACA,8BAAA;EACA,uBAAA;EACA,YAAA;EACA,WAAA;EACA,SAAA;EACA,kBAAA;EACA,WAAA;EACA,eAAA;AT0sCF;ASvsCA;EACE,mBAAA;EACA,WFnCM;EEoCN,gBFrCM;EEsCN,WAAA;EACA,YAAA;EACA,kBAAA;EACA,qBAAA;EACA,kBAAA;EACA,iBAAA;EACA,aAAA;EACA,eAAA;EACA,eAAA;ATysCF;AUvvCA;EACE,0BAAA;AVyvCF;AUvvCE;EACE,kBAAA;EACA,WAAA;EACA,YAAA;EACA,mBAAA;EACA,qBAAA;EACA,kBAAA;EACA,yBAAA;EACA,YAAA;EACA,gBAAA;EACA,WAAA;EACA,iBAAA;EACA,sBAAA;AVyvCJ;AUvvCI;EAEE,kBAAA;EACA,qBAAA;EACA,MAAA;AVwvCN;AUrvCI;EACE,kBAAA;EACA,WAAA;EACA,UAAA;EACA,YAAA;EACA,OAAA;EACA,kBAAA;EACA,2DAAA;EACA,yBAAA;EACA,2BAAA;EACA,wBAAA;AVuvCN;AUpvCI;EACE,kBAAA;EACA,QAAA;EACA,SAAA;EACA,WAAA;EACA,uBAAA;EACA,YAAA;EACA,qCAAA;EACA,6BAAA;AVsvCN;AUlvCE;EACE,SAAA;EACA,gBAAA;EACA,QAAA;EACA,UAAA;EACA,oBAAA;EACA,SAAA;AVovCJ;AUjvCM;EACE,2BAAA;AVmvCR;AUhvCM;EACE,yBHnDD;APqyCP;AA1xCE;EACE,2BAAA;AA4xCJ;AAzxCE;EACE,WAAA;EACA,cAAA;EACA,WAAA;AA2xCJ;AAxxCE;;EAEE,mBAAA;AA0xCJ;AAvxCE;;;;EAIE,cAAA;AAyxCJ;AAtxCE;;EAEE,YAAA;EACA,cAAA;EACA,SAAA;EACA,WAAA;EACA,kBAAA;AAwxCJ;AArxCE;;;EAGE,YAAA;AAuxCJ;AAnxCE;EACE,aAAA;EACA,kBAAA;EACA,MAAA;EACA,OAAA;EACA,yBAAA;EACA,sBOhEG;EPiEH,kBAAA;EACA,YAAA;EACA,WOrEI;EPsEJ,WAAA;EACA,gBAAA;EACA,eAAA;EACA,oBAAA;AAqxCJ;AAnxCI;EACE,iCAAA;EACA,aAAA;AAqxCN;AAlxCI;EAEE,WAAA;EACA,kBAAA;EACA,mBAAA;EACA,yBAAA;EACA,8BAAA;EACA,cAAA;EACA,QAAA;EACA,UAAA;EACA,kBAAA;EACA,aAAA;EACA,UAAA;AAmxCN;AAhxCI;EACE,0BAAA;EACA,WOjGE;APm3CR;;AWp3CA;EACE,eAAA;EACA,MAAA;EACA,OAAA;EACA,WAAA;EACA,YAAA;EACA,oCJWc;EIVd,aAAA;EACA,WAAA;AXu3CF;AWr3CE;EACE,cAAA;AXu3CJ;;AWn3CA;EACE,kBAAA;EACA,kBAAA;EACA,gBJjBM;EIkBN,WAAA;EACA,gCAAA;EACA,MAAA;EACA,OAAA;EACA,aAAA;EACA,2BAAA;EACA,gBAAA;EACA,eAAA;EACA,kBAAA;AXs3CF;AWp3CE;EACE,aAAA;AXs3CJ;AWn3CE;EACE,UAAA;EACA,yBJ5BQ;APi5CZ;AWn3CI;EACE,gBAAA;EACA,cAAA;EACA,gBAAA;EACA,SAAA;EACA,cAAA;AXq3CN;AWj3CE;EACE,iCAAA;AXm3CJ;AWh3CM;EACE,WAAA;EACA,QAAA;EACA,SAAA;EACA,mCAAA;EACA,oCAAA;EACA,2BAAA;EACA,kBAAA;EACA,SAAA;EACA,SAAA;EACA,gCAAA;AXk3CR;AW72CE;EACE,kBAAA;EACA,gBAAA;EACA,iBAAA;EACA,WAAA;AX+2CJ;AW72CI;EACE,iBAAA;AX+2CN","sourcesContent":["@import 'base/variables';\n@import 'base/font';\n@import 'base/mixins';\n\n.form-wrap.form-builder {\n  * {\n    box-sizing: border-box;\n  }\n\n  &.formbuilder-embedded-bootstrap {\n    @import 'base/bs';\n  }\n  @import 'base/fields';\n  @import 'base/animation';\n  @import 'controls';\n  @import 'stage';\n  @import 'tooltip';\n  @import 'kc-toggle';\n  position: relative;\n\n  display: flex;\n  flex-direction: row;\n\n  &.controls-left {\n    flex-direction: row-reverse;\n  }\n\n  &::after {\n    content: '';\n    display: table;\n    clear: both;\n  }\n\n  .cb-wrap,\n  .stage-wrap {\n    vertical-align: top;\n  }\n\n  .form-elements,\n  .form-group,\n  .multi-row span,\n  textarea {\n    display: block;\n  }\n\n  .form-elements::after,\n  .form-group::after {\n    content: '.';\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n  }\n\n  .form-elements .field-options div:hover,\n  .frmb .legend,\n  .frmb .prev-holder {\n    cursor: move;\n  }\n\n  // tooltips\n  .frmb-tt {\n    display: none;\n    position: absolute;\n    top: 0;\n    left: 0;\n    border: 1px solid darken($grey, 25%);\n    background-color: $grey;\n    border-radius: 5px;\n    padding: 5px;\n    color: $white;\n    z-index: 20;\n    text-align: left;\n    font-size: 12px;\n    pointer-events: none;\n\n    &::before {\n      border-color: darken($grey, 25%) transparent;\n      bottom: -11px;\n    }\n\n    &::before,\n    &::after {\n      content: '';\n      position: absolute;\n      border-style: solid;\n      border-width: 10px 10px 0;\n      border-color: $grey transparent;\n      display: block;\n      width: 0;\n      z-index: 1;\n      margin-left: -10px;\n      bottom: -10px;\n      left: 20px;\n    }\n\n    a {\n      text-decoration: underline;\n      color: $white;\n    }\n  }\n}\n\n@import 'dialog';","@font-face {\n  font-family: 'formbuilder-icons';\n  src: url('data:font/woff;base64,')\n    format('woff');\n}\n/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */\n/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */\n/*\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n  @font-face {\n    font-family: 'formbuilder-icons';\n    src: url('../font/formbuilder-icons.svg?4142374#formbuilder-icons') format('svg');\n  }\n}\n*/\n\n[class^='formbuilder-icon-']:before,\n[class*=' formbuilder-icon-']:before {\n  font-family: 'formbuilder-icons';\n  font-style: normal;\n  font-weight: normal;\n  speak: never;\n\n  display: inline-block;\n  text-decoration: inherit;\n  width: 1em;\n  margin-right: 0.2em;\n  text-align: center;\n  /* opacity: .8; */\n\n  /* For safety - reset parent styles, that can break glyph codes*/\n  font-variant: normal;\n  text-transform: none;\n\n  /* fix buttons height, for twitter bootstrap */\n  line-height: 1em;\n\n  /* Animation center compensation - margins should be symmetric */\n  /* remove if not needed */\n  margin-left: 0.2em;\n\n  /* you can be more comfortable with increased icons size */\n  /* font-size: 120%; */\n\n  /* Uncomment for 3D effect */\n  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */\n}\n.formbuilder-icon-autocomplete:before {\n  content: '\\e800';\n} /* '' */\n.formbuilder-icon-date:before {\n  content: '\\e801';\n} /* '' */\n.formbuilder-icon-checkbox:before {\n  content: '\\e802';\n} /* '' */\n.formbuilder-icon-checkbox-group:before {\n  content: '\\e803';\n} /* '' */\n.formbuilder-icon-radio-group:before {\n  content: '\\e804';\n} /* '' */\n.formbuilder-icon-rich-text:before {\n  content: '\\e805';\n} /* '' */\n.formbuilder-icon-select:before {\n  content: '\\e806';\n} /* '' */\n.formbuilder-icon-textarea:before {\n  content: '\\e807';\n} /* '' */\n.formbuilder-icon-text:before {\n  content: '\\e808';\n} /* '' */\n.formbuilder-icon-pencil:before {\n  content: '\\e809';\n} /* '' */\n.formbuilder-icon-file:before {\n  content: '\\e80a';\n} /* '' */\n.formbuilder-icon-hidden:before {\n  content: '\\e80b';\n} /* '' */\n.formbuilder-icon-cancel:before {\n  content: '\\e80c';\n} /* '' */\n.formbuilder-icon-button:before {\n  content: '\\e80d';\n} /* '' */\n.formbuilder-icon-header:before {\n  content: '\\e80f';\n} /* '' */\n.formbuilder-icon-paragraph:before {\n  content: '\\e810';\n} /* '' */\n.formbuilder-icon-number:before {\n  content: '\\e811';\n} /* '' */\n.formbuilder-icon-copy:before {\n  content: '\\f24d';\n} /* '' */\n.formbuilder-icon-grid:before {\n  content: url(\"data:image/svg+xml; utf8, <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-list-nested' viewBox='0 0 16 16'><path fill-rule='evenodd' d='M4.5 11.5A.5.5 0 0 1 5 11h10a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 1 3h10a.5.5 0 0 1 0 1H1a.5.5 0 0 1-.5-.5z'/></svg>\");\n}\n.formbuilder-icon-plus:before {\n  content: url(\"data:image/svg+xml; utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-plus-circle' viewBox='0 0 16 16'><path d='M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z'/><path d='M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z'/></svg>\");\n}\n.formbuilder-icon-sort-lower:before {\n  content: '\\f175';\n}\n.formbuilder-icon-sort-higher:before {\n  content: '\\f176';\n}\n\n","/*\n  Mixins\n*/\n\n@mixin breakpoint($point) {\n  @if $point == phone-sm {\n    /* smartphones, portrait iPhone, small portrait Android */\n    @media (max-width: 320px) {\n      @content;\n    }\n  }\n\n  @else if $point == phone-lrg {\n    /* smartphones, Android phones, landscape iPhone */\n    @media (max-width: 481px) {\n      @content;\n    }\n  }\n\n  @else if $point == tablet-sm {\n    /* portrait tablets, portrait iPad, e-readers (Nook/Kindle), smaller landscape Android */\n    @media (max-width: 641px) {\n      @content;\n    }\n  }\n\n  @else if $point == tablet-md {\n    /* tablet, landscape iPad, lo-res laptops ands desktops */\n    @media (max-width: 961px) {\n      @content;\n    }\n  }\n\n  @else if $point == tablet-lrg {\n    /* big landscape tablets, laptops, and desktops */\n    @media (max-width: 1025px) {\n      @content;\n    }\n  }\n\n  @else if $point == tablet-lrg {\n    /* hi-res laptops and desktops */\n    @media (max-width: 1281px) {\n      @content;\n    }\n  }\n\n  @else {\n    @media (max-width: $point) {\n      @content;\n    }\n  }\n}\n\n@mixin custom-scroll($trackColor, $thumbColor) {\n  /* Let's get this party started */\n  &::-webkit-scrollbar {\n    width: 5px;\n    height: 5px;\n  }\n\n  /* Track */\n  &::-webkit-scrollbar-track {\n    background-color: $trackColor;\n  }\n\n  /* Handle */\n  &::-webkit-scrollbar-thumb {\n    background: $thumbColor;\n  }\n\n  &::-webkit-scrollbar-thumb:window-inactive {\n    background: $thumbColor;\n  }\n\n  overflow: auto;\n}\n","/*\n  Animations\n*/\n\n@keyframes PLACEHOLDER {\n  0% {\n    height: 1px;\n  }\n\n  100% {\n    height: 15px;\n  }\n}\n",".stage-wrap {\n  flex-grow: 1;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  padding: 0;\n  margin: 0;\n  width: calc(74% - 5px);\n\n  @include breakpoint('phone-lrg') {\n    width: calc(100% - 64px);\n  }\n\n  &.empty {\n    border: 3px dashed $grey-light;\n    background-color: $empty-stage-color;\n    &::after {\n      content: attr(data-content);\n      position: absolute;\n      text-align: center;\n      top: 50%;\n      left: 0;\n      width: 100%;\n      margin-top: -1em;\n    }\n  }\n}\n\n.frmb {\n  list-style-type: none;\n  min-height: 200px;\n  transition: background-color 500ms ease-in-out;\n\n  .formbuilder-required {\n    color: $error;\n  }\n\n  &.removing {\n    overflow: hidden;\n  }\n\n  li.form-field {\n    &:hover {\n      .field-actions {\n        opacity: 1;\n      }\n\n      border-color: #66afe9;\n      outline: 0;\n      box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.1), 0 0 8px rgba(102, 175, 233, 0.6);\n\n      li {\n        :hover {\n          background: #fefefe;\n        }\n      }\n    }\n  }\n\n  li.form-field {\n    position: relative;\n    padding: 6px;\n    clear: both;\n    margin-left: 0;\n    margin-bottom: 3px;\n    background-color: $white;\n    transition: background-color 250ms ease-in-out, margin-top 400ms;\n\n    &.hidden-field {\n      background-color: $hidden-field-bgcolor;\n    }\n\n    &:first-child {\n      border-top-right-radius: 5px;\n      border-top-left-radius: 5px;\n\n      .field-actions {\n        .btn:last-child {\n          border-radius: 0 5px 0 0;\n        }\n      }\n    }\n\n    &:last-child {\n      border-bottom-right-radius: 5px;\n      border-bottom-left-radius: 5px;\n    }\n\n    &.no-fields label {\n      font-weight: 400;\n    }\n\n    @keyframes PLACEHOLDER {\n      0% {\n        height: 0;\n      }\n\n      100% {\n        height: 15px;\n      }\n    }\n\n    &.frmb-placeholder,\n    &.ui-state-highlight {\n      height: 0;\n      padding: 0;\n      background: radial-gradient(ellipse at center, rgba(84, 84, 84, 1) 0%, rgba(0, 0, 0, 0) 75%);\n      border: 0 none;\n      clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n      visibility: visible;\n      overflow: hidden;\n      margin-bottom: 3px;\n      animation: PLACEHOLDER 250ms forwards;\n    }\n\n    &.moving,\n    &.ui-sortable-helper {\n      transition: box-shadow 500ms ease-in-out;\n      box-shadow: 2px 2px 6px 0 $grey;\n      border: 1px solid $white;\n      border-radius: 5px;\n    }\n\n    &.disabled-field {\n      z-index: 1;\n      position: relative;\n      overflow: visible;\n\n      &:hover {\n        .frmb-tt {\n          display: inline-block;\n        }\n      }\n\n      [type='checkbox'] {\n        float: left;\n        margin-right: 10px;\n      }\n\n      h2 {\n        border-bottom: 0 none;\n      }\n\n      label {\n        font-size: 12px;\n        font-weight: 400;\n        color: $grey;\n      }\n\n      .prev-holder {\n        cursor: default;\n        line-height: 28px;\n        padding-left: 5px;\n      }\n    }\n\n    .close-field {\n      position: absolute;\n      color: $grey;\n      left: 50%;\n      bottom: 6px;\n      background: $white;\n      border-top: 1px solid $input-border-color;\n      border-left: 1px solid $input-border-color;\n      border-right: 1px solid $input-border-color;\n      transform: translateX(-50%);\n      padding: 0 5px;\n      border-top-right-radius: 3px;\n      border-top-left-radius: 3px;\n      cursor: pointer;\n      transition: background-color 250ms ease-in-out;\n\n      &:hover {\n        text-decoration: none;\n      }\n    }\n\n    &.header-field {\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        word-break: break-word;\n      }\n    }\n\n    &.paragraph-field {\n      p {\n        word-break: break-word;\n      }\n    }\n\n    .field-label {\n      display: block;\n      overflow-wrap: break-word;\n    }\n\n    &.button-field,\n    &.header-field,\n    &.paragraph-field {\n      h1,\n      h2,\n      h3,\n      p,\n      canvas,\n      output,\n      address,\n      blockquote,\n      .prev-holder {\n        margin: 0;\n      }\n\n      .field-label {\n        display: none;\n      }\n\n      &.editing {\n        .field-label {\n          display: block;\n        }\n      }\n    }\n\n    &.paragraph-field {\n      .fld-label {\n        min-height: 150px;\n        overflow-y: auto;\n      }\n    }\n\n    &.checkbox-field {\n      .field-label {\n        display: none;\n      }\n    }\n  }\n\n  li.deleting,\n  li.delete:hover,\n  li:hover li.delete:hover {\n    background-color: #fdd;\n\n    .close-field {\n      background-color: #fdd;\n    }\n  }\n\n  li.deleting {\n    z-index: 20;\n    pointer-events: none;\n  }\n\n  &.disabled-field {\n    padding: 0 5px;\n\n    :hover {\n      border-color: transparent;\n    }\n\n    .form-element {\n      float: none;\n      margin-bottom: 10px;\n      overflow: visible;\n      padding: 5px 0;\n      position: relative;\n    }\n  }\n\n  .frm-holder {\n    display: none;\n  }\n\n  .tooltip {\n    left: 20px;\n  }\n\n  .prev-holder {\n    display: block;\n\n    .form-group {\n      margin: 0;\n    }\n\n    .ql-editor {\n      min-height: 125px;\n    }\n\n    .form-group > label:not([class='formbuilder-checkbox-label']) {\n      display: none;\n    }\n\n    select,\n    input[type='text'],\n    textarea,\n    input[type='number'] {\n      background-color: $white;\n      border: 1px solid $grey-light;\n      box-shadow: inset 0 1px 1px $input-box-shadow-color;\n    }\n\n    input[type='color'] {\n      width: 60px;\n      padding: 2px;\n      display: inline-block;\n    }\n\n    input[type='date'] {\n      width: auto;\n    }\n\n    select[multiple] {\n      height: auto;\n    }\n\n    label {\n      font-weight: normal;\n    }\n\n    input[type='number'] {\n      width: auto;\n      max-width: 100%;\n    }\n\n    input[type='color'] {\n      width: 60px;\n      padding: 2px;\n      display: inline-block;\n    }\n  }\n\n  .required-asterisk {\n    display: none;\n  }\n\n  .field-label,\n  .legend {\n    color: $grey;\n    margin-bottom: 5px;\n    line-height: 27px;\n    font-size: 16px;\n    font-weight: normal;\n  }\n\n  .disabled-field .field-label {\n    display: block;\n  }\n\n  .other-option:checked + label {\n    input {\n      display: inline-block;\n    }\n  }\n\n  .other-val {\n    margin-left: 5px;\n    display: none;\n  }\n\n  .field-actions {\n    position: absolute;\n    top: 0;\n    right: 0;\n    opacity: 0;\n\n    a {\n      &::before {\n        margin: 0;\n      }\n      &:hover {\n        text-decoration: none;\n        color: #000;\n      }\n    }\n\n    .btn {\n      display: inline-block;\n\n      width: 32px;\n      height: 32px;\n      padding: 0 6px;\n      border-radius: 0;\n      border-color: $input-border-color;\n      background-color: $white;\n      color: $input-border-color;\n      line-height: 32px;\n      font-size: 16px;\n      border-width: 0 0 1px 1px;\n\n      &:first-child {\n        border-bottom-left-radius: 5px;\n      }\n    }\n\n    .toggle-form {\n      &:hover {\n        border-color: lighten($grey, 40%);\n        background-color: $edit;\n        color: $white;\n      }\n\n      &::before {\n        margin: 0;\n      }\n    }\n\n    .copy-button {\n      &:hover {\n        background-color: $copy;\n        color: $white;\n      }\n    }\n\n    .del-button {\n      &:hover {\n        background-color: $remove;\n        color: $white;\n      }\n    }\n  }\n\n  .option-actions {\n    text-align: right;\n    margin-top: 10px;\n    width: 100%;\n    margin-left: 2%;\n\n    button,\n    a {\n      background: $white;\n      padding: 5px 10px;\n      border: 1px solid $input-border-color;\n      font-size: 14px;\n      border-radius: 5px;\n      cursor: default;\n    }\n  }\n\n  .sortable-options-wrap {\n    width: 81.33333333%;\n    display: inline-block;\n\n    label {\n      font-weight: normal;\n    }\n\n    @include breakpoint('phone-lrg') {\n      display: block;\n      width: 100%;\n    }\n  }\n\n  .radio-group-field {\n    .sortable-options li:nth-child(2) .remove {\n      display: none;\n    }\n  }\n\n  .sortable-options {\n    display: inline-block;\n    width: 100%;\n    margin-left: 2%;\n    background: $input-border-color;\n    margin-bottom: 0;\n    border-radius: 2px;\n    list-style: none;\n    padding: 0;\n\n    > li {\n      cursor: move;\n      margin: 1px;\n\n      padding: 6px;\n      background-color: $white;\n\n      &:nth-child(1) .remove {\n        display: none;\n      }\n\n      .remove {\n        position: relative;\n        opacity: 1;\n        float: right;\n        right: 14px;\n        height: 18px;\n        width: 18px;\n        top: 8px;\n        font-size: 12px;\n        padding: 0;\n        color: $error;\n        &::before {\n          margin: 0;\n        }\n\n        &:hover {\n          background-color: $error !important;\n          text-decoration: none;\n          color: $white;\n        }\n      }\n    }\n\n    .option-selected {\n      margin: 0;\n      width: 5%;\n    }\n\n    input[type='text'] {\n      width: calc(44.5% - 17px);\n      margin: 0 3px;\n      float: none;\n    }\n  }\n\n  .form-field {\n    .form-group {\n      width: 100%;\n      clear: left;\n      float: none;\n    }\n  }\n\n  .col-md-6,\n  .col-md-8 {\n    .form-elements {\n      width: 100%;\n    }\n  }\n\n  .field-options .add-area .add {\n    clear: both;\n  }\n\n  .style-wrap {\n    button {\n      &.selected {\n        border: 1px solid $black;\n        margin-top: 0;\n        margin-right: 1px;\n        box-shadow: 0 0 0 1px $white inset;\n        padding: 1px 5px;\n      }\n    }\n  }\n\n  .form-elements {\n    padding: 10px 5px;\n    background: #f7f7f7;\n    border-radius: 3px;\n    margin: 0;\n    border: 1px solid $input-border-color;\n\n    .input-wrap {\n      width: 81.33333333%;\n      margin-left: 2%;\n      float: left;\n\n      > input[type='checkbox'] {\n        margin-top: 8px;\n      }\n    }\n\n    .btn-group {\n      margin-left: 2%;\n    }\n\n    .add {\n      clear: both;\n    }\n\n    [contenteditable],\n    select[multiple] {\n      height: auto;\n    }\n\n    [contenteditable].form-control {\n      display: inline-block;\n    }\n\n    [contenteditable].form-control,\n    input[type='text'],\n    input[type='number'],\n    input[type='date'],\n    input[type='color'],\n    textarea,\n    select {\n      transition: background 250ms ease-in-out;\n      padding: 6px 12px;\n      border: 1px solid $input-border-color;\n      background-color: $white;\n    }\n\n    @include breakpoint('phone-lrg') {\n      .input-wrap {\n        width: 100%;\n        margin-left: 0;\n        float: none;\n      }\n    }\n\n    input[type='number'] {\n      width: auto;\n    }\n\n    .btn-group {\n      margin-left: 2%;\n    }\n\n    .false-label,\n    label {\n      .col-md-6 &,\n      .col-md-8 & {\n        display: block;\n      }\n\n      &:first-child {\n        width: 16.66666667%;\n        padding-top: 7px;\n        margin-bottom: 0;\n        text-align: right;\n        font-weight: 700;\n        float: left;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        text-transform: capitalize;\n\n        @include breakpoint('phone-lrg') {\n          display: block;\n          width: auto;\n          float: none;\n          text-align: left;\n\n          &.empty-label {\n            display: none;\n          }\n        }\n      }\n\n      &.multiple,\n      &.required-label,\n      &.toggle-label,\n      &.roles-label,\n      &.other-label {\n        text-align: left;\n        float: none;\n        margin-bottom: -3px;\n        font-weight: 400;\n        width: calc(81.3333% - 23px);\n      }\n    }\n\n    input {\n      &.error {\n        border: 1px solid $error;\n      }\n\n      &.fld-maxlength {\n        width: 75px;\n      }\n\n      &.field-error {\n        background: $off-white;\n        border: 1px solid $input-border-color;\n      }\n    }\n\n    label {\n      em {\n        display: block;\n        font-weight: 400;\n        font-size: 0.75em;\n      }\n\n      &.maxlength-label {\n        line-height: 1em;\n      }\n    }\n\n    .available-roles {\n      display: none;\n      padding: 10px;\n      margin: 10px 0;\n      background: darken($white, 10%);\n      box-shadow: inset 0 0 2px 0 $grey-light-30;\n\n      @include breakpoint('phone-lrg') {\n        margin-left: 0;\n      }\n\n      label {\n        font-weight: 400;\n        width: auto;\n        float: none;\n        display: inline;\n      }\n\n      input {\n        display: inline;\n        top: auto;\n      }\n    }\n  }\n}\n\n.autocomplete-field {\n  .sortable-options {\n    .option-selected {\n      display: none;\n    }\n  }\n}\n\n@at-root #{selector-append(\".formbuilder-mobile\", &)} {\n  .field-actions {\n    opacity: 1;\n  }\n}\n\n/*   ------------   Toast Message   ------------   */\n.snackbar {\n  visibility: hidden; /* Hidden by default. Visible on click */\n  min-width: 250px; /* Set a default minimum width */\n  margin-left: -125px; /* Divide value of min-width by 2 */\n  background-color: #333; /* Black background color */\n  color: #fff; /* White text color */\n  text-align: center; /* Centered text */\n  border-radius: 2px; /* Rounded borders */\n  padding: 16px; /* Padding */\n  position: fixed; /* Sit on top of the screen */\n  z-index: 1; /* Add a z-index if needed */\n  left: 50%; /* Center the snackbar */\n  bottom: 30px; /* 30px from the bottom */\n}\n\n.snackbar.show {\n  visibility: visible;\n  -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;\n  animation: fadein 0.5s, fadeout 0.5s 2.5s;\n}\n\n@-webkit-keyframes fadein {\n  from {\n    bottom: 0;\n    opacity: 0;\n  }\n  to {\n    bottom: 30px;\n    opacity: 1;\n  }\n}\n\n@keyframes fadein {\n  from {\n    bottom: 0;\n    opacity: 0;\n  }\n  to {\n    bottom: 30px;\n    opacity: 1;\n  }\n}\n\n@-webkit-keyframes fadeout {\n  from {\n    bottom: 30px;\n    opacity: 1;\n  }\n  to {\n    bottom: 0;\n    opacity: 0;\n  }\n}\n\n@keyframes fadeout {\n  from {\n    bottom: 30px;\n    opacity: 1;\n  }\n  to {\n    bottom: 0;\n    opacity: 0;\n  }\n}\n/*   ------------   END TOOLTIP   ------------   */\n\n.ui-state-highlight {\n  border-radius: 3px;\n  border: 1px dashed #0d99f2;\n  background-color: #e5f5f8;\n  width: 12px;\n}\n\n.moveHighlight {\n  border: 1px dashed #0d99f2 !important;\n  background-color: #e5f5f8 !important;\n}\n\n.currentGridModeFieldHighlight {\n  background-color: #e5f5f8 !important;\n}\n\n.grid-mode-help {\n  background-color: $white;\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n}\n\n.grid-mode-help-row1 {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  max-width: 1px;\n}\n.grid-mode-help-row2 {\n  white-space: nowrap;\n}\n\n.colWithInsertButtons {\n  padding-left: 0 !important;\n  padding-right: 0 !important;\n  flex: 95 1 0% !important;\n}\n\n.rowWrapper {\n  margin-left: 0 !important;\n  margin-right: 0 !important;\n}\n\n.rowWrapper:last-child {\n  flex-grow: 1;\n}\n\n.rowWrapper:not(.tempRowWrapper) {\n  padding-top: 1em;\n  padding-bottom: 1em;\n}\n\n.btnAddControl {\n  border: 0;\n  background-color: unset;\n}\n\n.hoverColumnDropStyle {\n  border: 1px dashed #0d99f2;\n  border-radius: 3px;\n  background-color: #e5f5f8;\n  width: 20px;\n  position: fixed;\n  margin-left: 40px;\n}\n\n.hoverDropStyleInverse {\n  background-color: #0d99f2;\n  border: 1px dashed #e5f5f8;\n  min-height: 20px;\n}\n\n.hoverDropStyleInverse .colWrapper {\n  max-width: calc(100% - 40px);\n}\n\n.stage-wrap > .hoverDropStyleInverse {\n  width: 100%;\n}\n\n.rowWrapper > .hoverDropStyleInverse {\n  min-width: 40px;\n  flex-grow: 1;\n}\n\n.hoverDropStyleInverse:last-child {\n  flex-grow: 1;\n}\n\n.invisibleRowPlaceholder {\n  width: 0 !important;\n  position: fixed !important;\n  left: -100px !important;\n}\n","// Minimal Bootstrap\nbutton,\ninput,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\ninput {\n  line-height: normal;\n}\n\ntextarea {\n  overflow: auto;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.btn-group {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n\n  & > .btn {\n    position: relative;\n    float: left;\n  }\n\n  > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n\n  > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n    border-radius: 0;\n  }\n\n  .btn + .btn,\n  .btn + .btn-group,\n  .btn-group + .btn,\n  .btn-group + .btn-group {\n    margin-left: -1px;\n  }\n\n  > .btn:last-child:not(:first-child),\n  > .dropdown-toggle:not(:first-child),\n  .input-group .form-control:last-child,\n  .input-group-addon:last-child,\n  .input-group-btn:first-child > .btn-group:not(:first-child) > .btn,\n  .input-group-btn:first-child > .btn:not(:first-child),\n  .input-group-btn:last-child > .btn,\n  .input-group-btn:last-child > .btn-group > .btn,\n  .input-group-btn:last-child > .dropdown-toggle {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n\n  > .btn.active,\n  > .btn:active,\n  > .btn:focus,\n  > .btn:hover {\n    z-index: 2;\n  }\n}\n\n.btn {\n  display: inline-block;\n  padding: 6px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 1.42857143;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  touch-action: manipulation;\n  cursor: pointer;\n  user-select: none;\n  background-image: none;\n  border-radius: 4px;\n\n  &.btn-lg {\n    padding: 10px 16px;\n    font-size: 18px;\n    line-height: 1.3333333;\n    border-radius: 6px;\n  }\n\n  &.btn-sm {\n    padding: 5px 10px;\n    font-size: 12px;\n    line-height: 1.5;\n    border-radius: 3px;\n  }\n\n  &.btn-xs {\n    padding: 1px 5px;\n    font-size: 12px;\n    line-height: 1.5;\n    border-radius: 3px;\n  }\n\n  &.active,\n  &.btn-active,\n  &:active {\n    background-image: none;\n  }\n}\n\n.input-group .form-control:last-child,\n.input-group-addon:last-child,\n.input-group-btn:first-child > .btn-group:not(:first-child) > .btn,\n.input-group-btn:first-child > .btn:not(:first-child),\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group > .btn,\n.input-group-btn:last-child > .dropdown-toggle {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.input-group .form-control,\n.input-group-addon,\n.input-group-btn {\n  display: table-cell;\n}\n\n.input-group-lg > .form-control,\n.input-group-lg > .input-group-addon,\n.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n\n  .form-control {\n    position: relative;\n    z-index: 2;\n    float: left;\n    width: 100%;\n    margin-bottom: 0;\n  }\n}\n\n.form-control,\noutput {\n  font-size: 14px;\n  line-height: 1.42857143;\n  display: block;\n}\n\ntextarea.form-control {\n  height: auto;\n}\n\n.form-control {\n  height: 34px;\n  display: block;\n  width: 100%;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  border-radius: 4px;\n\n  &:focus {\n    outline: 0;\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\n  }\n}\n\n.form-group {\n  margin-left: 0px;\n  margin-bottom: 15px;\n}\n\n.btn,\n.form-control {\n  background-image: none;\n}\n\n.pull-right {\n  float: right;\n}\n\n.pull-left {\n  float: left;\n}",".formbuilder-required,\n.required-asterisk {\n  color: $error;\n}\n\n.formbuilder-checkbox-group,\n.formbuilder-radio-group {\n  input[type='checkbox'],\n  input[type='radio'] {\n    margin: 0 4px 0 0;\n  }\n}\n\n.formbuilder-checkbox-inline,\n.formbuilder-radio-inline {\n  margin-right: 8px;\n  display: inline-block;\n  vertical-align: middle;\n  padding-left: 0;\n  label {\n    input[type='text'] {\n      margin-top: 0;\n    }\n  }\n}\n\n.formbuilder-checkbox-inline:first-child,\n.formbuilder-radio-inline:first-child {\n  padding-left: 0;\n}\n\n.formbuilder-autocomplete-list {\n  background-color: $white;\n  display: none;\n  list-style: none;\n  padding: 0;\n  border: 1px solid $grey-light;\n  border-width: 0 1px 1px;\n  position: absolute;\n  z-index: 20;\n  max-height: 200px;\n  overflow-y: auto;\n\n  li {\n    display: none;\n    cursor: default;\n    padding: 5px;\n    margin: 0;\n    transition: background-color 200ms ease-in-out;\n\n    &:hover,\n    &.active-option {\n      background-color: $input-box-shadow-color;\n    }\n  }\n}\n","$black: #000;\n$white: #fff;\n$off-white: #fefefe;\n$grey: #666;\n$grey-dark: #222;\n$grey-light: #ccc;\n$grey-light-30: lighten($grey, 30%);\n$dirt-gray: #23241f;\n\n$success: #08fe00;\n$error: #c10000;\n$remove: #c66865;\n$copy: #6fc665;\n$edit: #65aac6;\n\n$input-border-color: #c5c5c5;\n\n$overlay-color: rgba(0, 0, 0, 0.5);\n$empty-stage-color: rgba(255, 255, 255, 0.25);\n$hidden-field-bgcolor: rgba(255, 255, 255, 0.6);\n$input-box-shadow-color: rgba(0, 0, 0, 0.075);\n\n$primary: #337ab7;\n",".cb-wrap {\n  width: 26%;\n  max-width: fit-content;\n  transition: transform 250ms;\n\n  &.sticky-controls {\n    position: sticky;\n    align-self: flex-start;\n    top: 0;\n  }\n\n  h4 {\n    margin-top: 0;\n    color: $grey;\n  }\n\n  @include breakpoint('phone-lrg') {\n    width: 64px;\n\n    h4 {\n      display: none;\n    }\n  }\n\n  .form-actions {\n    float: right;\n    margin-top: 5px;\n\n    button {\n      border: 0 none;\n    }\n  }\n}\n\n.frmb-control {\n  margin: 0;\n  padding: 0;\n  border-radius: 5px;\n\n  li {\n    cursor: move;\n    list-style: none;\n    margin: 0 0 -1px 0;\n    padding: 10px;\n    text-align: left;\n    background: $white;\n    user-select: none;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    box-shadow: inset 0 0 0 1px $input-border-color;\n\n    .control-icon {\n      width: 16px;\n      height: auto;\n      margin-right: 10px;\n      margin-left: 0.2em;\n      display: inline-block;\n\n      img,\n      svg {\n        max-width: 100%;\n        height: auto;\n      }\n    }\n\n    &:first-child {\n      border-radius: 5px 5px 0 0;\n      margin-top: 0;\n    }\n\n    &:last-child {\n      border-radius: 0 0 5px 5px;\n    }\n\n    &::before {\n      margin-right: 10px;\n      font-size: 16px;\n    }\n\n    &:hover {\n      background-color: darken($white, 5%);\n    }\n\n    &.ui-sortable-helper {\n      border-radius: 5px;\n      transition: box-shadow 250ms;\n      box-shadow: 2px 2px 6px 0 $grey;\n      border: 1px solid $white;\n    }\n\n    &.ui-state-highlight {\n      width: 0;\n      overflow: hidden;\n      padding: 0;\n      margin: 0;\n      border: 0 none;\n    }\n\n    &.moving {\n      opacity: .6;\n    }\n\n    &.formbuilder-separator {\n      background-color: transparent;\n      box-shadow: none;\n      padding: 0;\n      cursor: default;\n\n      hr {\n        margin: 10px 0;\n      }\n    }\n\n    @include breakpoint('phone-lrg') {\n      &::before {\n        font-size: 30px;\n      }\n\n      & {\n        text-overflow: clip;\n      }\n\n      span {\n        visibility: hidden;\n        span {\n          visibility: visible;\n          font-size: 30px;\n          width: auto !important;\n        }\n      }\n    }\n  }\n\n  &.sort-enabled {\n    li.ui-state-highlight {\n      box-shadow: none;\n      height: 0;\n      width: 100%;\n      background: radial-gradient(ellipse at center, rgba(84, 84, 84, 1) 0%, rgba(0, 0, 0, 0) 75%);\n      border: 0 none;\n      clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\n      visibility: visible;\n      overflow: hidden;\n      margin: 1px 0 3px;\n      animation: PLACEHOLDER 250ms forwards;\n    }\n  }\n}\n\n@at-root #{selector-append(\".controls-left\", &)} {\n  .form-actions {\n    float: left;\n  }\n}\n\n@at-root #{selector-append(\".formbuilder-mobile\", &)} {\n  .form-actions {\n    width: 100%;\n\n    button {\n      width: 100%;\n      font-size: .85em !important;\n      display: block !important;\n      border-radius: 0 !important;\n      margin-top: -1px;\n      margin-left: 0 !important;\n\n      &:first-child {\n        border-radius: 5px 5px 0 0 !important;\n        margin-top: 0 !important;\n        border-bottom: 0 none;\n      }\n\n      &:last-child {\n        border-radius: 0 0 5px 5px !important;\n      }\n    }\n  }\n}\n","// TOOLTIP   ------------\n*[tooltip] {\n  position: relative;\n}\n\n*[tooltip]:hover::after {\n  background: rgba(0, 0, 0, 0.9);\n  border-radius: 5px 5px 5px 0;\n  bottom: 23px;\n  color: $white;\n  content: attr(tooltip);\n  padding: 10px 5px;\n  position: absolute;\n  z-index: 98;\n  left: 2px;\n  width: 230px;\n  text-shadow: none;\n  font-size: 12px;\n  line-height: 1.5em;\n  cursor: default;\n}\n\n*[tooltip]:hover::before {\n  border: solid;\n  border-color: $grey-dark transparent;\n  border-width: 6px 6px 0;\n  bottom: 17px;\n  content: '';\n  left: 2px;\n  position: absolute;\n  z-index: 99;\n  cursor: default;\n}\n\n.tooltip-element {\n  visibility: visible;\n  color: $white;\n  background: $black;\n  width: 16px;\n  height: 16px;\n  border-radius: 8px;\n  display: inline-block;\n  text-align: center;\n  line-height: 16px;\n  margin: 0 5px;\n  font-size: 12px;\n  cursor: default;\n}",".kc-toggle {\n  padding-left: 0 !important;\n\n  span {\n    position: relative;\n    width: 48px;\n    height: 24px;\n    background: lighten($grey, 50%);\n    display: inline-block;\n    border-radius: 4px;\n    border: 1px solid lighten($grey, 40%);\n    padding: 2px;\n    overflow: hidden;\n    float: left;\n    margin-right: 5px;\n    will-change: transform;\n\n    &::after,\n    &::before {\n      position: absolute;\n      display: inline-block;\n      top: 0;\n    }\n\n    &::after {\n      position: relative;\n      content: '';\n      width: 50%;\n      height: 100%;\n      left: 0;\n      border-radius: 3px;\n      background: linear-gradient(to bottom, lighten($grey-light-30, 30%) 0%, $grey-light 100%);\n      border: 1px solid lighten($grey, 20%);\n      transition: transform 100ms;\n      transform: translateX(0);\n    }\n\n    &::before {\n      border-radius: 4px;\n      top: 2px;\n      left: 2px;\n      content: '';\n      width: calc(100% - 4px);\n      height: 18px;\n      box-shadow: 0 0 1px 1px lighten($grey, 30%) inset;\n      background-color: transparent;\n    }\n  }\n\n  input {\n    height: 0;\n    overflow: hidden;\n    width: 0;\n    opacity: 0;\n    pointer-events: none;\n    margin: 0;\n\n    &:checked + span {\n      &::after {\n        transform: translateX(100%);\n      }\n\n      &::before {\n        background-color: $copy;\n      }\n    }\n  }\n}\n",".form-builder-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: $overlay-color;\n  display: none;\n  z-index: 10;\n\n  &.visible {\n    display: block;\n  }\n}\n\n.form-builder-dialog {\n  position: absolute;\n  border-radius: 5px;\n  background: $white;\n  z-index: 20;\n  transform: translate(-50%, -50%);\n  top: 0;\n  left: 0;\n  padding: 10px;\n  box-shadow: 0 3px 10px $black;\n  min-width: 166px;\n  max-height: 80%;\n  overflow-y: scroll;\n\n  h3 {\n    margin-top: 0;\n  }\n\n  &.data-dialog {\n    width: 65%;\n    background-color: $dirt-gray;\n\n    pre {\n      background: none;\n      border: 0 none;\n      box-shadow: none;\n      margin: 0;\n      color: darken($white, 5%);\n    }\n  }\n\n  &.positioned {\n    transform: translate(-50%, -100%);\n\n    .button-wrap {\n      &::before {\n        content: '';\n        width: 0;\n        height: 0;\n        border-left: 15px solid transparent;\n        border-right: 15px solid transparent;\n        border-top: 10px solid $white;\n        position: absolute;\n        left: 50%;\n        top: 100%;\n        transform: translate(-50%, 10px);\n      }\n    }\n  }\n\n  .button-wrap {\n    position: relative;\n    margin-top: 10px;\n    text-align: right;\n    clear: both;\n\n    .btn {\n      margin-left: 10px;\n    }\n  }\n}"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/***/ (function(module) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/getUrl.js":
/*!*********************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/getUrl.js ***!
  \*********************************************************/
/***/ (function(module) {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }
  if (!url) {
    return url;
  }
  url = String(url.__esModule ? url.default : url);

  // If url is already wrapped in quotes, remove them
  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }
  if (options.hash) {
    url += options.hash;
  }

  // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls
  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }
  return url;
};

/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!*************************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \*************************************************************/
/***/ (function(module) {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "../node_modules/lodash/_Symbol.js":
/*!*****************************************!*\
  !*** ../node_modules/lodash/_Symbol.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "../node_modules/lodash/_baseGetTag.js":
/*!*********************************************!*\
  !*** ../node_modules/lodash/_baseGetTag.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "../node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "../node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "../node_modules/lodash/_baseTrim.js":
/*!*******************************************!*\
  !*** ../node_modules/lodash/_baseTrim.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var trimmedEndIndex = __webpack_require__(/*! ./_trimmedEndIndex */ "../node_modules/lodash/_trimmedEndIndex.js");

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;


/***/ }),

/***/ "../node_modules/lodash/_freeGlobal.js":
/*!*********************************************!*\
  !*** ../node_modules/lodash/_freeGlobal.js ***!
  \*********************************************/
/***/ (function(module) {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;


/***/ }),

/***/ "../node_modules/lodash/_getRawTag.js":
/*!********************************************!*\
  !*** ../node_modules/lodash/_getRawTag.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "../node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "../node_modules/lodash/_objectToString.js":
/*!*************************************************!*\
  !*** ../node_modules/lodash/_objectToString.js ***!
  \*************************************************/
/***/ (function(module) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "../node_modules/lodash/_root.js":
/*!***************************************!*\
  !*** ../node_modules/lodash/_root.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "../node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "../node_modules/lodash/_trimmedEndIndex.js":
/*!**************************************************!*\
  !*** ../node_modules/lodash/_trimmedEndIndex.js ***!
  \**************************************************/
/***/ (function(module) {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;


/***/ }),

/***/ "../node_modules/lodash/debounce.js":
/*!******************************************!*\
  !*** ../node_modules/lodash/debounce.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "../node_modules/lodash/isObject.js"),
    now = __webpack_require__(/*! ./now */ "../node_modules/lodash/now.js"),
    toNumber = __webpack_require__(/*! ./toNumber */ "../node_modules/lodash/toNumber.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ "../node_modules/lodash/isObject.js":
/*!******************************************!*\
  !*** ../node_modules/lodash/isObject.js ***!
  \******************************************/
/***/ (function(module) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "../node_modules/lodash/isObjectLike.js":
/*!**********************************************!*\
  !*** ../node_modules/lodash/isObjectLike.js ***!
  \**********************************************/
/***/ (function(module) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "../node_modules/lodash/isSymbol.js":
/*!******************************************!*\
  !*** ../node_modules/lodash/isSymbol.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "../node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "../node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "../node_modules/lodash/now.js":
/*!*************************************!*\
  !*** ../node_modules/lodash/now.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "../node_modules/lodash/_root.js");

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ "../node_modules/lodash/throttle.js":
/*!******************************************!*\
  !*** ../node_modules/lodash/throttle.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var debounce = __webpack_require__(/*! ./debounce */ "../node_modules/lodash/debounce.js"),
    isObject = __webpack_require__(/*! ./isObject */ "../node_modules/lodash/isObject.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;


/***/ }),

/***/ "../node_modules/lodash/toNumber.js":
/*!******************************************!*\
  !*** ../node_modules/lodash/toNumber.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseTrim = __webpack_require__(/*! ./_baseTrim */ "../node_modules/lodash/_baseTrim.js"),
    isObject = __webpack_require__(/*! ./isObject */ "../node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "../node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "../node_modules/mi18n/dist/mi18n.min.js":
/*!***********************************************!*\
  !*** ../node_modules/mi18n/dist/mi18n.min.js ***!
  \***********************************************/
/***/ (function(module) {

/*!
 * mi18n - https://github.com/Draggable/mi18n
 * Version: 0.4.7
 * Author: Kevin Chappell <kevin.b.chappell@gmail.com> (http://kevin-chappell.com)
 */
module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(2),i=n(10),s=Object.prototype.toString;function a(e){return"[object Array]"===s.call(e)}function u(e){return null!==e&&"object"===(void 0===e?"undefined":r(e))}function c(e){return"[object Function]"===s.call(e)}function f(e,t){if(null!==e&&void 0!==e)if("object"!==(void 0===e?"undefined":r(e))&&(e=[e]),a(e))for(var n=0,o=e.length;n<o;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function e(){var t={};function n(n,o){"object"===r(t[o])&&"object"===(void 0===n?"undefined":r(n))?t[o]=e(t[o],n):t[o]=n}for(var o=0,i=arguments.length;o<i;o++)f(arguments[o],n);return t},extend:function(e,t,n){return f(t,function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(13),i={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a={adapter:function(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(3):void 0!==t&&(e=n(3)),e}(),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],function(e){a.headers[e]={}}),r.forEach(["post","put","patch"],function(e){a.headers[e]=r.merge(i)}),e.exports=a}).call(this,n(12))},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0),o=n(14),i=n(16),s=n(17),a=n(18),u=n(4),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(19);e.exports=function(e){return new Promise(function(t,f){var l=e.data,p=e.headers;r.isFormData(l)&&delete p["Content-Type"];var d=new XMLHttpRequest,h="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in d||a(e.url)||(d=new window.XDomainRequest,h="onload",g=!0,d.onprogress=function(){},d.ontimeout=function(){}),e.auth){var m=e.auth.username||"",y=e.auth.password||"";p.Authorization="Basic "+c(m+":"+y)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d[h]=function(){if(d&&(4===d.readyState||g)&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?s(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:1223===d.status?204:d.status,statusText:1223===d.status?"No Content":d.statusText,headers:n,config:e,request:d};o(t,f,r),d=null}},d.onerror=function(){f(u("Network Error",e,null,d)),d=null},d.ontimeout=function(){f(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=n(20),w=(e.withCredentials||a(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;w&&(p[e.xsrfHeaderName]=w)}if("setRequestHeader"in d&&r.forEach(p,function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)}),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){d&&(d.abort(),f(e),d=null)}),void 0===l&&(l=null),d.send(l)})}},function(e,t,n){"use strict";var r=n(15);e.exports=function(e,t,n,o,i){var s=new Error(e);return r(s,t,n,o,i)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";t.__esModule=!0,t.I18N=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(8),s={extension:".lang",location:"assets/lang/",langs:["en-US"],locale:"en-US",override:{}},a=t.I18N=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.langs=Object.create(null),this.loaded=[],this.processConfig(t)}return e.prototype.processConfig=function(e){var t=this,n=Object.assign({},s,e),r=n.location,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(n,["location"]),i=r.replace(/\/?$/,"/");this.config=Object.assign({},{location:i},o);var a=this.config,u=a.override,c=a.preloaded,f=void 0===c?{}:c,l=Object.entries(this.langs).concat(Object.entries(u||f));this.langs=l.reduce(function(e,n){var r=n[0],o=n[1];return e[r]=t.applyLanguage.call(t,r,o),e},{}),this.locale=this.config.locale||this.config.langs[0]},e.prototype.init=function(e){return this.processConfig.call(this,Object.assign({},this.config,e)),this.setCurrent(this.locale)},e.prototype.addLanguage=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};t="string"==typeof t?this.processFile.call(this,t):t,this.applyLanguage.call(this,e,t),this.config.langs.push("locale")},e.prototype.getValue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.locale;return this.langs[t]&&this.langs[t][e]||this.getFallbackValue(e)},e.prototype.getFallbackValue=function(e){var t=Object.values(this.langs).find(function(t){return t[e]});return t&&t[e]},e.prototype.makeSafe=function(e){var t={"{":"\\{","}":"\\}","|":"\\|"};return e=e.replace(/\{|\}|\|/g,function(e){return t[e]}),new RegExp(e,"g")},e.prototype.put=function(e,t){return this.current[e]=t},e.prototype.get=function(e,t){var n=this.getValue(e);if(n){var o=n.match(/\{[^}]+?\}/g),i=void 0;if(t&&o)if("object"===(void 0===t?"undefined":r(t)))for(var s=0;s<o.length;s++)i=o[s].substring(1,o[s].length-1),n=n.replace(this.makeSafe(o[s]),t[i]||"");else n=n.replace(/\{[^}]+?\}/g,t);return n}},e.prototype.fromFile=function(e){for(var t,n=e.split("\n"),r={},o=0;o<n.length;o++)(t=n[o].match(/^(.+?) *?= *?([^\n]+)/))&&(r[t[1]]=t[2].replace(/^\s+|\s+$/,""));return r},e.prototype.processFile=function(e){return this.fromFile(e.replace(/\n\n/g,"\n"))},e.prototype.loadLang=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this;return new Promise(function(r,o){if(-1!==n.loaded.indexOf(e)&&t)return n.applyLanguage.call(n,n.langs[e]),r(n.langs[e]);var s=[n.config.location,e,n.config.extension].join("");return(0,i.get)(s).then(function(t){var o=t.data,i=n.processFile(o);return n.applyLanguage.call(n,e,i),n.loaded.push(e),r(n.langs[e])}).catch(function(){var t=n.applyLanguage.call(n,e);r(t)})})},e.prototype.applyLanguage=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.config.override[e]||{},r=this.langs[e]||{};return this.langs[e]=Object.assign({},r,t,n),this.langs[e]},e.prototype.setCurrent=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"en-US";return this.loadLang(t).then(function(){return e.locale=t,e.current=e.langs[t],e.current})},o(e,[{key:"getLangs",get:function(){return this.config.langs}}]),e}();t.default=new a},function(e,t,n){"use strict";e.exports=n(9)},function(e,t,n){"use strict";var r=n(0),o=n(2),i=n(11),s=n(1);function a(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=a(s);u.Axios=i,u.create=function(e){return a(r.merge(s,e))},u.Cancel=n(6),u.CancelToken=n(26),u.isCancel=n(5),u.all=function(e){return Promise.all(e)},u.spread=n(27),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(1),o=n(0),i=n(21),s=n(22);function a(e){this.defaults=e,this.interceptors={request:new i,response:new i}}a.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){a.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){a.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=a},function(e,t,n){"use strict";var r,o,i=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var c,f=[],l=!1,p=-1;function d(){l&&c&&(l=!1,c.length?f=c.concat(f):p=-1,f.length&&h())}function h(){if(!l){var e=u(d);l=!0;for(var t=f.length;t;){for(c=f,f=[];++p<t;)c&&c[p].run();p=-1,t=f.length}c=null,l=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];f.push(new g(e,t)),1!==f.length||l||u(h)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var s=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))}))}),i=s.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,s={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}}),s):s}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";function r(){this.message="String contains an invalid character"}r.prototype=new Error,r.prototype.code=5,r.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,o=String(e),i="",s=0,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";o.charAt(0|s)||(a="=",s%1);i+=a.charAt(63&t>>8-s%1*8)){if((n=o.charCodeAt(s+=.75))>255)throw new r;t=t<<8|n}return i}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(0),o=n(23),i=n(5),s=n(1),a=n(24),u=n(25);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||s.adapter)(e).then(function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(6);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJtaTE4bi5taW4uanMiLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../node_modules/storage-available/storage-available.js":
/*!**************************************************************!*\
  !*** ../node_modules/storage-available/storage-available.js ***!
  \**************************************************************/
/***/ (function(module) {


module.exports = function storageAvailable(type) {
	try {
		var storage = window[type],
			x = '__storage_test__';
		storage.setItem(x, x);
		storage.removeItem(x);
		return true;
	}
	catch(e) {
		return false;
	}
}


/***/ }),

/***/ "../src/sass/form-builder.scss":
/*!*************************************!*\
  !*** ../src/sass/form-builder.scss ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var api = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[3]!./form-builder.scss */ "../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[3]!../src/sass/form-builder.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.id, content, '']];
            }

var options = {"attributes":{"class":"formBuilder-injected-style"}};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ "../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \*****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "data:font/woff;base64,":

  !*** data:font/woff;base64, ***!

/***/ (function(module) {

"use strict";
module.exports = "data:font/woff;base64,";

/***/ }),

/***/ "data:image/svg+xml; utf8, <svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-list-nested%27 viewBox=%270 0 16 16%27><path fill-rule=%27evenodd%27 d=%27M4.5 11.5A.5.5 0 0 1 5 11h10a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 1 3h10a.5.5 0 0 1 0 1H1a.5.5 0 0 1-.5-.5z%27/></svg>":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** data:image/svg+xml; utf8, <svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-list-nested%27 viewBox=%270 0 16 16%27><path fill-rule=%27evenodd%27 d=%27M4.5 11.5A.5.5 0 0 1 5 11h10a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 1 3h10a.5.5 0 0 1 0 1H1a.5.5 0 0 1-.5-.5z%27/></svg> ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module) {

"use strict";
module.exports = "data:image/svg+xml; utf8, <svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-list-nested%27 viewBox=%270 0 16 16%27><path fill-rule=%27evenodd%27 d=%27M4.5 11.5A.5.5 0 0 1 5 11h10a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 1 3h10a.5.5 0 0 1 0 1H1a.5.5 0 0 1-.5-.5z%27/></svg>";

/***/ }),

/***/ "data:image/svg+xml; utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-plus-circle%27 viewBox=%270 0 16 16%27><path d=%27M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z%27/><path d=%27M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z%27/></svg>":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** data:image/svg+xml; utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-plus-circle%27 viewBox=%270 0 16 16%27><path d=%27M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z%27/><path d=%27M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z%27/></svg> ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module) {

"use strict";
module.exports = "data:image/svg+xml; utf8,<svg xmlns=%27http://www.w3.org/2000/svg%27 width=%2716%27 height=%2716%27 fill=%27currentColor%27 class=%27bi bi-plus-circle%27 viewBox=%270 0 16 16%27><path d=%27M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z%27/><path d=%27M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z%27/></svg>";

/***/ }),

/***/ "../src/fonts/config.json":
/*!********************************!*\
  !*** ../src/fonts/config.json ***!
  \********************************/
/***/ (function(module) {

"use strict";
module.exports = JSON.parse('{"name":"formbuilder-icons","css_prefix_text":"formbuilder-icon-","css_use_suffix":false,"hinting":true,"units_per_em":1000,"ascent":850,"copyright":"Kevin Chappell","glyphs":[{"uid":"a113ca13e1dc6e9426ab05a6b9afb709","css":"autocomplete","code":59392,"src":"custom_icons","selected":true,"svg":{"path":"M375 312.5H437.5V375H375V312.5ZM250 250H187.5V312.5H250V250ZM375 250H312.5V312.5H375V250ZM125 312.5V375H187.5V312.5H125ZM187.5 437.5H250V375H187.5V437.5ZM312.5 437.5H375V375H312.5V437.5ZM250 312.5V375H312.5V312.5H250ZM125 875H187.5V812.5H125V875ZM250 875H312.5V812.5H250V875ZM375 875H437.5V812.5H375V875ZM562.5 812.5H500V875H562.5V812.5ZM1000 218.8V468.8C1000 518.8 956.3 562.5 906.3 562.5H875V750 937.5C875 975 850 1000 812.5 1000H62.5C25 1000 0 975 0 937.5V218.8C0 168.8 43.8 125 93.8 125H281.3 500V93.8 62.5H437.5 375V31.3 0H531.3 687.5V31.3 62.5H625 562.5V93.8 125H750 906.3C956.3 125 1000 168.8 1000 218.8ZM812.5 750H437.5 62.5V937.5H812.5V750ZM187.5 687.5V625H125V687.5H187.5ZM312.5 687.5V625H250V687.5H312.5ZM937.5 218.8C937.5 200 925 187.5 906.3 187.5H562.5V343.8 500H531.3 500V468.8 437.5H437.5V375H500V343.8 312.5H437.5V250H500V218.8 187.5H93.8C75 187.5 62.5 200 62.5 218.8V468.8C62.5 487.5 75 500 93.8 500H500V562.5H375V593.8 625H531.3 687.5V593.8 562.5H562.5V500H906.3C925 500 937.5 487.5 937.5 468.8V218.8Z","width":1000},"search":["autocomplete"]},{"uid":"60d3802098875c9d50eb2846aa852206","css":"checkbox","code":59394,"src":"custom_icons","selected":true,"svg":{"path":"M843.8 312.5V812.5C843.8 862.5 800 906.3 750 906.3H187.5C137.5 906.3 93.8 862.5 93.8 812.5V250C93.8 200 137.5 156.3 187.5 156.3H750C793.8 156.3 831.3 187.5 843.8 231.3L993.8 143.8 843.8 312.5ZM781.3 387.5L481.3 750 175 343.8 481.3 443.8 781.3 262.5V250C781.3 231.3 768.8 218.8 750 218.8H187.5C168.8 218.8 156.3 231.3 156.3 250V812.5C156.3 831.3 168.8 843.8 187.5 843.8H750C768.8 843.8 781.3 831.3 781.3 812.5V387.5Z","width":1000},"search":["checkbox"]},{"uid":"63a50266513c881511c22fcdb2122493","css":"checkbox-group","code":59395,"src":"custom_icons","selected":true,"svg":{"path":"M0 62.5H1000V0H0V62.5ZM0 187.5H1000V125H0V187.5ZM375 312.5V375H937.5V312.5H375ZM937.5 875V812.5H375V875H937.5ZM375 625H937.5V562.5H375V625ZM250 750L93.8 843.8 0 812.5 93.8 937.5 250 750ZM250 500L93.8 593.8 0 562.5 93.8 687.5 250 500ZM250 250L93.8 343.8 0 312.5 93.8 437.5 250 250Z","width":1000},"search":["checkbox-group"]},{"uid":"9f39a1f82b1cbb01f975506835a94c87","css":"radio-group","code":59396,"src":"custom_icons","selected":true,"svg":{"path":"M0 62.5H1000V0H0V62.5ZM0 187.5H1000V125H0V187.5ZM312.5 375H937.5V312.5H312.5V375ZM937.5 562.5H312.5V625H937.5V562.5ZM937.5 875V812.5H312.5V875H937.5ZM93.8 437.5C43.8 437.5 0 393.8 0 343.8S43.8 250 93.8 250 187.5 293.8 187.5 343.8 143.8 437.5 93.8 437.5ZM93.8 312.5C75 312.5 62.5 325 62.5 343.8S75 375 93.8 375 125 362.5 125 343.8 112.5 312.5 93.8 312.5ZM93.8 693.8C43.8 693.8 0 650 0 600S43.8 506.3 93.8 506.3 187.5 543.8 187.5 600 143.8 693.8 93.8 693.8ZM93.8 568.8C75 568.8 62.5 581.3 62.5 600S75 631.3 93.8 631.3 125 612.5 125 600 112.5 568.8 93.8 568.8ZM93.8 937.5C43.8 937.5 0 893.8 0 843.8S43.8 750 93.8 750 187.5 793.8 187.5 843.8 143.8 937.5 93.8 937.5ZM93.8 812.5C75 812.5 62.5 825 62.5 843.8S75 875 93.8 875 125 862.5 125 843.8 112.5 812.5 93.8 812.5Z","width":1000},"search":["radio-group"]},{"uid":"4cfbf7acfb7547f67749103ef0d58f05","css":"rich-text","code":59397,"src":"custom_icons","selected":true,"svg":{"path":"M937.5 62.5H62.5C25 62.5 0 87.5 0 125V875C0 912.5 25 937.5 62.5 937.5H937.5C975 937.5 1000 912.5 1000 875V125C1000 87.5 975 62.5 937.5 62.5ZM62.5 193.8H112.5V212.5H62.5V193.8ZM62.5 225H112.5V243.8H62.5V225ZM937.5 875H62.5V318.8H937.5V875ZM937.5 306.3H62.5V287.5H937.5V306.3ZM937.5 275H62.5V256.3H112.5V268.8H206.3V256.3H287.5V268.8H375V256.3H456.3V268.8H550V256.3H625V268.8H718.8V256.3H800V268.8H893.8V256.3H937.5V275ZM281.3 225V243.8H206.3V225H281.3ZM206.3 212.5V193.8H287.5V212.5H206.3ZM456.3 225V243.8H375V225H456.3ZM375 212.5V193.8H456.3V212.5H375ZM625 225V243.8H550V225H625ZM550 212.5V193.8H625V212.5H550ZM800 225V243.8H718.8V225H800ZM718.8 212.5V193.8H800V212.5H718.8ZM937.5 243.8H887.5V225H937.5V243.8ZM937.5 212.5H887.5V193.8H937.5V212.5ZM937.5 181.3H887.5V175H793.8V187.5H712.5V175H625V187.5H550V175H456.3V187.5H375V175H281.3V187.5H206.3V175H112.5V187.5H62.5V162.5H937.5V181.3ZM937.5 150H62.5V131.3H937.5V150ZM187.5 750V687.5H812.5V750H187.5ZM812.5 625H187.5V562.5H812.5V625ZM687.5 500H187.5V437.5H687.5V500Z","width":1000},"search":["rich-text"]},{"uid":"27d742cd4497db0344d7d72495c51f17","css":"select","code":59398,"src":"custom_icons","selected":true,"svg":{"path":"M0 0V875H0C0 912.5 25 937.5 62.5 937.5H687.5C725 937.5 750 912.5 750 875H750V312.5H1000V0H0ZM62.5 62.5H687.5V250H62.5V62.5ZM62.5 437.5H687.5V625H62.5V437.5ZM62.5 875V687.5H687.5V875H62.5ZM937.5 250H750V62.5H937.5V250ZM125 125H187.5V187.5H125V125ZM125 750H187.5V812.5H125V750ZM250 750H312.5V812.5H250V750ZM375 750H437.5V812.5H375V750ZM562.5 750V812.5H500V750H562.5ZM125 500H187.5V562.5H125V500ZM250 500H312.5V562.5H250V500ZM375 500H437.5V562.5H375V500ZM843.8 193.8L781.3 125H900L843.8 193.8ZM125 375V312.5H187.5V375H125L125 375ZM250 375V312.5H312.5V375H250L250 375Z","width":1000},"search":["select"]},{"uid":"b77875e20d0c91ac65379ed6723bcf67","css":"textarea","code":59399,"src":"custom_icons","selected":true,"svg":{"path":"M187.5 687.5V625H687.5V687.5H187.5L187.5 687.5ZM187.5 437.5H812.5V375H187.5V437.5L187.5 437.5ZM187.5 500V562.5H812.5V500H187.5L187.5 500ZM812.5 250H187.5V312.5H812.5V250L812.5 250ZM1000 875V125C1000 87.5 975 62.5 937.5 62.5H62.5C25 62.5 0 87.5 0 125V875C0 912.5 25 937.5 62.5 937.5H937.5C975 937.5 1000 912.5 1000 875ZM937.5 125V875H62.5V125H937.5Z","width":1000},"search":["text-area"]},{"uid":"206b010525b2181ffa0ad26f52b1762a","css":"text","code":59400,"src":"custom_icons","selected":true,"svg":{"path":"M937.5 250H281.3V187.5H375V125H281.3 218.8 125V187.5H218.8V250H62.5C25 250 0 281.3 0 312.5V687.5C0 725 25 750 62.5 750H218.8V812.5H125V875H375V812.5H281.3V750H937.5C975 750 1000 725 1000 687.5V312.5C1000 281.3 975 250 937.5 250ZM62.5 687.5V312.5H218.8V687.5H62.5ZM937.5 687.5H281.3V312.5H937.5V687.5Z","width":1000},"search":["text-input"]},{"uid":"c34ccd41e97f9d3639a660841e3475ab","css":"hidden","code":59403,"src":"custom_icons","selected":true,"svg":{"path":"M62.5 312.5L125 312.5 125 250 62.5 250ZM187.5 312.5L250 312.5 250 250 187.5 250ZM312.5 312.5L375 312.5 375 250 312.5 250ZM437.5 312.5L500 312.5 500 250 437.5 250ZM562.5 312.5L625 312.5 625 250 562.5 250ZM687.5 312.5L750 312.5 750 250 687.5 250ZM812.5 312.5L875 312.5 875 250 812.5 250ZM0 375L62.5 375 62.5 312.5 0 312.5ZM937.5 437.5L1000 437.5 1000 375 937.5 375ZM0 500L62.5 500 62.5 437.5 0 437.5ZM937.5 562.5L1000 562.5 1000 500 937.5 500ZM0 625L62.5 625 62.5 562.5 0 562.5ZM937.5 687.5L1000 687.5 1000 625 937.5 625ZM125 750L187.5 750 187.5 687.5 125 687.5ZM250 750L312.5 750 312.5 687.5 250 687.5ZM375 750L437.5 750 437.5 687.5 375 687.5ZM500 750L562.5 750 562.5 687.5 500 687.5ZM625 750L687.5 750 687.5 687.5 625 687.5ZM750 750L812.5 750 812.5 687.5 750 687.5ZM875 750L937.5 750 937.5 687.5 875 687.5ZM937.5 312.5L1000 312.5 1000 250 937.5 250ZM0 750L62.5 750 62.5 687.5 0 687.5Z","width":1000},"search":["hidden-input"]},{"uid":"0474eb3bb737aa8a306ebeffd2155839","css":"button","code":59405,"src":"custom_icons","selected":true,"svg":{"path":"M61.6 312.5L936.6 312.5 936.6 250 61.6 250ZM0 687.5L62.5 687.5 62.5 312.5 0 312.5ZM62.5 750L937.5 750 937.5 687.5 62.5 687.5ZM937.5 687.5L1000 687.5 1000 312.5 937.5 312.5ZM385.6 406.8Q352.1 406.8 332.2 431.9 312.5 456.9 312.5 500.1 312.5 543.1 332.2 568.1 352.1 593.2 385.6 593.2 419.2 593.2 438.7 568.1 458.4 543.1 458.4 500.1 458.4 456.9 438.7 431.9 419.2 406.8 385.6 406.8ZM385.6 381.8Q433.5 381.8 462.2 414 490.9 446.1 490.9 500.1 490.9 553.9 462.2 586.1 433.5 618.2 385.6 618.2 337.6 618.2 308.7 586.1 280 554.1 280 500.1 280 446.1 308.7 414 337.6 381.8 385.6 381.8ZM539.1 385.9L570 385.9 570 482.2 672.2 385.9 711.9 385.9 598.8 492.1 720 613.8 679.4 613.8 570 504 570 613.8 539.1 613.8 539.1 385.9Z","width":1000},"search":["button-input"]},{"uid":"d35a1d35efeb784d1dc9ac18b9b6c2b6","css":"pencil","code":59401,"src":"fontawesome"},{"uid":"f6f11c17a7d16ee01cf0a46b757652af","css":"file","code":59402,"src":"custom_icons","selected":true,"svg":{"path":"M468.8 687.5H0V937.5H937.5V687.5H468.8ZM875 812.5H750V750H875V812.5ZM218.8 312.5L468.8 62.5 718.8 312.5H562.5V625H375V312.5Z","width":1000},"search":["file-input"]},{"uid":"0c708edd8fae2376b3370aa56d40cf9e","css":"header","code":59407,"src":"fontawesome"},{"uid":"c5845105a87df2ee1999826d90622f6a","css":"paragraph","code":59408,"src":"fontawesome"},{"uid":"5c54dda49adb1444c47944fb9550569e","css":"number","code":59409,"src":"custom_icons","selected":true,"svg":{"path":"M875 375V250H718.6L749.9 0H624.9L593.6 250H343.7L374.9 0H249.9L218.7 250H0V375H203.1L171.9 625H0V750H156.3L125 1000H250L281.3 750H531.2L499.9 1000H625L656.3 750H875V625H671.9L703 375H875ZM546.8 625H296.9L328.1 375H578L546.8 625Z","width":875},"search":["number"]},{"uid":"531bc468eecbb8867d822f1c11f1e039","css":"date","code":59393,"src":"fontawesome"},{"uid":"6846d155ad5bda456569df81f3057faa","css":"copy","code":62029,"src":"fontawesome"},{"uid":"06301c50d89b5d3e651bd07ebd6d7de7","css":"cancel","code":59404,"src":"mfglabs"},{"uid":"720f98e7580b7987c8dc542513d1d440","css":"sort-higher","code":61814,"src":"fontawesome"},{"uid":"f06941dfcb90dc24b987d810898c4310","css":"sort-lower","code":61813,"src":"fontawesome"}]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"dist/form-builder": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	!function() {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!*********************************!*\
  !*** ../src/js/form-builder.js ***!
  \*********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sass_form_builder_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sass/form-builder.scss */ "../src/sass/form-builder.scss");
/* harmony import */ var _sass_form_builder_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_sass_form_builder_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/throttle */ "../node_modules/lodash/throttle.js");
/* harmony import */ var lodash_throttle__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_throttle__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dom */ "../src/js/dom.js");
/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data */ "../src/js/data.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mi18n */ "../node_modules/mi18n/dist/mi18n.min.js");
/* harmony import */ var mi18n__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(mi18n__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./events */ "../src/js/events.js");
/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./layout */ "../src/js/layout.js");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers */ "../src/js/helpers.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./config */ "../src/js/config.js");
/* harmony import */ var _controls__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./controls */ "../src/js/controls.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils */ "../src/js/utils.js");
/* harmony import */ var _sanitizer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sanitizer */ "../src/js/sanitizer.js");
/* harmony import */ var _fonts_config_json__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../fonts/config.json */ "../src/fonts/config.json");
const _excluded = ["class", "className"],
  _excluded2 = ["multiple", "options", "label", "value", "class", "className"],
  _excluded3 = ["class", "className"],
  _excluded4 = ["tag", "content"],
  _excluded5 = ["i18n"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }














const css_prefix_text = _fonts_config_json__WEBPACK_IMPORTED_MODULE_12__.css_prefix_text;
const {
  rowWrapperClass,
  colWrapperClass,
  tmpRowPlaceholderClass,
  invisibleRowPlaceholderClass
} = _config__WEBPACK_IMPORTED_MODULE_8__.gridClassNames;
const {
  rowWrapperClassSelector,
  colWrapperClassSelector,
  tmpRowPlaceholderClassSelector,
  invisibleRowPlaceholderClassSelector
} = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.generateSelectorClassNames)(_config__WEBPACK_IMPORTED_MODULE_8__.gridClassNames);
function FormBuilder(opts, element, $) {
  const formBuilder = this;
  const i18n = (mi18n__WEBPACK_IMPORTED_MODULE_4___default().current);
  const formID = `frmb-${Date.now()}`;
  const data = new _data__WEBPACK_IMPORTED_MODULE_3__.Data(formID);
  const d = new _dom__WEBPACK_IMPORTED_MODULE_2__["default"](formID);
  const config = _config__WEBPACK_IMPORTED_MODULE_8__.instanceConfig[formID] = {};
  let formRows = [];
  formBuilder.preserveTempContainers = [];
  formBuilder.rowWrapperClassSelector = rowWrapperClassSelector;
  formBuilder.colWrapperClassSelector = colWrapperClassSelector;
  formBuilder.colWrapperClass = colWrapperClass;
  formBuilder.fieldSelector = opts.enableEnhancedBootstrapGrid ? rowWrapperClassSelector : _config__WEBPACK_IMPORTED_MODULE_8__.defaultFieldSelector;
  (0,_sanitizer__WEBPACK_IMPORTED_MODULE_11__.setSanitizerConfig)(opts.sanitizerOptions);
  if ($(element).closest('form').length) {
    opts.notify.warning('WARNING: FormBuilder does not support being contained with a <form> Element');
  }
  if (!opts.layout) {
    opts.layout = _layout__WEBPACK_IMPORTED_MODULE_6__["default"];
  }
  const layoutEngine = new opts.layout(opts.layoutTemplates, true, opts.disableHTMLLabels, opts.controlConfig);
  const h = new _helpers__WEBPACK_IMPORTED_MODULE_7__["default"](formID, layoutEngine, formBuilder);
  const m = _utils__WEBPACK_IMPORTED_MODULE_10__.markup;
  opts = h.processOptions(opts);
  h.editorUI(formID, opts.controlPosition);
  data.formID = formID;
  data.lastID = `${data.formID}-fld-0`;
  const controls = new _controls__WEBPACK_IMPORTED_MODULE_9__["default"](opts, d);
  formBuilder.controls = controls;
  const subtypes = config.subtypes = h.processSubtypes(opts.subtypes);
  const $stage = $(d.stage);
  const $cbUL = $(d.controls);
  let insertingNewControl = false;
  let insertTargetIsRow = false;
  let insertTargetIsColumn = false;
  let $targetInsertWrapper;
  let cloneControls;
  function enhancedBootstrapEnabled() {
    return !!opts.enableEnhancedBootstrapGrid;
  }
  $stage.sortable({
    cursor: 'move',
    opacity: 0.9,
    revert: 150,
    beforeStop: (evt, ui) => h.beforeStop.call(h, evt, ui),
    start: (evt, ui) => h.startMoving.call(h, evt, ui),
    stop: (evt, ui) => h.stopMoving.call(h, evt, ui),
    change: function (event, ui) {
      if (opts.prepend && ui.placeholder.index() < 1) {
        $('li.form-prepend').after(ui.placeholder);
      } else if (opts.append && ui.placeholder.index() >= $stage.children('li').length - 1) {
        $('li.form-append').before(ui.placeholder);
      }
    },
    cancel: ['input', 'select', 'textarea', '.disabled-field', '.form-elements', '.btn', 'button', '.is-locked'].join(', '),
    placeholder: 'frmb-placeholder hoverDropStyleInverse'
  });
  if (!opts.allowStageSort) {
    $stage.sortable('disable');
  }
  $cbUL.sortable({
    helper: 'clone',
    opacity: 0.9,
    connectWith: `#${formID}, ${rowWrapperClassSelector}`,
    cancel: '.formbuilder-separator',
    cursor: 'move',
    scroll: false,
    placeholder: 'hoverDropStyleInverse ui-state-highlight',
    tolerance: 'pointer',
    start: (evt, ui) => h.startMoving.call(h, evt, ui),
    stop: (evt, ui) => {
      h.stopMoving.call(h, evt, ui);
    },
    revert: 150,
    beforeStop: (evt, ui) => h.beforeStop.call(h, evt, ui),
    distance: 3,
    change: function (event, ui) {
      if (opts.prepend && ui.placeholder.index() < 1) {
        $('li.form-prepend').after(ui.placeholder);
      } else if (opts.append && ui.placeholder.index() >= $stage.children('li').length - 1) {
        $('li.form-append').before(ui.placeholder);
      }
    },
    update: function (event, ui) {
      if (h.doCancel) {
        return false;
      }
      if ($(ui.item).closest('.stage-wrap') && $(ui.item).closest(rowWrapperClassSelector).length === 0) {
        h.doCancel = true;
        processControl(ui.item);
      } else {
        if (enhancedBootstrapEnabled()) {
          hideInvisibleRowPlaceholders();
        }
        h.setFieldOrder($cbUL);
        h.doCancel = !opts.sortableControls;
      }
    }
  });
  $cbUL.on('mouseenter', function () {
    if (!h.stageIsEmpty()) {
      $stage.children(tmpRowPlaceholderClassSelector + ':not(:last-child)').addClass(invisibleRowPlaceholderClass);
    }
  });
  const processControl = control => {
    if (control[0].classList.contains('input-set-control')) {
      const inputSets = [];
      const inputSet = opts.inputSets.find(set => (0,_utils__WEBPACK_IMPORTED_MODULE_10__.hyphenCase)(set.name || set.label) === control[0].dataset.type);
      if (inputSet && inputSet.showHeader) {
        const header = {
          type: 'header',
          subtype: 'h2',
          id: inputSet.name,
          label: inputSet.label
        };
        inputSets.push(header);
      }
      inputSets.push(...inputSet.fields);
      inputSets.forEach(field => {
        prepFieldVars(field, true);
        if (h.stopIndex || h.stopIndex === 0) {
          h.stopIndex++;
        }
      });
    } else {
      prepFieldVars(control, true);
    }
  };
  const $editorWrap = $(d.editorWrap);
  $('<div class="snackbar">').appendTo($editorWrap);
  let cbClasses = 'cb-wrap';
  let cbStyle = '';
  if (opts.stickyControls.enable) {
    cbClasses += ' sticky-controls';
    const offsetDefaults = {
      top: 0,
      bottom: 'auto',
      right: 'auto',
      left: 'auto'
    };
    const offset = Object.assign({}, offsetDefaults, config.opts.stickyControls.offset);
    if (offset.top !== 0) {
      cbStyle = `top: ${offset.top}px`;
    }
  }
  const cbWrap = m('div', d.controls, {
    id: `${data.formID}-cb-wrap`,
    className: cbClasses,
    style: cbStyle
  });
  if (opts.showActionButtons) {
    cbWrap.appendChild(d.formActions);
  }
  const gridModeHelp = m('div', '', {
    id: `${data.formID}-gridModeHelp`,
    className: 'grid-mode-help'
  });
  cbWrap.appendChild(gridModeHelp);
  $editorWrap.append(d.stage, cbWrap);
  if (element.type !== 'textarea') {
    $(element).append($editorWrap);
  } else {
    $(element).replaceWith($editorWrap);
  }
  $(d.controls).on('click', 'li', _ref => {
    let {
      target
    } = _ref;
    if (h.stageIsEmpty()) {
      $stage.find(tmpRowPlaceholderClassSelector).eq(0).remove();
    }
    const $control = $(target).closest('li');
    h.stopIndex = opts.append ? $stage.children().length - 1 : undefined;
    processControl($control);
    h.save.call(h);
  });
  const nonEditableFields = () => {
    const cancelArray = [];
    const disabledField = type => m('li', opts[type], {
      className: `disabled-field form-${type}`
    });
    if (opts.prepend && !$('.disabled-field.form-prepend', d.stage).length) {
      cancelArray.push(true);
      $stage.prepend(disabledField('prepend'));
    }
    if (opts.append && !$('.disabled-field.form-append', d.stage).length) {
      cancelArray.push(true);
      $stage.append(disabledField('append'));
    }
    h.disabledTT(d.stage);
    return cancelArray.some(elem => elem === true);
  };
  const prepFieldVars = function ($field, isNew) {
    if (isNew === void 0) {
      isNew = false;
    }
    let field = {};
    if ($field instanceof jQuery) {
      field.type = $field[0].dataset.type;
      if (field.type) {
        const custom = controls.custom.lookup(field.type);
        if (custom) {
          field = Object.assign({}, custom);
        } else {
          const controlClass = controls.getClass(field.type);
          field.label = controlClass.label(field.type);
        }
      } else {
        const attrs = $field[0].attributes;
        if (!isNew) {
          field.values = $field.children().map((index, elem) => {
            return {
              label: $(elem).text(),
              value: $(elem).attr('value'),
              selected: Boolean($(elem).attr('selected'))
            };
          });
        }
        for (let i = attrs.length - 1; i >= 0; i--) {
          field[attrs[i].name] = attrs[i].value;
        }
      }
    } else {
      field = Object.assign({}, $field);
    }
    if (!field.name) {
      field.name = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.nameAttr)(field);
    }
    if (isNew && ['text', 'number', 'file', 'date', 'select', 'textarea', 'autocomplete'].includes(field.type)) {
      field.className = field.className || 'form-control';
    }
    const match = /(?:^|\s)btn-(.*?)(?:\s|$)/g.exec(field.className);
    if (match) {
      field.style = match[1];
    }
    if (isNew) {
      const eventTimeout = setTimeout(() => {
        document.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_5__["default"].fieldAdded);
        clearTimeout(eventTimeout);
      }, 10);
    }
    opts.onAddField(data.lastID, field);
    appendNewField(field, isNew);
    opts.onAddFieldAfter(data.lastID, field);
    d.stage.classList.remove('empty');
  };
  formBuilder.prepFieldVars = prepFieldVars;
  const loadFields = function (formData) {
    formData = h.getData(formData);
    if (formData && formData.length) {
      formData.forEach(field => CaptureRowData(field));
      formData.forEach(fieldData => prepFieldVars((0,_utils__WEBPACK_IMPORTED_MODULE_10__.trimObj)(fieldData)));
      d.stage.classList.remove('empty');
    } else if (opts.defaultFields && opts.defaultFields.length) {
      config.opts.defaultFields.forEach(field => CaptureRowData(field));
      h.addDefaultFields();
    } else if (!opts.prepend && !opts.append) {
      d.stage.classList.add('empty');
      d.stage.dataset.content = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('getStarted');
    }
    if (nonEditableFields()) {
      d.stage.classList.remove('empty');
    }
    h.save();
  };
  function CaptureRowData(field) {
    const gridRowValue = h.getRowValue(field.className);
    if (gridRowValue && !formRows.includes(gridRowValue)) {
      formRows.push(gridRowValue);
    }
  }
  const fieldOptions = function (fieldData) {
    const {
      type,
      values
    } = fieldData;
    let fieldValues;
    const optionActions = [m('a', mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('addOption'), {
      className: 'add add-opt'
    })];
    const fieldOptions = [m('label', mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('selectOptions'), {
      className: 'false-label'
    })];
    const isMultiple = fieldData.multiple || type === 'checkbox-group';
    const optionDataTemplate = count => {
      const label = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('optionCount', count);
      return {
        selected: false,
        label,
        value: (0,_utils__WEBPACK_IMPORTED_MODULE_10__.hyphenCase)(label)
      };
    };
    if (!values || !values.length) {
      let defaultOptCount = [1, 2, 3];
      if (['checkbox-group', 'checkbox'].includes(type)) {
        defaultOptCount = [1];
      }
      fieldValues = defaultOptCount.map(optionDataTemplate);
      const firstOption = fieldValues[0];
      if (firstOption.hasOwnProperty('selected') && type !== 'radio-group') {
        firstOption.selected = true;
      }
    } else {
      fieldValues = values.map(option => Object.assign({}, {
        selected: false
      }, option));
    }
    const optionActionsWrap = m('div', optionActions, {
      className: 'option-actions'
    });
    const options = m('ol', fieldValues.map(function (option, index, _, fieldName) {
      if (fieldName === void 0) {
        fieldName = fieldData.name;
      }
      const optionData = config.opts.onAddOption(option, {
        type,
        index,
        isMultiple
      });
      const optionGroupName = fieldName + '-options';
      return selectFieldOptions(optionGroupName, optionData, isMultiple);
    }), {
      className: 'sortable-options'
    });
    const optionsWrap = m('div', [options, optionActionsWrap], {
      className: 'sortable-options-wrap'
    });
    fieldOptions.push(optionsWrap);
    return m('div', fieldOptions, {
      className: 'form-group field-options'
    }).outerHTML;
  };
  const defaultFieldAttrs = type => {
    const defaultAttrs = ['required', 'label', 'description', 'placeholder', 'className', 'name', 'access', 'value'];
    const noValFields = ['header', 'paragraph', 'file', 'autocomplete'].concat(d.optionFields);
    const valueField = !noValFields.includes(type);
    const typeAttrsMap = {
      autocomplete: defaultAttrs.concat(['options', 'requireValidOption']),
      button: ['label', 'subtype', 'style', 'className', 'name', 'value', 'access'],
      checkbox: ['required', 'label', 'description', 'toggle', 'inline', 'className', 'name', 'access', 'other', 'options'],
      text: defaultAttrs.concat(['subtype', 'maxlength']),
      date: defaultAttrs.concat(['subtype', 'min', 'max', 'step']),
      file: defaultAttrs.concat(['multiple']),
      header: ['label', 'subtype', 'className', 'access'],
      hidden: ['name', 'value', 'access'],
      paragraph: ['label', 'subtype', 'className', 'access'],
      number: defaultAttrs.concat(['subtype', 'min', 'max', 'step']),
      select: defaultAttrs.concat(['multiple', 'options']),
      textarea: defaultAttrs.concat(['subtype', 'maxlength', 'rows'])
    };
    if (type in controls.registeredSubtypes && !(type in typeAttrsMap)) {
      typeAttrsMap[type] = defaultAttrs.concat(['subtype']);
    }
    typeAttrsMap['checkbox-group'] = typeAttrsMap.checkbox;
    typeAttrsMap['radio-group'] = typeAttrsMap.checkbox;
    const typeAttrs = typeAttrsMap[type];
    if (type === 'radio-group') {
      (0,_utils__WEBPACK_IMPORTED_MODULE_10__.removeFromArray)('toggle', typeAttrs);
    }
    if (['header', 'paragraph', 'button'].includes(type)) {
      (0,_utils__WEBPACK_IMPORTED_MODULE_10__.removeFromArray)('description', typeAttrs);
    }
    if (!valueField) {
      (0,_utils__WEBPACK_IMPORTED_MODULE_10__.removeFromArray)('value', typeAttrs);
    }
    return typeAttrs || defaultAttrs;
  };
  const advFields = values => {
    const {
      type
    } = values;
    const advFields = [];
    const typeClass = controls.getClass(type);
    const fieldAttrs = defaultFieldAttrs(type);
    const advFieldMap = {
      required: () => requiredField(values),
      toggle: () => boolAttribute('toggle', values, {
        first: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('toggle')
      }),
      inline: () => {
        const labels = {
          first: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('inline'),
          second: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('inlineDesc', type.replace('-group', ''))
        };
        return boolAttribute('inline', values, labels);
      },
      label: () => textAttribute('label', values),
      description: () => textAttribute('description', values),
      subtype: isHidden => selectAttribute('subtype', values, subtypes[type], isHidden),
      style: () => btnStyles(values.style),
      placeholder: () => textAttribute('placeholder', values),
      rows: () => numberAttribute('rows', values),
      className: isHidden => textAttribute('className', values, isHidden),
      name: isHidden => textAttribute('name', values, isHidden),
      value: () => textAttribute('value', values),
      maxlength: () => numberAttribute('maxlength', values),
      access: () => {
        const rolesDisplay = values.role ? 'style="display:block"' : '';
        const availableRoles = [`<div class="available-roles" ${rolesDisplay}>`];
        for (key in opts.roles) {
          if (opts.roles.hasOwnProperty(key)) {
            const roleId = `fld-${data.lastID}-roles-${key}`;
            const cbAttrs = {
              type: 'checkbox',
              name: 'roles[]',
              value: key,
              id: roleId,
              className: 'roles-field'
            };
            if (roles.includes(key)) {
              cbAttrs.checked = 'checked';
            }
            availableRoles.push(`<label for="${roleId}">`);
            availableRoles.push(h.input(cbAttrs).outerHTML);
            availableRoles.push(` ${opts.roles[key]}</label>`);
          }
        }
        availableRoles.push('</div>');
        const accessLabels = {
          first: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('roles'),
          second: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('limitRole'),
          content: availableRoles.join('')
        };
        return boolAttribute('access', values, accessLabels);
      },
      other: () => boolAttribute('other', values, {
        first: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('enableOther'),
        second: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('enableOtherMsg')
      }),
      options: () => fieldOptions(values),
      requireValidOption: () => boolAttribute('requireValidOption', values, {
        first: ' ',
        second: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('requireValidOption')
      }),
      multiple: () => {
        const typeLabels = {
          default: {
            first: 'Multiple',
            second: 'set multiple attribute'
          },
          file: {
            first: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('multipleFiles'),
            second: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('allowMultipleFiles')
          },
          select: {
            first: ' ',
            second: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('selectionsMessage')
          }
        };
        return boolAttribute('multiple', values, typeLabels[type] || typeLabels.default);
      }
    };
    let key;
    const roles = values.role !== undefined ? values.role.split(',') : [];
    const numAttrs = ['min', 'max', 'step'];
    numAttrs.forEach(numAttr => {
      advFieldMap[numAttr] = type === 'number' ? () => numberAttribute(numAttr, values) : () => textAttribute(numAttr, values);
    });
    const noDisable = ['name', 'className', 'subtype'];
    const typeUserAttrs = Object.assign({}, opts.typeUserAttrs['*'], opts.typeUserAttrs[type]);
    Object.keys(fieldAttrs).forEach(index => {
      const attr = fieldAttrs[index];
      const useDefaultAttr = [true];
      const isDisabled = opts.disabledAttrs.includes(attr);
      if (opts.typeUserDisabledAttrs[type]) {
        const typeDisabledAttrs = opts.typeUserDisabledAttrs[type];
        useDefaultAttr.push(!typeDisabledAttrs.includes(attr));
      }
      if (typeClass.definition.hasOwnProperty('disabledAttrs')) {
        const userDisabledAttrs = typeClass.definition.disabledAttrs;
        useDefaultAttr.push(!userDisabledAttrs.includes(attr));
      }
      if (typeClass.definition.hasOwnProperty('defaultAttrs')) {
        const userAttrs = Object.keys(typeClass.definition.defaultAttrs);
        useDefaultAttr.push(!userAttrs.includes(attr));
      }
      if (typeUserAttrs) {
        const userAttrs = Object.keys(typeUserAttrs);
        useDefaultAttr.push(!userAttrs.includes(attr));
      }
      if (isDisabled && !noDisable.includes(attr)) {
        useDefaultAttr.push(false);
      }
      if (useDefaultAttr.every(Boolean)) {
        advFields.push(advFieldMap[attr](isDisabled));
      }
    });
    if (typeClass.definition.hasOwnProperty('defaultAttrs')) {
      const customAttr = processTypeUserAttrs(typeClass.definition.defaultAttrs, values);
      advFields.push(customAttr);
    }
    if (typeUserAttrs) {
      const customAttr = processTypeUserAttrs(typeUserAttrs, values);
      advFields.push(customAttr);
    }
    return advFields.join('');
  };
  function userAttrType(attrData) {
    return [['array', _ref2 => {
      let {
        options
      } = _ref2;
      return !!options;
    }], ['boolean', _ref3 => {
      let {
        type
      } = _ref3;
      return type === 'checkbox';
    }], [typeof attrData.value, () => true]].find(typeCondition => typeCondition[1](attrData))[0];
  }
  function hasSubType(values, subType) {
    return values.subtype && values.subtype === subType;
  }
  function processTypeUserAttrs(typeUserAttr, values) {
    const advField = [];
    const attrTypeMap = {
      array: selectUserAttrs,
      string: inputUserAttrs,
      number: numberAttribute,
      boolean: (attr, attrData) => {
        let isChecked = false;
        if (attr.type === 'checkbox') {
          isChecked = Boolean(attrData.hasOwnProperty('value') ? attrData.value : false);
        } else if (values.hasOwnProperty(attr)) {
          isChecked = values[attr];
        } else if (attrData.hasOwnProperty('value') || attrData.hasOwnProperty('checked')) {
          isChecked = attrData.value || attrData.checked || false;
        }
        return boolAttribute(attr, _objectSpread(_objectSpread({}, attrData), {}, {
          [attr]: isChecked
        }), {
          first: i18n[attr]
        });
      }
    };
    for (const attribute in typeUserAttr) {
      if (typeUserAttr.hasOwnProperty(attribute)) {
        const attrValType = userAttrType(typeUserAttr[attribute]);
        if (attrValType !== 'undefined') {
          const orig = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(attribute);
          const tUA = Object.assign({}, typeUserAttr[attribute]);
          let origValue = tUA.value;
          if (attrValType === 'boolean') {
            tUA[attribute] ??= tUA.value;
          } else if (attrValType === 'number') {
            tUA[attribute] ??= (0,_utils__WEBPACK_IMPORTED_MODULE_10__.firstNumberOrUndefined)(values[attribute], origValue);
          } else {
            origValue ??= '';
            tUA[attribute] ??= values[attribute] || origValue;
          }
          tUA.value = tUA[attribute];
          if (tUA.label) {
            i18n[attribute] = Array.isArray(tUA.label) ? mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(...tUA.label) || tUA.label[0] : tUA.label;
          }
          if (attrTypeMap[attrValType]) {
            advField.push(attrTypeMap[attrValType](attribute, tUA));
          }
          i18n[attribute] = orig;
        } else if (attrValType === 'undefined' && hasSubType(values, attribute)) {
          advField.push(processTypeUserAttrs(typeUserAttr[attribute], values));
        } else {
          const def = {};
          def[attribute] = typeUserAttr[attribute];
          opts.notify.warning('Warning: unable to process typeUserAttr definition : ' + JSON.stringify(def));
        }
      }
    }
    return advField.join('');
  }
  function inputUserAttrs(name, inputAttrs) {
    const {
        class: classname,
        className
      } = inputAttrs,
      attrs = _objectWithoutProperties(inputAttrs, _excluded);
    let textAttrs = {
      id: name + '-' + data.lastID,
      title: attrs.description || attrs.label || name.toUpperCase(),
      name: name,
      type: attrs.type || 'text',
      className: [`fld-${name}`, (classname || className || '').trim()],
      value: attrs.hasOwnProperty(name) ? attrs[name] : attrs.value || ''
    };
    const label = `<label for="${textAttrs.id}">${i18n[name] || ''}</label>`;
    const optionInputs = ['checkbox', 'checkbox-group', 'radio-group'];
    if (!optionInputs.includes(textAttrs.type)) {
      textAttrs.className.push('form-control');
    }
    textAttrs = Object.assign({}, attrs, textAttrs);
    const textInput = (() => {
      if (textAttrs.type === 'textarea') {
        const textValue = textAttrs.value;
        delete textAttrs.value;
        return `<textarea ${(0,_utils__WEBPACK_IMPORTED_MODULE_10__.attrString)(textAttrs)}>${textValue}</textarea>`;
      } else {
        return `<input ${(0,_utils__WEBPACK_IMPORTED_MODULE_10__.attrString)(textAttrs)}>`;
      }
    })();
    const inputWrap = `<div class="input-wrap">${textInput}</div>`;
    return `<div class="form-group ${name}-wrap">${label}${inputWrap}</div>`;
  }
  function selectUserAttrs(name, fieldData) {
    const {
        multiple,
        options,
        label: labelText,
        value,
        class: classname,
        className
      } = fieldData,
      restData = _objectWithoutProperties(fieldData, _excluded2);
    const selectValues = fieldData.hasOwnProperty(name) ? fieldData[name] : value || [];
    const optis = Object.keys(options).map(val => {
      const attrs = {
        value: val
      };
      const optionTextVal = options[val];
      const optionText = Array.isArray(optionTextVal) ? mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(...optionTextVal) || optionTextVal[0] : optionTextVal;
      if (Array.isArray(selectValues) ? selectValues.includes(val) : val === selectValues) {
        attrs.selected = true;
      }
      return m('option', optionText, attrs);
    });
    const selectAttrs = {
      id: `${name}-${data.lastID}`,
      title: restData.description || labelText || name.toUpperCase(),
      name,
      className: `fld-${name} form-control ${classname || className || ''}`.trim()
    };
    if (multiple) {
      selectAttrs.multiple = true;
    }
    const label = `<label for="${selectAttrs.id}">${i18n[name]}</label>`;
    Object.keys(restData).forEach(function (attr) {
      selectAttrs[attr] = restData[attr];
    });
    const select = m('select', optis, selectAttrs).outerHTML;
    const inputWrap = `<div class="input-wrap">${select}</div>`;
    return `<div class="form-group ${name}-wrap">${label}${inputWrap}</div>`;
  }
  const boolAttribute = function (name, values, labels) {
    if (labels === void 0) {
      labels = {};
    }
    const label = txt => m('label', txt, {
      for: `${name}-${data.lastID}`
    }).outerHTML;
    const cbAttrs = {
      type: 'checkbox',
      className: `fld-${name}`,
      name,
      id: `${name}-${data.lastID}`
    };
    if (values[name]) {
      cbAttrs.checked = true;
    }
    const left = [];
    let right = [m('input', null, cbAttrs).outerHTML];
    if (labels.first) {
      left.push(label(labels.first));
    }
    if (labels.second) {
      right.push(' ', label(labels.second));
    }
    if (labels.content) {
      right.push(labels.content);
    }
    right = m('div', right, {
      className: 'input-wrap'
    }).outerHTML;
    return m('div', left.concat(right), {
      className: `form-group ${name}-wrap`
    }).outerHTML;
  };
  const btnStyles = style => {
    let styleField = '';
    if (style === 'undefined') {
      style = 'default';
    }
    const styleLabel = `<label>${i18n.style}</label>`;
    styleField += h.input({
      value: style || 'default',
      type: 'hidden',
      className: 'btn-style'
    }).outerHTML;
    styleField += '<div class="btn-group" role="group">';
    _config__WEBPACK_IMPORTED_MODULE_8__.styles.btn.forEach(btnStyle => {
      const classList = ['btn-xs', 'btn', `btn-${btnStyle}`];
      if (style === btnStyle) {
        classList.push('selected');
      }
      const btn = m('button', mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(`styles.btn.${btnStyle}`), {
        value: btnStyle,
        type: 'button',
        className: classList.join(' ')
      }).outerHTML;
      styleField += btn;
    });
    styleField += '</div>';
    styleField = m('div', [styleLabel, styleField], {
      className: 'form-group style-wrap'
    });
    return styleField.outerHTML;
  };
  const numberAttribute = (attribute, values) => {
    const {
        class: classname,
        className
      } = values,
      attrs = _objectWithoutProperties(values, _excluded3);
    const attrVal = Number.isNaN(attrs[attribute]) ? undefined : attrs[attribute];
    const attrLabel = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(attribute) || attribute;
    const placeholder = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(`placeholder.${attribute}`);
    const inputConfig = {
      type: 'number',
      value: attrVal,
      name: attribute,
      placeholder,
      className: `fld-${attribute} form-control ${classname || className || ''}`.trim(),
      id: `${attribute}-${data.lastID}`
    };
    const numberAttribute = h.input((0,_utils__WEBPACK_IMPORTED_MODULE_10__.trimObj)(inputConfig)).outerHTML;
    const inputWrap = `<div class="input-wrap">${numberAttribute}</div>`;
    const inputLabel = `<label for="${inputConfig.id}">${attrLabel}</label>`;
    return m('div', [inputLabel, inputWrap], {
      className: `form-group ${attribute}-wrap`
    }).outerHTML;
  };
  const selectAttribute = function (attribute, values, optionData, isHidden) {
    if (isHidden === void 0) {
      isHidden = false;
    }
    const selectOptions = optionData.map((option, i) => {
      let optionAttrs = Object.assign({
        label: `${i18n.option} ${i}`,
        value: undefined
      }, option);
      if (option.value === values[attribute]) {
        optionAttrs.selected = true;
      }
      optionAttrs = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.trimObj)(optionAttrs);
      return m('option', optionAttrs.label, optionAttrs);
    });
    const selectAttrs = {
      id: attribute + '-' + data.lastID,
      name: attribute,
      className: `fld-${attribute} form-control`
    };
    const labelText = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(attribute) || (0,_utils__WEBPACK_IMPORTED_MODULE_10__.capitalize)(attribute) || '';
    const label = m('label', labelText, {
      for: selectAttrs.id
    });
    const select = m('select', selectOptions, selectAttrs);
    const inputWrap = m('div', select, {
      className: 'input-wrap'
    });
    const visibility = isHidden ? 'none' : 'block';
    const attrWrap = m('div', [label, inputWrap], {
      className: `form-group ${selectAttrs.name}-wrap`,
      style: `display: ${visibility}`
    });
    return attrWrap.outerHTML;
  };
  const textAttribute = function (attribute, values, isHidden) {
    if (isHidden === void 0) {
      isHidden = false;
    }
    const textArea = ['paragraph'];
    let attrVal = values[attribute] || '';
    let attrLabel = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(attribute) || attribute;
    if (attribute === 'label') {
      if (textArea.includes(values.type)) {
        attrLabel = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('content');
      } else {
        attrVal = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.parsedHtml)(attrVal);
      }
    }
    const placeholder = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(`placeholders.${attribute}`) || '';
    let attributefield = '';
    const noMakeAttr = [];
    if (!noMakeAttr.some(elem => elem === true)) {
      const inputConfig = {
        name: attribute,
        placeholder,
        className: `fld-${attribute} form-control`,
        id: `${attribute}-${data.lastID}`
      };
      const attributeLabel = m('label', attrLabel, {
        for: inputConfig.id
      }).outerHTML;
      if (attribute === 'label' && !opts.disableHTMLLabels) {
        inputConfig.contenteditable = true;
        attributefield += m('div', attrVal, inputConfig).outerHTML;
      } else if (values.type === 'textarea' && attribute === 'value') {
        attributefield += m('textarea', attrVal, inputConfig).outerHTML;
      } else {
        inputConfig.value = attrVal;
        inputConfig.type = 'text';
        attributefield += `<input ${(0,_utils__WEBPACK_IMPORTED_MODULE_10__.attrString)(inputConfig)}>`;
      }
      const inputWrap = `<div class="input-wrap">${attributefield}</div>`;
      let visibility = isHidden ? 'none' : 'block';
      if (attribute === 'value') {
        visibility = values.subtype && values.subtype === 'quill' && 'none';
      }
      attributefield = m('div', [attributeLabel, inputWrap], {
        className: `form-group ${attribute}-wrap`,
        style: `display: ${visibility}`
      });
    }
    return attributefield.outerHTML;
  };
  const requiredField = fieldData => {
    const {
      type
    } = fieldData;
    const noRequire = ['header', 'paragraph', 'button'];
    const noMake = [];
    let requireField = '';
    if (noRequire.includes(type)) {
      noMake.push(true);
    }
    if (!noMake.some(elem => elem === true)) {
      requireField = boolAttribute('required', fieldData, {
        first: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('required')
      });
    }
    return requireField;
  };
  const appendNewField = function (values, isNew) {
    if (isNew === void 0) {
      isNew = true;
    }
    const columnData = prepareFieldRow(values);
    data.lastID = h.incrementId(data.lastID);
    const type = values.type || 'text';
    let label = values.label || (isNew ? i18n[type] || mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('label') : '');
    if (type === 'hidden' || label === '') {
      var _mi18n$get;
      label = `${(_mi18n$get = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(type)) !== null && _mi18n$get !== void 0 ? _mi18n$get : type}: ${values.name}`;
    }
    const disabledFieldButtons = opts.disabledFieldButtons[type] || values.disabledFieldButtons;
    let fieldButtons = [m('a', null, {
      type: 'remove',
      id: 'del_' + data.lastID,
      className: `del-button btn ${css_prefix_text}cancel delete-confirm`,
      title: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('removeMessage')
    }), m('a', null, {
      type: 'edit',
      id: data.lastID + '-edit',
      className: `toggle-form btn ${css_prefix_text}pencil`,
      title: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('hide')
    }), m('a', null, {
      type: 'copy',
      id: data.lastID + '-copy',
      className: `copy-button btn ${css_prefix_text}copy`,
      title: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('copyButtonTooltip')
    })];
    if (enhancedBootstrapEnabled()) {
      fieldButtons.push(m('a', null, {
        type: 'grid',
        id: data.lastID + '-grid',
        className: `grid-button btn ${css_prefix_text}grid`,
        title: 'Grid Mode'
      }));
    } else {
      fieldButtons.push(m('a', null, {
        type: 'sort',
        id: data.lastID + '-sort-higher',
        className: `sort-button sort-button-higher btn ${css_prefix_text}sort-higher`,
        title: 'Move Higher'
      }), m('a', null, {
        type: 'sort',
        id: data.lastID + '-sort-lower',
        className: `sort-button sort-button-lower btn ${css_prefix_text}sort-lower`,
        title: 'Move Lower'
      }));
    }
    if (disabledFieldButtons && Array.isArray(disabledFieldButtons)) {
      fieldButtons = fieldButtons.filter(btnData => !disabledFieldButtons.includes(btnData.type));
    }
    const liContents = [m('div', fieldButtons, {
      className: 'field-actions'
    })];
    const labelValue = opts.disableHTMLLabels ? document.createTextNode(label) : (0,_utils__WEBPACK_IMPORTED_MODULE_10__.parsedHtml)(label);
    liContents.push(m('label', labelValue, {
      className: 'field-label'
    }));
    liContents.push(m('span', ' *', {
      className: 'required-asterisk',
      style: values.required ? 'display:inline' : ''
    }));
    const descAttrs = {
      className: 'tooltip-element',
      tooltip: values.description,
      style: values.description ? 'display:inline-block' : 'display:none'
    };
    liContents.push(m('span', '?', descAttrs));
    const prevHolder = m('div', '', {
      className: 'prev-holder',
      dataFieldId: data.lastID
    });
    liContents.push(prevHolder);
    const formElements = m('div', [advFields(values), m('a', mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('close'), {
      className: 'close-field'
    })], {
      className: 'form-elements'
    });
    const editPanel = m('div', formElements, {
      id: `${data.lastID}-holder`,
      className: 'frm-holder',
      dataFieldId: data.lastID
    });
    formBuilder.currentEditPanel = editPanel;
    liContents.push(editPanel);
    const field = m('li', liContents, {
      class: `${type}-field form-field`,
      type: type,
      id: data.lastID
    });
    const $li = $(field);
    AttachColWrapperHandler($li);
    $li.data('fieldData', {
      attrs: values
    });
    if (typeof h.stopIndex !== 'undefined') {
      $(d.stage).children().eq(h.stopIndex).before($li);
    } else {
      $stage.append($li);
    }
    $('.sortable-options', $li).sortable({
      update: () => h.updatePreview($li)
    });
    h.updatePreview($li);
    let rowWrapperNode;
    if (enhancedBootstrapEnabled()) {
      const targetRow = `div.row-${columnData.rowUniqueId}`;
      let newRowCreated = false;
      if ($stage.children(targetRow).length) {
        rowWrapperNode = $stage.children(targetRow);
      } else {
        rowWrapperNode = m('div', null, {
          id: `${field.id}-row`,
          className: `row row-${columnData.rowUniqueId} ${rowWrapperClass}`
        });
        newRowCreated = true;
      }
      if (insertingNewControl && insertTargetIsRow) {
        $targetInsertWrapper.attr('id', rowWrapperNode.id);
        $targetInsertWrapper.attr('class', rowWrapperNode.className);
        $targetInsertWrapper.attr('style', '');
        $targetInsertWrapper.attr('data-row-id', columnData.rowUniqueId);
        rowWrapperNode = $targetInsertWrapper;
      }
      const colWrapperNode = m('div', null, {
        id: `${field.id}-cont`,
        className: `${columnData.columnSize} ${colWrapperClass}`
      });
      if (insertingNewControl && insertTargetIsColumn) {
        if ($targetInsertWrapper.attr('prepend') === 'true') {
          $(colWrapperNode).prependTo(rowWrapperNode);
        } else {
          $(colWrapperNode).insertAfter(`#${$targetInsertWrapper.attr('appendAfter')}`);
        }
      }
      if (!insertTargetIsColumn) {
        $(colWrapperNode).appendTo(rowWrapperNode);
      }
      if (!insertingNewControl && newRowCreated) {
        $li.after(rowWrapperNode);
      }
      $li.appendTo(colWrapperNode);
      if (newRowCreated) {
        setupSortableRowWrapper(rowWrapperNode);
        hideInvisibleRowPlaceholders();
        SetupInvisibleRowPlaceholders(rowWrapperNode);
        if (opts.enableColumnInsertMenu) {
          $(rowWrapperNode).off('mouseenter');
          $(rowWrapperNode).on('mouseenter', function (e) {
            setupColumnInserts($(e.currentTarget));
          });
          $(rowWrapperNode).off('mouseleave');
          $(rowWrapperNode).on('mouseleave', function (e) {
            hideColumnInsertButtons($(e.currentTarget));
          });
        }
      }
      setupColumnInserts(rowWrapperNode, true);
      if (columnData.addedDefaultColumnClass) {
        $li.attr('addedDefaultColumnClass', true);
      }
      h.tmpCleanPrevHolder($(prevHolder));
    }
    if (opts.typeUserEvents[type] && opts.typeUserEvents[type].onadd) {
      opts.typeUserEvents[type].onadd(field);
    } else if (opts.typeUserEvents['*'] && opts.typeUserEvents['*'].onadd) {
      opts.typeUserEvents['*'].onadd(field);
    }
    if (isNew) {
      if (opts.editOnAdd) {
        h.closeAllEdit();
        h.toggleEdit(data.lastID, false);
      }
      if (field.scrollIntoView && opts.scrollToFieldOnAdd) {
        field.scrollIntoView({
          behavior: 'smooth'
        });
      }
    }
    if (enhancedBootstrapEnabled()) {
      if (insertingNewControl && insertTargetIsColumn) {
        autoSizeRowColumns(rowWrapperNode, true);
      }
    }
    insertingNewControl = false;
    insertTargetIsRow = false;
    insertTargetIsColumn = false;
  };
  function AttachColWrapperHandler(colWrapper) {
    if (!enhancedBootstrapEnabled()) {
      return;
    }
    colWrapper.mouseenter(function (e) {
      if (!gridMode) {
        gridModeTargetField = $(this);
        gridModeStartX = e.pageX;
        gridModeStartY = e.pageY;
      }
    });
  }
  function hideInvisibleRowPlaceholders() {
    $stage.find(tmpRowPlaceholderClassSelector + ':not(:last-child)').css('height', '1px').addClass(invisibleRowPlaceholderClass);
  }
  function SetupInvisibleRowPlaceholders(rowWrapperNode) {
    const wrapperClone = $(rowWrapperNode).clone();
    wrapperClone.addClass(invisibleRowPlaceholderClass).addClass(tmpRowPlaceholderClass).html('');
    wrapperClone.css('height', '1px');
    wrapperClone.attr('class', wrapperClone.attr('class').replace('row-', ''));
    wrapperClone.removeAttr('id');
    if ($(rowWrapperNode).index() === 0) {
      const wrapperClone2 = $(wrapperClone).clone();
      $stage.prepend(wrapperClone2);
      setupSortableRowWrapper(wrapperClone2);
    }
    wrapperClone.insertAfter($(rowWrapperNode));
    setupSortableRowWrapper(wrapperClone);
    $stage.find(rowWrapperClassSelector + ':last-of-type').removeClass(invisibleRowPlaceholderClass);
  }
  function ResetAllInvisibleRowPlaceholders() {
    $stage.children(tmpRowPlaceholderClassSelector).remove();
    $stage.children(rowWrapperClassSelector).each((i, elem) => {
      SetupInvisibleRowPlaceholders($(elem));
    });
    $stage.find(rowWrapperClassSelector + ':last-of-type').removeClass(invisibleRowPlaceholderClass);
  }
  function setupSortableRowWrapper(rowWrapperNode) {
    if (!enhancedBootstrapEnabled()) {
      return;
    }
    $(rowWrapperNode).sortable({
      connectWith: [rowWrapperClassSelector],
      cursor: 'move',
      opacity: 0.9,
      revert: 150,
      distance: 3,
      tolerance: 'pointer',
      helper: function (e, el) {
        const clone = el.clone();
        clone.find('.field-actions').remove();
        clone.css({
          width: '20%',
          height: '100px',
          minHeight: '60px',
          overflow: 'hidden'
        });
        return clone;
      },
      over: function (event) {
        const overTarget = $(event.target);
        const overTargetIsPlaceholder = overTarget.hasClass(tmpRowPlaceholderClass);
        if (!overTargetIsPlaceholder) {
          removeColumnInsertButtons(overTarget);
        }
        overTarget.addClass('hoverDropStyleInverse');
        if (!overTargetIsPlaceholder) {
          hideInvisibleRowPlaceholders();
          overTarget.prev(tmpRowPlaceholderClassSelector).removeClass(invisibleRowPlaceholderClass).css('height', '40px');
          overTarget.next(tmpRowPlaceholderClassSelector).removeClass(invisibleRowPlaceholderClass).css('height', '40px');
        }
      },
      out: function (event) {
        $stage.children(tmpRowPlaceholderClassSelector).removeClass('hoverDropStyleInverse');
        $(event.target).removeClass('hoverDropStyleInverse');
      },
      placeholder: 'hoverDropStyleInverse',
      receive: function (event, ui) {
        const senderIsControlsBox = $(ui.sender).attr('id') === $cbUL.attr('id');
        const droppingToNewRow = $(ui.item).parent().hasClass(tmpRowPlaceholderClass);
        const droppingToExistingRow = !droppingToNewRow && $(ui.item).parent().hasClass(rowWrapperClass);
        if (droppingToNewRow) {
          if (senderIsControlsBox) {
            insertTargetIsRow = true;
            insertingNewControl = true;
            $targetInsertWrapper = $(ui.item).parent();
          } else {
            const colWrapper = $(ui.item);
            const columnData = prepareFieldRow({});
            const rowWrapperNode = m('div', null, {
              id: `${colWrapper.find('li').attr('id')}-row`,
              className: `row row-${columnData.rowUniqueId} ${rowWrapperClass}`
            });
            $(ui.item).parent().replaceWith(rowWrapperNode);
            AttachColWrapperHandler($(ui.item));
            colWrapper.appendTo(rowWrapperNode);
            setupSortableRowWrapper(rowWrapperNode);
            syncFieldWithNewRow(colWrapper.attr('id'));
          }
        }
        if (droppingToExistingRow && senderIsControlsBox) {
          if ($(ui.item).prev().hasClass('btnAddControl')) {
            $targetInsertWrapper = $(ui.item).prev();
          } else if ($(ui.item).next().hasClass('btnAddControl')) {
            $targetInsertWrapper = $(ui.item).next();
          } else {
            $targetInsertWrapper = $(ui.item).attr('prepend', 'true');
          }
          const parentRowValue = h.getRowClass($(ui.item).parent().attr('class'));
          $targetInsertWrapper.addClass(parentRowValue);
          insertTargetIsColumn = true;
          insertingNewControl = true;
          h.stopIndex = undefined;
        }
        if (insertingNewControl) {
          h.doCancel = true;
          processControl(ui.item);
          h.save.call(h);
        }
        checkRowCleanup();
        ResetAllInvisibleRowPlaceholders();
        const listFieldItem = $(ui.item).find('li');
        if (listFieldItem.length) {
          CheckTinyMCETransition(listFieldItem);
          UpdatePreviewAndSave(listFieldItem);
          h.tmpCleanPrevHolder($(ui.item).find('.prev-holder'));
        }
      },
      start: (event, ui) => {
        $stage.addClass('__preventColButtons');
        removeColumnInsertButtons(ui.item.closest(rowWrapperClassSelector));
      },
      stop: (event, ui) => {
        $stage.removeClass('__preventColButtons');
        $stage.children(tmpRowPlaceholderClassSelector).removeClass('hoverDropStyleInverse');
        autoSizeRowColumns(ui.item.closest(rowWrapperClassSelector), true);
      },
      update: (event, ui) => {
        syncFieldWithNewRow(ui.item.attr('id'));
      }
    });
    const rowId = h.getRowValue(rowWrapperNode.className);
    if (rowId !== '0') {
      $(rowWrapperNode).attr('data-row-id', rowId);
    }
  }
  function CheckTinyMCETransition(fieldListItem) {
    const isTinyMCE = fieldListItem.find('textarea[type="tinymce"]');
    if (isTinyMCE.length) {
      window.lastFormBuilderCopiedTinyMCE = window.tinymce.get(isTinyMCE.attr('id')).save();
    }
  }
  function UpdatePreviewAndSave(fieldListItem) {
    h.updatePreview(fieldListItem);
    h.save.call(h);
  }
  function setupColumnInserts(rowWrapper, hide) {
    if (hide === void 0) {
      hide = false;
    }
    if (!opts.enableColumnInsertMenu || $stage.hasClass('__preventColButtons')) {
      return;
    }
    $(rowWrapper).children('button.btnAddControl').remove();
    const rowColumns = $(rowWrapper).children(colWrapperClassSelector);
    rowColumns.each((i, elem) => {
      const colWrapper = $(elem);
      colWrapper.addClass('colWithInsertButtons');
      if (rowColumns.index(colWrapper) === 0) {
        $(`<button type="button" class="formbuilder-icon-plus btnAddControl ${h.getRowClass(colWrapper.parent().attr('class'))}" prepend="true" style='visibility: ${hide ? 'hidden' : 'visible'}'></button>`).insertBefore(colWrapper);
      }
      $(`<button type="button" class="formbuilder-icon-plus btnAddControl ${h.getRowClass(colWrapper.parent().attr('class'))}" appendAfter="${colWrapper.attr('id')}" style='visibility: ${hide ? 'hidden' : 'visible'}'></button>`).insertAfter(colWrapper);
    });
  }
  function removeColumnInsertButtons(rowWrapper) {
    rowWrapper.find('button.btnAddControl').remove();
    rowWrapper.find(colWrapperClassSelector).removeClass('colWithInsertButtons');
  }
  function hideColumnInsertButtons(rowWrapper) {
    rowWrapper.find('button.btnAddControl').css('visibility', 'hidden');
  }
  function prepareFieldRow(data) {
    if (!enhancedBootstrapEnabled()) {
      return {};
    }
    const result = h.tryParseColumnInfo(data);
    if (!result.rowUniqueId) {
      if (insertingNewControl && insertTargetIsColumn) {
        result.rowUniqueId = h.getRowValue($targetInsertWrapper.attr('class'));
      } else {
        let nextRow;
        if (formRows.length === 0) {
          nextRow = 1;
        } else {
          const numericalRows = formRows.filter(value => !isNaN(value) && !isNaN(parseInt(value))).map(str => parseInt(str));
          nextRow = Math.max(...numericalRows, 0) + 1;
        }
        result.rowUniqueId = nextRow.toString();
      }
      result.columnSize = opts.defaultGridColumnClass;
      if (!data.className) {
        data.className = '';
      }
      data.className += ` row-${result.rowUniqueId} ${result.columnSize}`;
      result.addedDefaultColumnClass = true;
    }
    if (!formRows.includes(result.rowUniqueId)) {
      formRows.push(result.rowUniqueId);
    }
    return result;
  }
  const selectFieldOptions = function (optionGroupName, optionData, multipleSelect) {
    const optionTemplate = {
      selected: false,
      label: '',
      value: ''
    };
    const optionInputType = {
      selected: multipleSelect ? 'checkbox' : 'radio'
    };
    const optionInputTypeMap = {
      boolean: (value, prop) => {
        const attrs = {
          value,
          type: optionInputType[prop] || 'checkbox'
        };
        if (value) {
          attrs.checked = !!value;
        }
        attrs.name = optionGroupName;
        return ['input', null, attrs];
      },
      number: value => ['input', null, {
        value,
        type: 'number'
      }],
      string: (value, prop) => ['input', null, {
        value,
        type: 'text',
        placeholder: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get(`placeholder.${prop}`) || ''
      }],
      array: values => ['select', values.map(_ref4 => {
        let {
          label,
          value
        } = _ref4;
        return m('option', label, {
          value
        });
      })],
      object: _ref5 => {
        let {
            tag,
            content
          } = _ref5,
          attrs = _objectWithoutProperties(_ref5, _excluded4);
        return [tag, content, attrs];
      }
    };
    optionData = _objectSpread(_objectSpread({}, optionTemplate), optionData);
    const optionInputs = Object.entries(optionData).map(_ref6 => {
      let [prop, val] = _ref6;
      const optionInputDataType = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.getContentType)(val);
      const [tag, content, attrs] = optionInputTypeMap[optionInputDataType](val, prop);
      const optionClassName = `option-${prop} option-attr`;
      attrs['data-attr'] = prop;
      attrs.className = attrs.className ? `${attrs.className} ${optionClassName}` : optionClassName;
      return m(tag, content, attrs);
    });
    const removeAttrs = {
      className: `remove btn ${css_prefix_text}cancel`,
      title: mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('removeMessage')
    };
    optionInputs.push(m('a', null, removeAttrs));
    return m('li', optionInputs).outerHTML;
  };
  const cloneItem = function cloneItem(currentItem) {
    data.lastID = h.incrementId(data.lastID);
    CheckTinyMCETransition(currentItem);
    const currentId = currentItem.attr('id');
    const type = currentItem.attr('type');
    const ts = new Date().getTime();
    const cloneName = type + '-' + ts;
    const $clone = currentItem.clone();
    $('.fld-name', $clone).val(cloneName);
    $clone.find('[id]').each((i, elem) => {
      elem.id = elem.id.replace(currentId, data.lastID);
    });
    $clone.find('[for]').each((index, elem) => {
      const curId = elem.getAttribute('for');
      const newForId = curId.replace(currentId, data.lastID);
      elem.setAttribute('for', newForId);
    });
    const selects = currentItem.find('select');
    selects.each(function (i) {
      const select = this;
      $clone.find('select').eq(i).val($(select).val());
    });
    $clone.attr('id', data.lastID);
    $clone.attr('name', cloneName);
    $clone.addClass('cloned');
    $('.sortable-options', $clone).sortable();
    if (opts.typeUserEvents[type] && opts.typeUserEvents[type].onclone) {
      opts.typeUserEvents[type].onclone($clone[0]);
    } else if (opts.typeUserEvents['*'] && opts.typeUserEvents['*'].onclone) {
      opts.typeUserEvents['*'].onclone($clone[0]);
    }
    return $clone;
  };
  const saveAndUpdate = evt => {
    if (evt) {
      const isDisabled = [_ref7 => {
        let {
          type,
          target
        } = _ref7;
        return type === 'keyup' && target.name === 'className';
      }].some(typeCondition => typeCondition(evt));
      if (isDisabled) {
        return false;
      }
      UpdatePreviewAndSave($(evt.target).closest('.form-field'));
    }
  };
  const previewSelectors = ['.form-elements input', '.form-elements select', '.form-elements textarea'].join(', ');
  $stage.on('change blur keyup click', previewSelectors, lodash_throttle__WEBPACK_IMPORTED_MODULE_1___default()(saveAndUpdate, _config__WEBPACK_IMPORTED_MODULE_8__.defaultTimeout, {
    leading: false
  }));
  $stage.on('click touchstart', '.remove', e => {
    const $field = $(e.target).parents('.form-field:eq(0)');
    const field = $field[0];
    const type = field.getAttribute('type');
    const $option = $(e.target.parentElement);
    e.preventDefault();
    const options = field.querySelector('.sortable-options');
    const optionsCount = options.childNodes.length;
    if (optionsCount <= 2 && !type.includes('checkbox')) {
      opts.notify.error('Error: ' + mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('minOptionMessage'));
    } else {
      $option.slideUp('250', () => {
        $option.remove();
        UpdatePreviewAndSave($field);
      });
    }
  });
  $stage.on('touchstart', 'input', e => {
    const $input = $(e.target);
    if (e.handled !== true) {
      if ($input.attr('type') === 'checkbox') {
        $input.trigger('click');
      } else {
        $input.focus();
        const fieldVal = $input.val();
        $input.val(fieldVal);
      }
    } else {
      return false;
    }
  });
  $stage.on('click touchstart', '.toggle-form, .close-field', function (e) {
    e.stopPropagation();
    e.preventDefault();
    if (e.handled !== true) {
      const targetID = $(e.target).parents('.form-field:eq(0)').attr('id');
      h.toggleEdit(targetID);
      e.handled = true;
    } else {
      return false;
    }
  });
  $stage.on('dblclick', 'li.form-field', e => {
    if (['select', 'input', 'label', 'textarea'].includes(e.target.tagName.toLowerCase()) || e.target.isContentEditable === true) {
      return;
    }
    e.stopPropagation();
    e.preventDefault();
    if (e.handled !== true) {
      const targetID = $(e.target).closest('li.form-field').attr('id');
      h.toggleEdit(targetID);
      e.handled = true;
    }
  });
  $stage.on('change', '[name="subtype"]', e => {
    const $field = $(e.target).closest('li.form-field');
    const $valWrap = $('.value-wrap', $field);
    $valWrap.toggle(e.target.value !== 'quill');
  });
  $stage.on('change', '[name="name"]', e => {
    const name = e.target.value;
    if ((0,_sanitizer__WEBPACK_IMPORTED_MODULE_11__.attributeWillClobber)(name)) {
      opts.notify.error('Potential for Dom Clobbering with field name ' + name);
    }
  });
  const stageOnChangeSelectors = ['.prev-holder input', '.prev-holder select', '.prev-holder textarea'];
  $stage.on('change', stageOnChangeSelectors.join(', '), e => {
    let prevOptions;
    if (e.target.classList.contains('other-option')) {
      return;
    }
    const field = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.closest)(e.target, '.form-field');
    const optionTypes = ['select', 'checkbox-group', 'radio-group'];
    if (optionTypes.includes(field.type)) {
      const options = field.getElementsByClassName('option-value');
      if (field.type === 'select') {
        (0,_utils__WEBPACK_IMPORTED_MODULE_10__.forEach)(options, i => {
          const selectedOption = options[i].parentElement.childNodes[0];
          selectedOption.checked = e.target.value === options[i].value;
        });
      } else {
        prevOptions = document.getElementsByName(e.target.name);
        (0,_utils__WEBPACK_IMPORTED_MODULE_10__.forEach)(prevOptions, i => {
          if (prevOptions[i].classList.contains('other-option')) return;
          const selectedOption = options[i].parentElement.childNodes[0];
          selectedOption.checked = prevOptions[i].checked;
        });
      }
    } else {
      const fieldVal = document.getElementById('value-' + field.id);
      if (fieldVal) {
        fieldVal.value = e.target.value;
      }
    }
    h.save.call(h);
  });
  (0,_utils__WEBPACK_IMPORTED_MODULE_10__.addEventListeners)(d.stage, 'keyup change', _ref8 => {
    let {
      target
    } = _ref8;
    if (!target.classList.contains('fld-label')) return;
    const value = target.value || target.innerHTML;
    const label = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.closest)(target, '.form-field').querySelector('.field-label');
    (0,_sanitizer__WEBPACK_IMPORTED_MODULE_11__.setElementContent)(label, (0,_utils__WEBPACK_IMPORTED_MODULE_10__.parsedHtml)(value), config.opts.disableHTMLLabels);
  });
  $stage.on('keyup', 'input.error', _ref9 => {
    let {
      target
    } = _ref9;
    return $(target).removeClass('error');
  });
  $stage.on('keyup', 'input[name="description"]', function (e) {
    const $field = $(e.target).parents('.form-field:eq(0)');
    const closestToolTip = $('.tooltip-element', $field);
    const ttVal = $(e.target).val();
    if (ttVal !== '') {
      if (!closestToolTip.length) {
        const tt = `<span class="tooltip-element" tooltip="${ttVal}">?</span>`;
        $('.field-label', $field).after(tt);
      } else {
        closestToolTip.attr('tooltip', ttVal).css('display', 'inline-block');
      }
    } else {
      if (closestToolTip.length) {
        closestToolTip.css('display', 'none');
      }
    }
  });
  $stage.on('change', '.fld-multiple', e => {
    const newType = e.target.checked ? 'checkbox' : 'radio';
    const $options = $('.option-selected', $(e.target).closest('.form-elements'));
    $options.each(i => $options[i].type = newType);
    return newType;
  });
  $stage.on('blur', 'input.fld-name', function (e) {
    e.target.value = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.safename)(e.target.value);
    if (e.target.value === '') {
      $(e.target).addClass('field-error').attr('placeholder', mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('cannotBeEmpty'));
    } else {
      $(e.target).removeClass('field-error');
    }
  });
  $stage.on('blur', 'input.fld-maxlength', e => {
    e.target.value = (0,_utils__WEBPACK_IMPORTED_MODULE_10__.forceNumber)(e.target.value);
  });
  $stage.on('click touchstart', '.btnAddControl', function (evt) {
    const btn = $(evt.currentTarget);
    cloneControls = $cbUL.clone();
    cloneControls.hover(function () {}, function () {
      cloneControls.remove();
    });
    cloneControls.on('click', 'li', _ref10 => {
      let {
        target
      } = _ref10;
      insertTargetIsColumn = true;
      insertingNewControl = true;
      $targetInsertWrapper = btn;
      const $control = $(target).closest('li');
      h.stopIndex = undefined;
      processControl($control);
      h.save.call(h);
      cloneControls.remove();
    });
    $stage.append(cloneControls);
    if (btn.index() == 0) {
      cloneControls.css({
        position: 'fixed',
        left: btn.offset().left,
        top: btn.offset().top - $(window).scrollTop()
      });
    } else {
      cloneControls.css({
        position: 'fixed',
        left: btn.offset().left - 80,
        top: btn.offset().top - $(window).scrollTop()
      });
    }
    const bottomOfClone = cloneControls.offset().top + cloneControls.outerHeight();
    const bottomOfScreen = $(window).scrollTop() + $(window).innerHeight();
    if (bottomOfClone > bottomOfScreen) {
      cloneControls.css({
        top: parseInt(cloneControls.css('top')) - (bottomOfClone - bottomOfScreen)
      });
    }
  });
  $stage.on('click', `.${css_prefix_text}copy`, function (evt) {
    evt.preventDefault();
    const currentItem = $(evt.target).parent().parent('li');
    const $clone = cloneItem(currentItem);
    if (enhancedBootstrapEnabled()) {
      prepareCloneWrappers($clone, currentItem);
    } else {
      $clone.insertAfter(currentItem);
    }
    UpdatePreviewAndSave($clone);
    h.tmpCleanPrevHolder($clone.find('.prev-holder'));
    if (opts.editOnAdd) {
      h.closeField(data.lastID, false);
    }
  });
  if (enhancedBootstrapEnabled()) {
    $stage.on('stageEmptied', () => {
      formRows = [];
    });
  }
  function prepareCloneWrappers($clone, currentItem) {
    const inputClassElement = $(`#className-${currentItem.attr('id')}`);
    const columnData = prepareFieldRow({});
    const rowWrapper = m('div', null, {
      id: `${$clone.attr('id')}-row`,
      className: `row row-${columnData.rowUniqueId} ${rowWrapperClass}`
    });
    const colWrapper = m('div', null, {
      id: `${$clone.attr('id')}-cont`,
      className: `${h.getBootstrapColumnClass(inputClassElement.val())} ${colWrapperClass}`
    });
    $(colWrapper).appendTo(rowWrapper);
    let insertAfterElement;
    if (currentItem.parent().is('div')) {
      insertAfterElement = currentItem.closest(rowWrapperClassSelector);
    } else if (currentItem.parent().is('ul')) {
      insertAfterElement = currentItem;
    }
    $(rowWrapper).insertAfter(insertAfterElement);
    $clone.appendTo(colWrapper);
    setupSortableRowWrapper(rowWrapper);
    ResetAllInvisibleRowPlaceholders();
    syncFieldWithNewRow($clone.attr('id'));
  }
  $stage.on('click', '.delete-confirm', e => {
    e.preventDefault();
    const buttonPosition = e.target.getBoundingClientRect();
    const bodyRect = document.body.getBoundingClientRect();
    const coords = {
      pageX: buttonPosition.left + buttonPosition.width / 2,
      pageY: buttonPosition.top - bodyRect.top - 12
    };
    const deleteID = $(e.target).parents('.form-field:eq(0)').attr('id');
    const $field = $(document.getElementById(deleteID));
    document.addEventListener('modalClosed', function () {
      $field.removeClass('deleting');
    }, false);
    if (opts.fieldRemoveWarn) {
      const warnH3 = m('h3', mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('warning'));
      const warnMessage = m('p', mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('fieldRemoveWarning'));
      h.confirm([warnH3, warnMessage], () => h.removeField(deleteID), coords);
      $field.addClass('deleting');
    } else {
      h.removeField(deleteID);
    }
  });
  let gridMode = false;
  let gridModeTargetField;
  let gridModeStartX;
  let gridModeStartY;
  let wheelDelta = 0;
  $stage.on('click touchstart', '.grid-button', e => {
    e.preventDefault();
    const ID = $(e.target).parents('.form-field:eq(0)').attr('id');
    gridModeTargetField = $(document.getElementById(ID));
    gridModeStartX = e.pageX;
    gridModeStartY = e.pageY;
    wheelDelta = 0;
    toggleGridModeActive();
  });
  $stage.on('wheel', function (e) {
    if (e.originalEvent.deltaY === 0) {
      return;
    }
    if (gridMode) {
      e.preventDefault();
      wheelDelta += e.originalEvent.deltaY;
      const deltaPerShift = 120;
      if (wheelDelta > 0 && wheelDelta < deltaPerShift || wheelDelta < 0 && wheelDelta > -deltaPerShift) {
        return;
      }
      const parentCont = gridModeTargetField.closest('div');
      const currentColValue = h.getBootstrapColumnValue(parentCont.attr('class'));
      const change = Math.round(wheelDelta / deltaPerShift);
      wheelDelta = wheelDelta % deltaPerShift;
      const nextColSize = currentColValue + change;
      if (nextColSize > 12) {
        h.showToast('<b class="formbuilder-required">Column Size cannot exceed 12</b>');
        return;
      }
      if (nextColSize < 1) {
        h.showToast('<b class="formbuilder-required">Column Size cannot be less than 1</b>');
        return;
      }
      const rowWrapper = gridModeTargetField.closest(rowWrapperClassSelector);
      let totalRowValueCount = nextColSize;
      rowWrapper.children(`div${colWrapperClassSelector}`).each((i, elem) => {
        const colWrapper = $(`#${elem.id}`);
        const fieldID = colWrapper.find('li').attr('id');
        if (fieldID != gridModeTargetField.attr('id')) {
          totalRowValueCount += h.getBootstrapColumnValue($(`#${fieldID}-cont`).attr('class'));
        }
      });
      if (totalRowValueCount > 12) {
        h.showToast('<b class="formbuilder-required">There is a maximum of 12 columns per row</b>');
        return;
      }
      h.syncBootstrapColumnWrapperAndClassProperty(gridModeTargetField.attr('id'), nextColSize);
      gridModeTargetField.attr('manuallyChangedDefaultColumnClass', true);
      buildGridModeCurrentRowInfo();
      h.toggleHighlight(gridModeTargetField);
    }
  });
  $(document).keydown(e => {
    if (gridMode) {
      e.preventDefault();
      const rowWrapper = gridModeTargetField.closest(rowWrapperClassSelector);
      switch (event.code) {
        case 'KeyW':
        case 'ArrowUp':
          removeColumnInsertButtons(rowWrapper);
          moveFieldUp(rowWrapper);
          break;
        case 'KeyS':
        case 'ArrowDown':
          removeColumnInsertButtons(rowWrapper);
          moveFieldDown(rowWrapper);
          break;
        case 'KeyA':
        case 'ArrowLeft':
          removeColumnInsertButtons(rowWrapper);
          moveFieldLeft();
          break;
        case 'KeyD':
        case 'ArrowRight':
          removeColumnInsertButtons(rowWrapper);
          moveFieldRight();
          break;
        case 'KeyR':
          removeColumnInsertButtons(rowWrapper);
          autoSizeRowColumns(rowWrapper, true);
          setupColumnInserts(rowWrapper, true);
          break;
      }
      buildGridModeCurrentRowInfo();
      hideColumnInsertButtons(rowWrapper);
    }
  });
  function moveFieldUp(rowWrapper) {
    const previousRowSibling = rowWrapper.prevAll().not(tmpRowPlaceholderClassSelector).not('.form-prepend').first();
    if (previousRowSibling.length) {
      $(gridModeTargetField.parent().parent()).swapWith(previousRowSibling);
      h.toggleHighlight(gridModeTargetField);
    }
  }
  function moveFieldDown(rowWrapper) {
    const nextRowSibling = rowWrapper.nextAll().not(invisibleRowPlaceholderClassSelector).not('.form-append').first();
    if (nextRowSibling.length) {
      $(gridModeTargetField.parent().parent()).swapWith(nextRowSibling);
      h.toggleHighlight(gridModeTargetField);
    }
  }
  function moveFieldLeft() {
    const colSibling = gridModeTargetField.parent().prev();
    if (colSibling.length) {
      gridModeTargetField.parent().after(colSibling);
    }
    h.toggleHighlight(gridModeTargetField);
  }
  function moveFieldRight() {
    const colSibling = gridModeTargetField.parent().next();
    if (colSibling.length) {
      gridModeTargetField.parent().before(colSibling);
    }
    h.toggleHighlight(gridModeTargetField);
  }
  function autoSizeRowColumns(rowWrapper, force) {
    if (force === void 0) {
      force = false;
    }
    const childRowCount = rowWrapper.children(`div${colWrapperClassSelector}`).length;
    const newAutoCalcSizeValue = Math.floor(12 / childRowCount);
    rowWrapper.children(`div${colWrapperClassSelector}`).each((i, elem) => {
      const colWrapper = $(`#${elem.id}`);
      if (!force && colWrapper.find('li').attr('manuallyChangedDefaultColumnClass') == 'true') {
        h.showToast(`Preserving column size of field ${i + 1} because you had personally adjusted it`, 4000);
        return;
      }
      h.syncBootstrapColumnWrapperAndClassProperty(elem.id.replace('-cont', ''), newAutoCalcSizeValue);
    });
  }
  function syncFieldWithNewRow(fieldID) {
    if (fieldID) {
      const inputClassElement = $(`#className-${fieldID.replace('-cont', '')}`);
      if (inputClassElement.val()) {
        const oldRow = h.getRowClass(inputClassElement.val());
        const wrapperRow = h.getRowClass(inputClassElement.closest(rowWrapperClassSelector).attr('class'));
        inputClassElement.val(inputClassElement.val().replace(oldRow, wrapperRow));
        checkRowCleanup();
      }
    }
  }
  $(document).mousemove(e => {
    if (gridMode && h.getDistanceBetweenPoints(gridModeStartX, gridModeStartY, e.pageX, e.pageY) > config.opts.cancelGridModeDistance) {
      toggleGridModeActive(false);
    }
  });
  $(document).on('checkRowCleanup', (event, data) => {
    checkRowCleanup();
    const rowWrapper = $(`#${data.rowWrapperID}`);
    if (rowWrapper.length) {
      autoSizeRowColumns(rowWrapper, true);
    }
  });
  $(document).on('fieldOpened', (event, data) => {
    const rowWrapper = $(`#${data.rowWrapperID}`);
    if (rowWrapper.length) {
      hideColumnInsertButtons(rowWrapper);
    }
  });
  function checkRowCleanup() {
    $stage.find(colWrapperClassSelector).each((i, elem) => {
      const $colWrapper = $(elem);
      if ($colWrapper.is(':empty') && !formBuilder.preserveTempContainers.includes($colWrapper.attr('id'))) {
        $colWrapper.remove();
      }
    });
    $stage.children(rowWrapperClassSelector).not(tmpRowPlaceholderClassSelector).each((i, elem) => {
      if ($(elem).children(colWrapperClassSelector).length === 0) {
        const rowValue = h.getRowValue($(elem).attr('class'));
        formRows = formRows.filter(x => x !== rowValue);
        $(elem).remove();
      } else {
        setupColumnInserts($(elem), true);
      }
    });
  }
  function toggleGridModeActive(active) {
    if (active === void 0) {
      active = true;
    }
    if (active) {
      gridMode = true;
      h.showToast('Starting Grid Mode - Use the mousewheel to resize.', 1500);
      $cbUL.css('display', 'none');
      $(d.formActions).css('display', 'none');
      buildGridModeHelp();
      h.closeAllEdit();
      h.toggleHighlight(gridModeTargetField);
      hideInvisibleRowPlaceholders();
    } else {
      h.showToast('Grid Mode Finished', 1500);
      const rowWrapper = gridModeTargetField.closest(rowWrapperClassSelector);
      let totalRowValueCount = 0;
      rowWrapper.children(`div${colWrapperClassSelector}`).each((i, elem) => {
        const colWrapper = $(`#${elem.id}`);
        const fieldID = colWrapper.find('li').attr('id');
        totalRowValueCount += h.getBootstrapColumnValue($(`#${fieldID}-cont`).attr('class'));
      });
      if (totalRowValueCount > 12) {
        autoSizeRowColumns(rowWrapper, true);
      }
      gridMode = false;
      gridModeTargetField = null;
      $(gridModeHelp).empty();
      $cbUL.css('display', 'unset');
      $(d.formActions).css('display', 'unset');
    }
  }
  function buildGridModeHelp() {
    $(gridModeHelp).html(`
    <div style='padding:5px'>
      <h3 class="text text-center">Grid Mode</h3>    
      
      <table style='border-spacing:7px;border-collapse: separate'>
        <thead>
          <tr>
            <th>Action</th>
            <th>Result</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><kbd>MOUSEWHEEL</kbd></td>
            <td>Adjust the field column size</td>
          </tr>    
          <tr>
            <td><kbd>W or &#x2191;</kbd></td> 
            <td>Move entire row up</td>
          </tr>
          <tr>
              <td><kbd>S or &#x2193;</kbd></td> 
              <td>Move entire row down</td>
          </tr>
          <tr>
              <td><kbd>A or &#x2190;</kbd></td>
              <td>Move field left within the row</td>
          </tr>
          <tr>
              <td><kbd>D or &#x2192;</kbd></td> 
              <td>Move field right within the row</td>
          </tr>
          <tr>
            <td><kbd>R</kbd></td> 
            <td>Resize all fields within the row to be maximally equal</td>
          </tr>
          <tr>
        </tbody> 
      </table>

      <h5 class="text text-center" style='padding-top:10px'>Current Row Fields</h5>    
      
      <table class='gridHelpCurrentRow'>
        <colgroup>
          <col width="100%" />
          <col width="0%" />
        </colgroup>
        
        <thead>
          <tr>
            <th>Field</th>
            <th>Size</th>
          </tr>
        </thead>

        <tbody>
        </tbody> 
      </table>
      
    </div>
    `);
    buildGridModeCurrentRowInfo();
  }
  function buildGridModeCurrentRowInfo() {
    $(gridModeHelp).find('.gridHelpCurrentRow tbody').empty();
    const rowWrapper = gridModeTargetField.closest(rowWrapperClassSelector);
    rowWrapper.children(`div${colWrapperClassSelector}`).each((i, elem) => {
      const colWrapper = $(`#${elem.id}`);
      const fieldID = colWrapper.find('li').attr('id');
      const field = $(`#${fieldID}`);
      const fieldType = field.attr('type');
      let label = $(`#label-${fieldID}`).html();
      if (fieldType === 'hidden' || fieldType === 'paragraph') {
        label = $(`#name-${fieldID}`).val();
      }
      if (!label) {
        label = field.attr('id');
      }
      let currentFieldClass = '';
      if (gridModeTargetField.attr('id') === fieldID) {
        currentFieldClass = 'currentGridModeFieldHighlight';
      }
      $(gridModeHelp).find('.gridHelpCurrentRow tbody').append(`
        <tr>
          <td class='grid-mode-help-row1 ${currentFieldClass}'>${label}</td>
          <td class='grid-mode-help-row2 ${currentFieldClass}'>
            ${h.getBootstrapColumnValue($(`#${fieldID}-cont`).attr('class'))}
          </td>
        <tr>
      `);
    });
  }
  $stage.on('click', '.field-actions .sort-button', function (evt) {
    evt.preventDefault();
    const currentItem = $(evt.target).parent().parent('li');
    let swap;
    if ($(evt.target).hasClass('sort-button-higher')) {
      swap = currentItem.prev('li');
      if (swap.length && !swap.hasClass('form-prepend')) {
        currentItem.insertBefore(swap);
      }
    } else {
      swap = currentItem.next('li');
      if (swap.length && !swap.hasClass('form-append')) {
        currentItem.insertAfter(swap);
      }
    }
    h.toggleHighlight(currentItem);
  });
  $stage.on('click', '.style-wrap button', e => {
    const $button = $(e.target);
    const $attrsWrap = $button.closest('.form-elements');
    const styleVal = $button.val();
    const $btnStyle = $('.btn-style', $attrsWrap);
    $btnStyle.val(styleVal);
    $button.siblings('.btn').removeClass('selected');
    $button.addClass('selected');
    UpdatePreviewAndSave($btnStyle.closest('.form-field'));
  });
  $stage.on('click', '.fld-required', e => {
    $(e.target).closest('.form-field').find('.required-asterisk').toggle();
  });
  $stage.on('click', 'input.fld-access', function (e) {
    const roles = $(e.target).closest('.form-field').find('.available-roles');
    const enableRolesCB = $(e.target);
    roles.slideToggle(250, function () {
      if (!enableRolesCB.is(':checked')) {
        $('input[type=checkbox]', roles).removeAttr('checked');
      }
    });
  });
  $stage.on('click', '.add-opt', function (e) {
    e.preventDefault();
    const type = $(e.target).closest('.form-field').attr('type');
    const $optionWrap = $(e.target).closest('.field-options');
    const $multiple = $('[name="multiple"]', $optionWrap);
    const $firstOption = $('.option-selected:eq(0)', $optionWrap);
    const isMultiple = $multiple.length ? $multiple.prop('checked') : $firstOption.attr('type') === 'checkbox';
    const optionTemplate = {
      selected: false,
      label: '',
      value: ''
    };
    const $sortableOptions = $('.sortable-options', $optionWrap);
    const optionData = config.opts.onAddOption(optionTemplate, {
      type,
      index: $sortableOptions.children().length,
      isMultiple
    });
    $sortableOptions.append(selectFieldOptions($firstOption.attr('name'), optionData, isMultiple));
  });
  $stage.on('mouseover mouseout', '.remove, .del-button', e => $(e.target).closest('li').toggleClass('delete'));
  loadFields();
  if (opts.disableInjectedStyle === true) {
    const styleTags = document.getElementsByClassName('formBuilder-injected-style');
    (0,_utils__WEBPACK_IMPORTED_MODULE_10__.forEach)(styleTags, i => (0,_dom__WEBPACK_IMPORTED_MODULE_2__.remove)(styleTags[i]));
  } else if (opts.disableInjectedStyle === 'bootstrap') {
    d.editorWrap.classList.remove('formbuilder-embedded-bootstrap');
  }
  document.dispatchEvent(_events__WEBPACK_IMPORTED_MODULE_5__["default"].loaded);
  formBuilder.actions = {
    getFieldTypes: activeOnly => activeOnly ? (0,_utils__WEBPACK_IMPORTED_MODULE_10__.subtract)(controls.getRegistered(), opts.disableFields) : controls.getRegistered(),
    clearFields: () => h.removeAllFields(d.stage),
    showData: h.showData.bind(h),
    save: minify => {
      const formData = h.save(minify);
      const formDataJS = window.JSON.parse(formData);
      config.opts.onSave(formDataJS);
      return formDataJS;
    },
    addField: (field, index) => {
      h.stopIndex = data.formData.length ? index : undefined;
      prepFieldVars(field);
    },
    removeField: h.removeField.bind(h),
    getData: h.getFormData.bind(h),
    setData: formData => {
      h.stopIndex = undefined;
      h.removeAllFields(d.stage);
      loadFields(formData);
    },
    setLang: locale => {
      return mi18n__WEBPACK_IMPORTED_MODULE_4___default().setCurrent.call((mi18n__WEBPACK_IMPORTED_MODULE_4___default()), locale).then(() => {
        d.stage.dataset.content = mi18n__WEBPACK_IMPORTED_MODULE_4___default().get('getStarted');
        controls.init();
        d.empty(d.formActions);
        h.formActionButtons().forEach(button => d.formActions.appendChild(button));
      });
    },
    showDialog: h.dialog.bind(h),
    toggleFieldEdit: fieldId => {
      const fieldIds = Array.isArray(fieldId) ? fieldId : [fieldId];
      fieldIds.forEach(fId => {
        if (!['number', 'string'].includes(typeof fId)) {
          return;
        }
        if (typeof fId === 'number') {
          fId = d.stage.children[fId].id;
        } else if (!/^frmb-/.test(fId)) {
          fId = d.stage.querySelector(fId).id;
        }
        h.toggleEdit(fId);
      });
    },
    toggleAllFieldEdit: () => {
      (0,_utils__WEBPACK_IMPORTED_MODULE_10__.forEach)(d.stage.children, index => {
        h.toggleEdit(d.stage.children[index].id);
      });
    },
    closeAllFieldEdit: h.closeAllEdit.bind(h),
    getCurrentFieldId: () => {
      return data.lastID;
    }
  };
  d.onRender(d.controls, () => {
    const onRenderTimeout = setTimeout(() => {
      d.stage.style.minHeight = `${d.controls.clientHeight}px`;
      clearTimeout(onRenderTimeout);
    }, 0);
  });
  return formBuilder;
}
const pluginInit = function (options, elem) {
  const _this = this;
  const _jQuery$extend = jQuery.extend({}, _config__WEBPACK_IMPORTED_MODULE_8__.defaultOptions, options, true),
    {
      i18n
    } = _jQuery$extend,
    opts = _objectWithoutProperties(_jQuery$extend, _excluded5);
  this.i18nOpts = jQuery.extend({}, _config__WEBPACK_IMPORTED_MODULE_8__.defaultI18n, i18n, true);
  const notInitialised = () => {
    console.error('formBuilder is still initialising');
    console.info('See https://formbuilder.online/docs/formBuilder/actions/getData/#wont-work and https://formbuilder.online/docs/formBuilder/promise/ for more information on formBuilder asynchronous loading');
  };
  const actionList = ['getFieldTypes', 'addField', 'clearFields', 'closeAllFieldEdit', 'getData', 'removeField', 'save', 'setData', 'setLang', 'showData', 'showDialog', 'toggleAllFieldEdit', 'toggleFieldEdit', 'getCurrentFieldId'];
  this.instance = {
    actions: actionList.reduce((actions, currentAction) => {
      actions[currentAction] = notInitialised;
      return actions;
    }, {}),
    markup: _utils__WEBPACK_IMPORTED_MODULE_10__.markup,
    get formData() {
      return _this.instance.actions.getData !== notInitialised && _this.instance.actions.getData('json');
    },
    promise: new Promise(function (resolve, reject) {
      mi18n__WEBPACK_IMPORTED_MODULE_4___default().init(_this.i18nOpts).then(() => {
        const formBuilder = new FormBuilder(opts, elem[0], jQuery);
        jQuery(elem[0]).data('formBuilder', formBuilder);
        Object.assign(_this.instance, formBuilder.actions);
        _this.instance.actions = formBuilder.actions;
        delete _this.instance.promise;
        resolve(_this.instance);
      }).catch(err => {
        reject(err);
        opts.notify.error(err);
      });
    })
  };
};
jQuery.fn.formBuilder = function (methodOrOptions) {
  if (methodOrOptions === void 0) {
    methodOrOptions = {};
  }
  const isMethod = typeof methodOrOptions === 'string';
  if (isMethod) {
    const instance = this.data('fbInstance');
    if (instance[methodOrOptions]) {
      if (typeof instance[methodOrOptions] === 'function') {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return instance[methodOrOptions].apply(this, args);
      }
      return instance[methodOrOptions];
    }
  } else {
    const plugin = new pluginInit(methodOrOptions, this);
    this.data('fbInstance', plugin.instance);
    return plugin.instance;
  }
};
}();
/******/ })()
;
})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,